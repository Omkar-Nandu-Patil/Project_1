
Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000851c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000524  08008630  08008630  00018630  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b54  08008b54  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08008b54  08008b54  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008b54  08008b54  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b54  08008b54  00018b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b58  08008b58  00018b58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08008b5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  200001e0  08008d3c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c8  08008d3c  000202c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008fcb  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018e0  00000000  00000000  000291d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009e0  00000000  00000000  0002aab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000960  00000000  00000000  0002b498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000027bd  00000000  00000000  0002bdf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b638  00000000  00000000  0002e5b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086950  00000000  00000000  00039bed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c053d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003de8  00000000  00000000  000c0590  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08008614 	.word	0x08008614

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08008614 	.word	0x08008614

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_d2lz>:
 8000d84:	b538      	push	{r3, r4, r5, lr}
 8000d86:	4605      	mov	r5, r0
 8000d88:	460c      	mov	r4, r1
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	4628      	mov	r0, r5
 8000d90:	4621      	mov	r1, r4
 8000d92:	f7ff fe13 	bl	80009bc <__aeabi_dcmplt>
 8000d96:	b928      	cbnz	r0, 8000da4 <__aeabi_d2lz+0x20>
 8000d98:	4628      	mov	r0, r5
 8000d9a:	4621      	mov	r1, r4
 8000d9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000da0:	f000 b80a 	b.w	8000db8 <__aeabi_d2ulz>
 8000da4:	4628      	mov	r0, r5
 8000da6:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000daa:	f000 f805 	bl	8000db8 <__aeabi_d2ulz>
 8000dae:	4240      	negs	r0, r0
 8000db0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db4:	bd38      	pop	{r3, r4, r5, pc}
 8000db6:	bf00      	nop

08000db8 <__aeabi_d2ulz>:
 8000db8:	b5d0      	push	{r4, r6, r7, lr}
 8000dba:	2200      	movs	r2, #0
 8000dbc:	4b0b      	ldr	r3, [pc, #44]	; (8000dec <__aeabi_d2ulz+0x34>)
 8000dbe:	4606      	mov	r6, r0
 8000dc0:	460f      	mov	r7, r1
 8000dc2:	f7ff fb89 	bl	80004d8 <__aeabi_dmul>
 8000dc6:	f7ff fe5f 	bl	8000a88 <__aeabi_d2uiz>
 8000dca:	4604      	mov	r4, r0
 8000dcc:	f7ff fb0a 	bl	80003e4 <__aeabi_ui2d>
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <__aeabi_d2ulz+0x38>)
 8000dd4:	f7ff fb80 	bl	80004d8 <__aeabi_dmul>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	460b      	mov	r3, r1
 8000ddc:	4630      	mov	r0, r6
 8000dde:	4639      	mov	r1, r7
 8000de0:	f7ff f9c2 	bl	8000168 <__aeabi_dsub>
 8000de4:	f7ff fe50 	bl	8000a88 <__aeabi_d2uiz>
 8000de8:	4621      	mov	r1, r4
 8000dea:	bdd0      	pop	{r4, r6, r7, pc}
 8000dec:	3df00000 	.word	0x3df00000
 8000df0:	41f00000 	.word	0x41f00000

08000df4 <Osrs_t_config>:
  int16_t dig_P8;  /**< dig_P8 cal register. */
  int16_t dig_P9;  /**< dig_P9 cal register. */

  /**Function configure F4 register **/

bool Osrs_t_config(osrs_temp_t tempSample){
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b088      	sub	sp, #32
 8000df8:	af04      	add	r7, sp, #16
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	71fb      	strb	r3, [r7, #7]
	 uint8_t data;
	 HAL_StatusTypeDef ReVal;
	 ReVal=HAL_I2C_Mem_Read(BMP280_I2C, BMP280_ADDRESS,REGISTER_ADDRESS_4, 1, &data,1, HAL_MAX_DELAY);
 8000dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000e02:	9302      	str	r3, [sp, #8]
 8000e04:	2301      	movs	r3, #1
 8000e06:	9301      	str	r3, [sp, #4]
 8000e08:	f107 030e 	add.w	r3, r7, #14
 8000e0c:	9300      	str	r3, [sp, #0]
 8000e0e:	2301      	movs	r3, #1
 8000e10:	22f4      	movs	r2, #244	; 0xf4
 8000e12:	21ec      	movs	r1, #236	; 0xec
 8000e14:	4839      	ldr	r0, [pc, #228]	; (8000efc <Osrs_t_config+0x108>)
 8000e16:	f001 fc07 	bl	8002628 <HAL_I2C_Mem_Read>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	73fb      	strb	r3, [r7, #15]

	 if(ReVal==HAL_OK){
 8000e1e:	7bfb      	ldrb	r3, [r7, #15]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d165      	bne.n	8000ef0 <Osrs_t_config+0xfc>
		 switch(tempSample){
 8000e24:	79fb      	ldrb	r3, [r7, #7]
 8000e26:	2b05      	cmp	r3, #5
 8000e28:	d84d      	bhi.n	8000ec6 <Osrs_t_config+0xd2>
 8000e2a:	a201      	add	r2, pc, #4	; (adr r2, 8000e30 <Osrs_t_config+0x3c>)
 8000e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e30:	08000e49 	.word	0x08000e49
 8000e34:	08000e59 	.word	0x08000e59
 8000e38:	08000e6f 	.word	0x08000e6f
 8000e3c:	08000e85 	.word	0x08000e85
 8000e40:	08000e9b 	.word	0x08000e9b
 8000e44:	08000eb1 	.word	0x08000eb1
		 case  Osrs_t_0x00:
			 data = data & OS_RATE_0;
 8000e48:	7bbb      	ldrb	r3, [r7, #14]
 8000e4a:	f003 031f 	and.w	r3, r3, #31
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	73bb      	strb	r3, [r7, #14]
			 data = data |OSRS_TEMP_SAMPLING_0;
 8000e52:	7bbb      	ldrb	r3, [r7, #14]
 8000e54:	73bb      	strb	r3, [r7, #14]
			 break;
 8000e56:	e036      	b.n	8000ec6 <Osrs_t_config+0xd2>
		 case  Osrs_t_0x1:
			 data = data & OS_RATE_0;
 8000e58:	7bbb      	ldrb	r3, [r7, #14]
 8000e5a:	f003 031f 	and.w	r3, r3, #31
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	73bb      	strb	r3, [r7, #14]
			 data = data | OSRS_TEMP_SAMPLING_1 ;
 8000e62:	7bbb      	ldrb	r3, [r7, #14]
 8000e64:	f043 0320 	orr.w	r3, r3, #32
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	73bb      	strb	r3, [r7, #14]
			 break;
 8000e6c:	e02b      	b.n	8000ec6 <Osrs_t_config+0xd2>
		 case  Osrs_t_0x2:
			 data = data & OS_RATE_0;
 8000e6e:	7bbb      	ldrb	r3, [r7, #14]
 8000e70:	f003 031f 	and.w	r3, r3, #31
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	73bb      	strb	r3, [r7, #14]
			 data = data | OSRS_TEMP_SAMPLING_2 ;
 8000e78:	7bbb      	ldrb	r3, [r7, #14]
 8000e7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	73bb      	strb	r3, [r7, #14]
			 break;
 8000e82:	e020      	b.n	8000ec6 <Osrs_t_config+0xd2>
		 case  Osrs_t_0x4:
			 data = data & OS_RATE_0;
 8000e84:	7bbb      	ldrb	r3, [r7, #14]
 8000e86:	f003 031f 	and.w	r3, r3, #31
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	73bb      	strb	r3, [r7, #14]
			 data = data | OSRS_TEMP_SAMPLING_3 ;
 8000e8e:	7bbb      	ldrb	r3, [r7, #14]
 8000e90:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	73bb      	strb	r3, [r7, #14]
			 break;
 8000e98:	e015      	b.n	8000ec6 <Osrs_t_config+0xd2>
		 case  Osrs_t_0x8:
			 data = data & OS_RATE_0;
 8000e9a:	7bbb      	ldrb	r3, [r7, #14]
 8000e9c:	f003 031f 	and.w	r3, r3, #31
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	73bb      	strb	r3, [r7, #14]
			 data = data | OSRS_TEMP_SAMPLING_4 ;
 8000ea4:	7bbb      	ldrb	r3, [r7, #14]
 8000ea6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	73bb      	strb	r3, [r7, #14]
			 break;
 8000eae:	e00a      	b.n	8000ec6 <Osrs_t_config+0xd2>
		 case  Osrs_t_0x16:
			 data = data & OS_RATE_0;
 8000eb0:	7bbb      	ldrb	r3, [r7, #14]
 8000eb2:	f003 031f 	and.w	r3, r3, #31
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	73bb      	strb	r3, [r7, #14]
			 data = data | OSRS_TEMP_SAMPLING_5 ;
 8000eba:	7bbb      	ldrb	r3, [r7, #14]
 8000ebc:	f063 035f 	orn	r3, r3, #95	; 0x5f
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	73bb      	strb	r3, [r7, #14]
			 break;
 8000ec4:	bf00      	nop

		 }
		 ReVal=HAL_I2C_Mem_Write(BMP280_I2C, BMP280_ADDRESS, REGISTER_ADDRESS_4, 1, &data, 1, I2C_DELAY);
 8000ec6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eca:	9302      	str	r3, [sp, #8]
 8000ecc:	2301      	movs	r3, #1
 8000ece:	9301      	str	r3, [sp, #4]
 8000ed0:	f107 030e 	add.w	r3, r7, #14
 8000ed4:	9300      	str	r3, [sp, #0]
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	22f4      	movs	r2, #244	; 0xf4
 8000eda:	21ec      	movs	r1, #236	; 0xec
 8000edc:	4807      	ldr	r0, [pc, #28]	; (8000efc <Osrs_t_config+0x108>)
 8000ede:	f001 faa9 	bl	8002434 <HAL_I2C_Mem_Write>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	73fb      	strb	r3, [r7, #15]
		 if(ReVal==HAL_OK){
 8000ee6:	7bfb      	ldrb	r3, [r7, #15]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d101      	bne.n	8000ef0 <Osrs_t_config+0xfc>
			 return true;
 8000eec:	2301      	movs	r3, #1
 8000eee:	e000      	b.n	8000ef2 <Osrs_t_config+0xfe>
		 }
	 }
	 return false;
 8000ef0:	2300      	movs	r3, #0
  }
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3710      	adds	r7, #16
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	20000218 	.word	0x20000218

08000f00 <Osrs_p_config>:


bool Osrs_p_config(osers_pres_t presSample){
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b088      	sub	sp, #32
 8000f04:	af04      	add	r7, sp, #16
 8000f06:	4603      	mov	r3, r0
 8000f08:	71fb      	strb	r3, [r7, #7]
	 uint8_t data;
	 HAL_StatusTypeDef ReVal;
	 ReVal=HAL_I2C_Mem_Read(BMP280_I2C, BMP280_ADDRESS, REGISTER_ADDRESS_4, 1, &data,1, HAL_MAX_DELAY);
 8000f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f0e:	9302      	str	r3, [sp, #8]
 8000f10:	2301      	movs	r3, #1
 8000f12:	9301      	str	r3, [sp, #4]
 8000f14:	f107 030e 	add.w	r3, r7, #14
 8000f18:	9300      	str	r3, [sp, #0]
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	22f4      	movs	r2, #244	; 0xf4
 8000f1e:	21ec      	movs	r1, #236	; 0xec
 8000f20:	4839      	ldr	r0, [pc, #228]	; (8001008 <Osrs_p_config+0x108>)
 8000f22:	f001 fb81 	bl	8002628 <HAL_I2C_Mem_Read>
 8000f26:	4603      	mov	r3, r0
 8000f28:	73fb      	strb	r3, [r7, #15]
	 if(ReVal==HAL_OK){
 8000f2a:	7bfb      	ldrb	r3, [r7, #15]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d165      	bne.n	8000ffc <Osrs_p_config+0xfc>

		 switch(presSample)
 8000f30:	79fb      	ldrb	r3, [r7, #7]
 8000f32:	2b05      	cmp	r3, #5
 8000f34:	d84d      	bhi.n	8000fd2 <Osrs_p_config+0xd2>
 8000f36:	a201      	add	r2, pc, #4	; (adr r2, 8000f3c <Osrs_p_config+0x3c>)
 8000f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f3c:	08000f55 	.word	0x08000f55
 8000f40:	08000f65 	.word	0x08000f65
 8000f44:	08000f7b 	.word	0x08000f7b
 8000f48:	08000f91 	.word	0x08000f91
 8000f4c:	08000fa7 	.word	0x08000fa7
 8000f50:	08000fbd 	.word	0x08000fbd
		 {
		 case Osrs_p_0x00 :
			 data = data & OS_RATE_1;
 8000f54:	7bbb      	ldrb	r3, [r7, #14]
 8000f56:	f023 031c 	bic.w	r3, r3, #28
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	73bb      	strb	r3, [r7, #14]
			 data = data |OSRS_PRESSURE_SAMPLE_0;
 8000f5e:	7bbb      	ldrb	r3, [r7, #14]
 8000f60:	73bb      	strb	r3, [r7, #14]
			 break;
 8000f62:	e036      	b.n	8000fd2 <Osrs_p_config+0xd2>
		 case Osrs_p_0x1  :
			 data = data & OS_RATE_1;
 8000f64:	7bbb      	ldrb	r3, [r7, #14]
 8000f66:	f023 031c 	bic.w	r3, r3, #28
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	73bb      	strb	r3, [r7, #14]
			 data = data | OSRS_PRESSURE_SAMPLE_1;
 8000f6e:	7bbb      	ldrb	r3, [r7, #14]
 8000f70:	f043 0304 	orr.w	r3, r3, #4
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	73bb      	strb	r3, [r7, #14]
			 break;
 8000f78:	e02b      	b.n	8000fd2 <Osrs_p_config+0xd2>
		 case Osrs_p_0x2  :
			 data = data & OS_RATE_1;
 8000f7a:	7bbb      	ldrb	r3, [r7, #14]
 8000f7c:	f023 031c 	bic.w	r3, r3, #28
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	73bb      	strb	r3, [r7, #14]
			 data = data | OSRS_PRESSURE_SAMPLE_2;
 8000f84:	7bbb      	ldrb	r3, [r7, #14]
 8000f86:	f043 0308 	orr.w	r3, r3, #8
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	73bb      	strb	r3, [r7, #14]
			 break;
 8000f8e:	e020      	b.n	8000fd2 <Osrs_p_config+0xd2>
		 case Osrs_p_0x4 :
			 data = data & OS_RATE_1;
 8000f90:	7bbb      	ldrb	r3, [r7, #14]
 8000f92:	f023 031c 	bic.w	r3, r3, #28
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	73bb      	strb	r3, [r7, #14]
			 data = data | OSRS_PRESSURE_SAMPLE_3;
 8000f9a:	7bbb      	ldrb	r3, [r7, #14]
 8000f9c:	f043 030c 	orr.w	r3, r3, #12
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	73bb      	strb	r3, [r7, #14]
			 break;
 8000fa4:	e015      	b.n	8000fd2 <Osrs_p_config+0xd2>
		 case Osrs_p_0x8  :
			 data = data & OS_RATE_1;
 8000fa6:	7bbb      	ldrb	r3, [r7, #14]
 8000fa8:	f023 031c 	bic.w	r3, r3, #28
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	73bb      	strb	r3, [r7, #14]
			 data = data | OSRS_PRESSURE_SAMPLE_4;
 8000fb0:	7bbb      	ldrb	r3, [r7, #14]
 8000fb2:	f043 0310 	orr.w	r3, r3, #16
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	73bb      	strb	r3, [r7, #14]
			 break;
 8000fba:	e00a      	b.n	8000fd2 <Osrs_p_config+0xd2>
		 case Osrs_p_0x16  :
			 data = data & OS_RATE_1;
 8000fbc:	7bbb      	ldrb	r3, [r7, #14]
 8000fbe:	f023 031c 	bic.w	r3, r3, #28
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	73bb      	strb	r3, [r7, #14]
			 data = data | OSRS_PRESSURE_SAMPLE_5;
 8000fc6:	7bbb      	ldrb	r3, [r7, #14]
 8000fc8:	f043 0314 	orr.w	r3, r3, #20
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	73bb      	strb	r3, [r7, #14]
			 break;
 8000fd0:	bf00      	nop

		 }

		 ReVal=HAL_I2C_Mem_Write(BMP280_I2C, BMP280_ADDRESS,REGISTER_ADDRESS_4, 1, &data, 1, I2C_DELAY);
 8000fd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fd6:	9302      	str	r3, [sp, #8]
 8000fd8:	2301      	movs	r3, #1
 8000fda:	9301      	str	r3, [sp, #4]
 8000fdc:	f107 030e 	add.w	r3, r7, #14
 8000fe0:	9300      	str	r3, [sp, #0]
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	22f4      	movs	r2, #244	; 0xf4
 8000fe6:	21ec      	movs	r1, #236	; 0xec
 8000fe8:	4807      	ldr	r0, [pc, #28]	; (8001008 <Osrs_p_config+0x108>)
 8000fea:	f001 fa23 	bl	8002434 <HAL_I2C_Mem_Write>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	73fb      	strb	r3, [r7, #15]

		 if(ReVal==HAL_OK){
 8000ff2:	7bfb      	ldrb	r3, [r7, #15]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d101      	bne.n	8000ffc <Osrs_p_config+0xfc>
			 return true;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	e000      	b.n	8000ffe <Osrs_p_config+0xfe>
		 }
	 }
    return false;
 8000ffc:	2300      	movs	r3, #0
 }
 8000ffe:	4618      	mov	r0, r3
 8001000:	3710      	adds	r7, #16
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20000218 	.word	0x20000218

0800100c <Mode_config>:

bool Mode_config(Mode_t Mode){
 800100c:	b580      	push	{r7, lr}
 800100e:	b088      	sub	sp, #32
 8001010:	af04      	add	r7, sp, #16
 8001012:	4603      	mov	r3, r0
 8001014:	71fb      	strb	r3, [r7, #7]
	 uint8_t data;
	 HAL_StatusTypeDef ReVal;
	 ReVal=HAL_I2C_Mem_Read(BMP280_I2C, BMP280_ADDRESS, REGISTER_ADDRESS_4, 1, &data,1, HAL_MAX_DELAY);
 8001016:	f04f 33ff 	mov.w	r3, #4294967295
 800101a:	9302      	str	r3, [sp, #8]
 800101c:	2301      	movs	r3, #1
 800101e:	9301      	str	r3, [sp, #4]
 8001020:	f107 030e 	add.w	r3, r7, #14
 8001024:	9300      	str	r3, [sp, #0]
 8001026:	2301      	movs	r3, #1
 8001028:	22f4      	movs	r2, #244	; 0xf4
 800102a:	21ec      	movs	r1, #236	; 0xec
 800102c:	4824      	ldr	r0, [pc, #144]	; (80010c0 <Mode_config+0xb4>)
 800102e:	f001 fafb 	bl	8002628 <HAL_I2C_Mem_Read>
 8001032:	4603      	mov	r3, r0
 8001034:	73fb      	strb	r3, [r7, #15]
	 if(ReVal==HAL_OK){
 8001036:	7bfb      	ldrb	r3, [r7, #15]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d13c      	bne.n	80010b6 <Mode_config+0xaa>
	 switch(Mode){
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	2b03      	cmp	r3, #3
 8001040:	d00e      	beq.n	8001060 <Mode_config+0x54>
 8001042:	2b03      	cmp	r3, #3
 8001044:	dc22      	bgt.n	800108c <Mode_config+0x80>
 8001046:	2b00      	cmp	r3, #0
 8001048:	d002      	beq.n	8001050 <Mode_config+0x44>
 800104a:	2b01      	cmp	r3, #1
 800104c:	d013      	beq.n	8001076 <Mode_config+0x6a>
 800104e:	e01d      	b.n	800108c <Mode_config+0x80>
	 case Sleep_Mode:
		 data= data & OS_MODE_0;
 8001050:	7bbb      	ldrb	r3, [r7, #14]
 8001052:	f023 0303 	bic.w	r3, r3, #3
 8001056:	b2db      	uxtb	r3, r3
 8001058:	73bb      	strb	r3, [r7, #14]
		 data = data | MODE_0;
 800105a:	7bbb      	ldrb	r3, [r7, #14]
 800105c:	73bb      	strb	r3, [r7, #14]
		 break;
 800105e:	e015      	b.n	800108c <Mode_config+0x80>
	 case Normal_Mode:
		 data= data &OS_MODE_0;
 8001060:	7bbb      	ldrb	r3, [r7, #14]
 8001062:	f023 0303 	bic.w	r3, r3, #3
 8001066:	b2db      	uxtb	r3, r3
 8001068:	73bb      	strb	r3, [r7, #14]
		 data = data | MODE_1;
 800106a:	7bbb      	ldrb	r3, [r7, #14]
 800106c:	f043 0301 	orr.w	r3, r3, #1
 8001070:	b2db      	uxtb	r3, r3
 8001072:	73bb      	strb	r3, [r7, #14]
		 break;
 8001074:	e00a      	b.n	800108c <Mode_config+0x80>
	 case Force_Mode:
		 data= data & OS_MODE_0;
 8001076:	7bbb      	ldrb	r3, [r7, #14]
 8001078:	f023 0303 	bic.w	r3, r3, #3
 800107c:	b2db      	uxtb	r3, r3
 800107e:	73bb      	strb	r3, [r7, #14]
		 data = data | MODE_2;
 8001080:	7bbb      	ldrb	r3, [r7, #14]
 8001082:	f043 0303 	orr.w	r3, r3, #3
 8001086:	b2db      	uxtb	r3, r3
 8001088:	73bb      	strb	r3, [r7, #14]
		 break;
 800108a:	bf00      	nop
	 }
	 ReVal=HAL_I2C_Mem_Write(BMP280_I2C, BMP280_ADDRESS, REGISTER_ADDRESS_4, 1, &data, 1, I2C_DELAY);
 800108c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001090:	9302      	str	r3, [sp, #8]
 8001092:	2301      	movs	r3, #1
 8001094:	9301      	str	r3, [sp, #4]
 8001096:	f107 030e 	add.w	r3, r7, #14
 800109a:	9300      	str	r3, [sp, #0]
 800109c:	2301      	movs	r3, #1
 800109e:	22f4      	movs	r2, #244	; 0xf4
 80010a0:	21ec      	movs	r1, #236	; 0xec
 80010a2:	4807      	ldr	r0, [pc, #28]	; (80010c0 <Mode_config+0xb4>)
 80010a4:	f001 f9c6 	bl	8002434 <HAL_I2C_Mem_Write>
 80010a8:	4603      	mov	r3, r0
 80010aa:	73fb      	strb	r3, [r7, #15]
	 if(ReVal==HAL_OK){
 80010ac:	7bfb      	ldrb	r3, [r7, #15]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d101      	bne.n	80010b6 <Mode_config+0xaa>
		 return true;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e000      	b.n	80010b8 <Mode_config+0xac>
	   }

	  }
	 return false;
 80010b6:	2300      	movs	r3, #0
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3710      	adds	r7, #16
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20000218 	.word	0x20000218

080010c4 <config_F4_register>:
bool config_F4_register(){
 80010c4:	b5b0      	push	{r4, r5, r7, lr}
 80010c6:	b08a      	sub	sp, #40	; 0x28
 80010c8:	af00      	add	r7, sp, #0
   osrs_temp_t Osrs_t;
   Osrs_t = Osrs_t_0x1;
 80010ca:	2301      	movs	r3, #1
 80010cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

   osers_pres_t Osrs_p;
   Osrs_p =Osrs_p_0x1;
 80010d0:	2301      	movs	r3, #1
 80010d2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

   Mode_t Mode;
   Mode =Normal_Mode;
 80010d6:	2303      	movs	r3, #3
 80010d8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

     if(Osrs_t_config(Osrs_t)&&Osrs_p_config( Osrs_p)&&Mode_config(Mode)){
 80010dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff fe87 	bl	8000df4 <Osrs_t_config>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d011      	beq.n	8001110 <config_F4_register+0x4c>
 80010ec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff ff05 	bl	8000f00 <Osrs_p_config>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d009      	beq.n	8001110 <config_F4_register+0x4c>
 80010fc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff ff83 	bl	800100c <Mode_config>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <config_F4_register+0x4c>

         return true;
 800110c:	2301      	movs	r3, #1
 800110e:	e016      	b.n	800113e <config_F4_register+0x7a>
     }
	 unsigned char MSG[30] = "Failed to set mode\r\n";
 8001110:	4b0d      	ldr	r3, [pc, #52]	; (8001148 <config_F4_register+0x84>)
 8001112:	1d3c      	adds	r4, r7, #4
 8001114:	461d      	mov	r5, r3
 8001116:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001118:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800111a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800111e:	6020      	str	r0, [r4, #0]
 8001120:	3404      	adds	r4, #4
 8001122:	7021      	strb	r1, [r4, #0]
 8001124:	f107 0319 	add.w	r3, r7, #25
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	721a      	strb	r2, [r3, #8]
    HAL_UART_Transmit(&huart1,MSG,sizeof(MSG),UART_DElAY);
 8001130:	1d39      	adds	r1, r7, #4
 8001132:	2364      	movs	r3, #100	; 0x64
 8001134:	221e      	movs	r2, #30
 8001136:	4805      	ldr	r0, [pc, #20]	; (800114c <config_F4_register+0x88>)
 8001138:	f002 fc9f 	bl	8003a7a <HAL_UART_Transmit>
    return false;
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	3728      	adds	r7, #40	; 0x28
 8001142:	46bd      	mov	sp, r7
 8001144:	bdb0      	pop	{r4, r5, r7, pc}
 8001146:	bf00      	nop
 8001148:	08008630 	.word	0x08008630
 800114c:	2000026c 	.word	0x2000026c

08001150 <config_t_sb>:
// config 0xF5 register

bool config_t_sb(t_sb_t tstandby){
 8001150:	b580      	push	{r7, lr}
 8001152:	b088      	sub	sp, #32
 8001154:	af04      	add	r7, sp, #16
 8001156:	4603      	mov	r3, r0
 8001158:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	HAL_StatusTypeDef ReVal;
	ReVal=HAL_I2C_Mem_Read(BMP280_I2C, BMP280_ADDRESS, REGISTER_ADDRESS_5, 1, &data,1, HAL_MAX_DELAY);
 800115a:	f04f 33ff 	mov.w	r3, #4294967295
 800115e:	9302      	str	r3, [sp, #8]
 8001160:	2301      	movs	r3, #1
 8001162:	9301      	str	r3, [sp, #4]
 8001164:	f107 030e 	add.w	r3, r7, #14
 8001168:	9300      	str	r3, [sp, #0]
 800116a:	2301      	movs	r3, #1
 800116c:	22f5      	movs	r2, #245	; 0xf5
 800116e:	21ec      	movs	r1, #236	; 0xec
 8001170:	4846      	ldr	r0, [pc, #280]	; (800128c <config_t_sb+0x13c>)
 8001172:	f001 fa59 	bl	8002628 <HAL_I2C_Mem_Read>
 8001176:	4603      	mov	r3, r0
 8001178:	73fb      	strb	r3, [r7, #15]
	if(ReVal==HAL_OK){
 800117a:	7bfb      	ldrb	r3, [r7, #15]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d17f      	bne.n	8001280 <config_t_sb+0x130>
		switch(tstandby){
 8001180:	79fb      	ldrb	r3, [r7, #7]
 8001182:	2b07      	cmp	r3, #7
 8001184:	d867      	bhi.n	8001256 <config_t_sb+0x106>
 8001186:	a201      	add	r2, pc, #4	; (adr r2, 800118c <config_t_sb+0x3c>)
 8001188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800118c:	080011ad 	.word	0x080011ad
 8001190:	080011bd 	.word	0x080011bd
 8001194:	080011d3 	.word	0x080011d3
 8001198:	080011e9 	.word	0x080011e9
 800119c:	080011ff 	.word	0x080011ff
 80011a0:	08001215 	.word	0x08001215
 80011a4:	0800122b 	.word	0x0800122b
 80011a8:	08001241 	.word	0x08001241
		case t_sb_0_5 :
			 data = data & OS_RATE_0;
 80011ac:	7bbb      	ldrb	r3, [r7, #14]
 80011ae:	f003 031f 	and.w	r3, r3, #31
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	73bb      	strb	r3, [r7, #14]
			 data = data |  T_STANDBY_0;
 80011b6:	7bbb      	ldrb	r3, [r7, #14]
 80011b8:	73bb      	strb	r3, [r7, #14]
			 break;
 80011ba:	e04c      	b.n	8001256 <config_t_sb+0x106>
		case t_sb_62_5:
			data = data & OS_RATE_0;
 80011bc:	7bbb      	ldrb	r3, [r7, #14]
 80011be:	f003 031f 	and.w	r3, r3, #31
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	73bb      	strb	r3, [r7, #14]
			data = data | T_STANDBY_1;
 80011c6:	7bbb      	ldrb	r3, [r7, #14]
 80011c8:	f043 0320 	orr.w	r3, r3, #32
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	73bb      	strb	r3, [r7, #14]
			break;
 80011d0:	e041      	b.n	8001256 <config_t_sb+0x106>
		case t_sb_125:
			data = data & OS_RATE_0;
 80011d2:	7bbb      	ldrb	r3, [r7, #14]
 80011d4:	f003 031f 	and.w	r3, r3, #31
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	73bb      	strb	r3, [r7, #14]
			data = data | T_STANDBY_2;
 80011dc:	7bbb      	ldrb	r3, [r7, #14]
 80011de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	73bb      	strb	r3, [r7, #14]
			break;
 80011e6:	e036      	b.n	8001256 <config_t_sb+0x106>
		case t_sb_250:
			data = data & OS_RATE_0;
 80011e8:	7bbb      	ldrb	r3, [r7, #14]
 80011ea:	f003 031f 	and.w	r3, r3, #31
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	73bb      	strb	r3, [r7, #14]
			data = data | T_STANDBY_3;
 80011f2:	7bbb      	ldrb	r3, [r7, #14]
 80011f4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	73bb      	strb	r3, [r7, #14]
			break;
 80011fc:	e02b      	b.n	8001256 <config_t_sb+0x106>
		case t_sb_500:
			data = data & OS_RATE_0;
 80011fe:	7bbb      	ldrb	r3, [r7, #14]
 8001200:	f003 031f 	and.w	r3, r3, #31
 8001204:	b2db      	uxtb	r3, r3
 8001206:	73bb      	strb	r3, [r7, #14]
			data = data | T_STANDBY_4;
 8001208:	7bbb      	ldrb	r3, [r7, #14]
 800120a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800120e:	b2db      	uxtb	r3, r3
 8001210:	73bb      	strb	r3, [r7, #14]
			break;
 8001212:	e020      	b.n	8001256 <config_t_sb+0x106>
		case t_sb_1000:
			data = data & OS_RATE_0;
 8001214:	7bbb      	ldrb	r3, [r7, #14]
 8001216:	f003 031f 	and.w	r3, r3, #31
 800121a:	b2db      	uxtb	r3, r3
 800121c:	73bb      	strb	r3, [r7, #14]
			data = data |T_STANDBY_5;
 800121e:	7bbb      	ldrb	r3, [r7, #14]
 8001220:	f063 035f 	orn	r3, r3, #95	; 0x5f
 8001224:	b2db      	uxtb	r3, r3
 8001226:	73bb      	strb	r3, [r7, #14]
			break;
 8001228:	e015      	b.n	8001256 <config_t_sb+0x106>
		case t_sb_2000:
			data = data & OS_RATE_0;
 800122a:	7bbb      	ldrb	r3, [r7, #14]
 800122c:	f003 031f 	and.w	r3, r3, #31
 8001230:	b2db      	uxtb	r3, r3
 8001232:	73bb      	strb	r3, [r7, #14]
			data = data |T_STANDBY_6;
 8001234:	7bbb      	ldrb	r3, [r7, #14]
 8001236:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800123a:	b2db      	uxtb	r3, r3
 800123c:	73bb      	strb	r3, [r7, #14]
			break;
 800123e:	e00a      	b.n	8001256 <config_t_sb+0x106>
		case t_sb_4000:
			data = data & OS_RATE_0;
 8001240:	7bbb      	ldrb	r3, [r7, #14]
 8001242:	f003 031f 	and.w	r3, r3, #31
 8001246:	b2db      	uxtb	r3, r3
 8001248:	73bb      	strb	r3, [r7, #14]
			data = data |T_STANDBY_7;
 800124a:	7bbb      	ldrb	r3, [r7, #14]
 800124c:	f063 031f 	orn	r3, r3, #31
 8001250:	b2db      	uxtb	r3, r3
 8001252:	73bb      	strb	r3, [r7, #14]
			break;
 8001254:	bf00      	nop

		}
		ReVal=HAL_I2C_Mem_Write(BMP280_I2C, BMP280_ADDRESS, REGISTER_ADDRESS_5, 1, &data, 1, I2C_DELAY);
 8001256:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800125a:	9302      	str	r3, [sp, #8]
 800125c:	2301      	movs	r3, #1
 800125e:	9301      	str	r3, [sp, #4]
 8001260:	f107 030e 	add.w	r3, r7, #14
 8001264:	9300      	str	r3, [sp, #0]
 8001266:	2301      	movs	r3, #1
 8001268:	22f5      	movs	r2, #245	; 0xf5
 800126a:	21ec      	movs	r1, #236	; 0xec
 800126c:	4807      	ldr	r0, [pc, #28]	; (800128c <config_t_sb+0x13c>)
 800126e:	f001 f8e1 	bl	8002434 <HAL_I2C_Mem_Write>
 8001272:	4603      	mov	r3, r0
 8001274:	73fb      	strb	r3, [r7, #15]
			 if(ReVal==HAL_OK){
 8001276:	7bfb      	ldrb	r3, [r7, #15]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d101      	bne.n	8001280 <config_t_sb+0x130>
				 return true;
 800127c:	2301      	movs	r3, #1
 800127e:	e000      	b.n	8001282 <config_t_sb+0x132>
			   }
	}
return false;
 8001280:	2300      	movs	r3, #0
}
 8001282:	4618      	mov	r0, r3
 8001284:	3710      	adds	r7, #16
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	20000218 	.word	0x20000218

08001290 <config_filter>:


bool config_filter(filter_t filter){
 8001290:	b580      	push	{r7, lr}
 8001292:	b088      	sub	sp, #32
 8001294:	af04      	add	r7, sp, #16
 8001296:	4603      	mov	r3, r0
 8001298:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	HAL_StatusTypeDef ReVal;
	ReVal=HAL_I2C_Mem_Read(BMP280_I2C, BMP280_ADDRESS,REGISTER_ADDRESS_5, 1, &data,1, HAL_MAX_DELAY);
 800129a:	f04f 33ff 	mov.w	r3, #4294967295
 800129e:	9302      	str	r3, [sp, #8]
 80012a0:	2301      	movs	r3, #1
 80012a2:	9301      	str	r3, [sp, #4]
 80012a4:	f107 030e 	add.w	r3, r7, #14
 80012a8:	9300      	str	r3, [sp, #0]
 80012aa:	2301      	movs	r3, #1
 80012ac:	22f5      	movs	r2, #245	; 0xf5
 80012ae:	21ec      	movs	r1, #236	; 0xec
 80012b0:	4832      	ldr	r0, [pc, #200]	; (800137c <config_filter+0xec>)
 80012b2:	f001 f9b9 	bl	8002628 <HAL_I2C_Mem_Read>
 80012b6:	4603      	mov	r3, r0
 80012b8:	73fb      	strb	r3, [r7, #15]
	if(ReVal==HAL_OK){
 80012ba:	7bfb      	ldrb	r3, [r7, #15]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d158      	bne.n	8001372 <config_filter+0xe2>
		switch(filter){
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	2b04      	cmp	r3, #4
 80012c4:	d840      	bhi.n	8001348 <config_filter+0xb8>
 80012c6:	a201      	add	r2, pc, #4	; (adr r2, 80012cc <config_filter+0x3c>)
 80012c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012cc:	080012e1 	.word	0x080012e1
 80012d0:	080012f1 	.word	0x080012f1
 80012d4:	08001307 	.word	0x08001307
 80012d8:	0800131d 	.word	0x0800131d
 80012dc:	08001333 	.word	0x08001333
		case oversamplingx1:
			data = data & OS_RATE_1;
 80012e0:	7bbb      	ldrb	r3, [r7, #14]
 80012e2:	f023 031c 	bic.w	r3, r3, #28
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	73bb      	strb	r3, [r7, #14]
			data = data |FILTER_0;
 80012ea:	7bbb      	ldrb	r3, [r7, #14]
 80012ec:	73bb      	strb	r3, [r7, #14]
			break;
 80012ee:	e02b      	b.n	8001348 <config_filter+0xb8>
		case oversamplingx2:
			data = data & OS_RATE_1;
 80012f0:	7bbb      	ldrb	r3, [r7, #14]
 80012f2:	f023 031c 	bic.w	r3, r3, #28
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	73bb      	strb	r3, [r7, #14]
			data = data |FILTER_1;
 80012fa:	7bbb      	ldrb	r3, [r7, #14]
 80012fc:	f043 0304 	orr.w	r3, r3, #4
 8001300:	b2db      	uxtb	r3, r3
 8001302:	73bb      	strb	r3, [r7, #14]
		    break;
 8001304:	e020      	b.n	8001348 <config_filter+0xb8>
		case oversamplingx4:
			data = data & OS_RATE_1;
 8001306:	7bbb      	ldrb	r3, [r7, #14]
 8001308:	f023 031c 	bic.w	r3, r3, #28
 800130c:	b2db      	uxtb	r3, r3
 800130e:	73bb      	strb	r3, [r7, #14]
			data = data |FILTER_2;
 8001310:	7bbb      	ldrb	r3, [r7, #14]
 8001312:	f043 0308 	orr.w	r3, r3, #8
 8001316:	b2db      	uxtb	r3, r3
 8001318:	73bb      	strb	r3, [r7, #14]
			break;
 800131a:	e015      	b.n	8001348 <config_filter+0xb8>
		case oversamplingx8:
			data = data & OS_RATE_1;
 800131c:	7bbb      	ldrb	r3, [r7, #14]
 800131e:	f023 031c 	bic.w	r3, r3, #28
 8001322:	b2db      	uxtb	r3, r3
 8001324:	73bb      	strb	r3, [r7, #14]
			data = data |FILTER_3;
 8001326:	7bbb      	ldrb	r3, [r7, #14]
 8001328:	f043 030c 	orr.w	r3, r3, #12
 800132c:	b2db      	uxtb	r3, r3
 800132e:	73bb      	strb	r3, [r7, #14]
			break;
 8001330:	e00a      	b.n	8001348 <config_filter+0xb8>
		case oversamplingx16:
			data = data & OS_RATE_1;
 8001332:	7bbb      	ldrb	r3, [r7, #14]
 8001334:	f023 031c 	bic.w	r3, r3, #28
 8001338:	b2db      	uxtb	r3, r3
 800133a:	73bb      	strb	r3, [r7, #14]
			data = data |FILTER_4;
 800133c:	7bbb      	ldrb	r3, [r7, #14]
 800133e:	f043 0310 	orr.w	r3, r3, #16
 8001342:	b2db      	uxtb	r3, r3
 8001344:	73bb      	strb	r3, [r7, #14]
		break;
 8001346:	bf00      	nop
		}
		ReVal=HAL_I2C_Mem_Write(BMP280_I2C, BMP280_ADDRESS, REGISTER_ADDRESS_5, 1, &data, 1, I2C_DELAY);
 8001348:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800134c:	9302      	str	r3, [sp, #8]
 800134e:	2301      	movs	r3, #1
 8001350:	9301      	str	r3, [sp, #4]
 8001352:	f107 030e 	add.w	r3, r7, #14
 8001356:	9300      	str	r3, [sp, #0]
 8001358:	2301      	movs	r3, #1
 800135a:	22f5      	movs	r2, #245	; 0xf5
 800135c:	21ec      	movs	r1, #236	; 0xec
 800135e:	4807      	ldr	r0, [pc, #28]	; (800137c <config_filter+0xec>)
 8001360:	f001 f868 	bl	8002434 <HAL_I2C_Mem_Write>
 8001364:	4603      	mov	r3, r0
 8001366:	73fb      	strb	r3, [r7, #15]
		if(ReVal==HAL_OK){
 8001368:	7bfb      	ldrb	r3, [r7, #15]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d101      	bne.n	8001372 <config_filter+0xe2>

			return true;
 800136e:	2301      	movs	r3, #1
 8001370:	e000      	b.n	8001374 <config_filter+0xe4>
	    }
	}
	return false;
 8001372:	2300      	movs	r3, #0

}
 8001374:	4618      	mov	r0, r3
 8001376:	3710      	adds	r7, #16
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	20000218 	.word	0x20000218

08001380 <spi3w_en>:
#define SPI_EN (0)
bool spi3w_en(){
 8001380:	b580      	push	{r7, lr}
 8001382:	b086      	sub	sp, #24
 8001384:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_StatusTypeDef ReVal;
	ReVal=HAL_I2C_Mem_Read(BMP280_I2C, BMP280_ADDRESS, 0xF5, 1, &data,1, HAL_MAX_DELAY);
 8001386:	f04f 33ff 	mov.w	r3, #4294967295
 800138a:	9302      	str	r3, [sp, #8]
 800138c:	2301      	movs	r3, #1
 800138e:	9301      	str	r3, [sp, #4]
 8001390:	1dbb      	adds	r3, r7, #6
 8001392:	9300      	str	r3, [sp, #0]
 8001394:	2301      	movs	r3, #1
 8001396:	22f5      	movs	r2, #245	; 0xf5
 8001398:	21ec      	movs	r1, #236	; 0xec
 800139a:	4814      	ldr	r0, [pc, #80]	; (80013ec <spi3w_en+0x6c>)
 800139c:	f001 f944 	bl	8002628 <HAL_I2C_Mem_Read>
 80013a0:	4603      	mov	r3, r0
 80013a2:	71fb      	strb	r3, [r7, #7]
	if(ReVal==HAL_OK){
 80013a4:	79fb      	ldrb	r3, [r7, #7]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d11a      	bne.n	80013e0 <spi3w_en+0x60>
		data = data & 0xFE;
 80013aa:	79bb      	ldrb	r3, [r7, #6]
 80013ac:	f023 0301 	bic.w	r3, r3, #1
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	71bb      	strb	r3, [r7, #6]
		data = data | SPI_EN;
 80013b4:	79bb      	ldrb	r3, [r7, #6]
 80013b6:	71bb      	strb	r3, [r7, #6]
		ReVal=HAL_I2C_Mem_Write(BMP280_I2C, BMP280_ADDRESS, REGISTER_ADDRESS_5, 1, &data, 1, I2C_DELAY);
 80013b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013bc:	9302      	str	r3, [sp, #8]
 80013be:	2301      	movs	r3, #1
 80013c0:	9301      	str	r3, [sp, #4]
 80013c2:	1dbb      	adds	r3, r7, #6
 80013c4:	9300      	str	r3, [sp, #0]
 80013c6:	2301      	movs	r3, #1
 80013c8:	22f5      	movs	r2, #245	; 0xf5
 80013ca:	21ec      	movs	r1, #236	; 0xec
 80013cc:	4807      	ldr	r0, [pc, #28]	; (80013ec <spi3w_en+0x6c>)
 80013ce:	f001 f831 	bl	8002434 <HAL_I2C_Mem_Write>
 80013d2:	4603      	mov	r3, r0
 80013d4:	71fb      	strb	r3, [r7, #7]
	 if(ReVal==HAL_OK){
 80013d6:	79fb      	ldrb	r3, [r7, #7]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d101      	bne.n	80013e0 <spi3w_en+0x60>
		 return true;
 80013dc:	2301      	movs	r3, #1
 80013de:	e000      	b.n	80013e2 <spi3w_en+0x62>
	 }
	}
	return false;
 80013e0:	2300      	movs	r3, #0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	20000218 	.word	0x20000218

080013f0 <config_F5>:
bool config_F5(void){
 80013f0:	b5b0      	push	{r4, r5, r7, lr}
 80013f2:	b088      	sub	sp, #32
 80013f4:	af00      	add	r7, sp, #0
	t_sb_t tstandy;
	tstandy=t_sb_62_5;
 80013f6:	2301      	movs	r3, #1
 80013f8:	77fb      	strb	r3, [r7, #31]

	filter_t filter;
    filter=oversamplingx2;
 80013fa:	2301      	movs	r3, #1
 80013fc:	77bb      	strb	r3, [r7, #30]

	if(config_t_sb(tstandy)&&config_filter(filter)&& spi3w_en()){
 80013fe:	7ffb      	ldrb	r3, [r7, #31]
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff fea5 	bl	8001150 <config_t_sb>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d00d      	beq.n	8001428 <config_F5+0x38>
 800140c:	7fbb      	ldrb	r3, [r7, #30]
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff ff3e 	bl	8001290 <config_filter>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d006      	beq.n	8001428 <config_F5+0x38>
 800141a:	f7ff ffb1 	bl	8001380 <spi3w_en>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <config_F5+0x38>
		 return true;
 8001424:	2301      	movs	r3, #1
 8001426:	e00f      	b.n	8001448 <config_F5+0x58>
	}
	unsigned char MSG[30] = "Failed to configure F5 register\r\n";
 8001428:	4b09      	ldr	r3, [pc, #36]	; (8001450 <config_F5+0x60>)
 800142a:	463c      	mov	r4, r7
 800142c:	461d      	mov	r5, r3
 800142e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001430:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001432:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001436:	c407      	stmia	r4!, {r0, r1, r2}
 8001438:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&huart1,MSG,sizeof(MSG),100);
 800143a:	4639      	mov	r1, r7
 800143c:	2364      	movs	r3, #100	; 0x64
 800143e:	221e      	movs	r2, #30
 8001440:	4804      	ldr	r0, [pc, #16]	; (8001454 <config_F5+0x64>)
 8001442:	f002 fb1a 	bl	8003a7a <HAL_UART_Transmit>
	return false;
 8001446:	2300      	movs	r3, #0
}
 8001448:	4618      	mov	r0, r3
 800144a:	3720      	adds	r7, #32
 800144c:	46bd      	mov	sp, r7
 800144e:	bdb0      	pop	{r4, r5, r7, pc}
 8001450:	08008650 	.word	0x08008650
 8001454:	2000026c 	.word	0x2000026c

08001458 <read_calliberation_data_280>:


bool read_calliberation_data_280 (void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b08c      	sub	sp, #48	; 0x30
 800145c:	af04      	add	r7, sp, #16
	uint8_t Callib_Data[24] = {0};
 800145e:	2300      	movs	r3, #0
 8001460:	607b      	str	r3, [r7, #4]
 8001462:	f107 0308 	add.w	r3, r7, #8
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	605a      	str	r2, [r3, #4]
 800146c:	609a      	str	r2, [r3, #8]
 800146e:	60da      	str	r2, [r3, #12]
 8001470:	611a      	str	r2, [r3, #16]
	uint16_t Callib_Start = 0x88;
 8001472:	2388      	movs	r3, #136	; 0x88
 8001474:	83fb      	strh	r3, [r7, #30]
	HAL_StatusTypeDef ReVal;
   ReVal = HAL_I2C_Mem_Read(BMP280_I2C, BMP280_ADDRESS, Callib_Start, 1, Callib_Data,24, HAL_MAX_DELAY);
 8001476:	8bfa      	ldrh	r2, [r7, #30]
 8001478:	f04f 33ff 	mov.w	r3, #4294967295
 800147c:	9302      	str	r3, [sp, #8]
 800147e:	2318      	movs	r3, #24
 8001480:	9301      	str	r3, [sp, #4]
 8001482:	1d3b      	adds	r3, r7, #4
 8001484:	9300      	str	r3, [sp, #0]
 8001486:	2301      	movs	r3, #1
 8001488:	21ec      	movs	r1, #236	; 0xec
 800148a:	483e      	ldr	r0, [pc, #248]	; (8001584 <read_calliberation_data_280+0x12c>)
 800148c:	f001 f8cc 	bl	8002628 <HAL_I2C_Mem_Read>
 8001490:	4603      	mov	r3, r0
 8001492:	777b      	strb	r3, [r7, #29]
   if(ReVal==HAL_OK){
 8001494:	7f7b      	ldrb	r3, [r7, #29]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d16f      	bne.n	800157a <read_calliberation_data_280+0x122>
    dig_T1=((Callib_Data[0] << 8) | Callib_Data[1]);
 800149a:	793b      	ldrb	r3, [r7, #4]
 800149c:	021b      	lsls	r3, r3, #8
 800149e:	b21a      	sxth	r2, r3
 80014a0:	797b      	ldrb	r3, [r7, #5]
 80014a2:	b21b      	sxth	r3, r3
 80014a4:	4313      	orrs	r3, r2
 80014a6:	b21b      	sxth	r3, r3
 80014a8:	b29a      	uxth	r2, r3
 80014aa:	4b37      	ldr	r3, [pc, #220]	; (8001588 <read_calliberation_data_280+0x130>)
 80014ac:	801a      	strh	r2, [r3, #0]
     dig_T2= ((Callib_Data[2] << 8) | Callib_Data[3]);
 80014ae:	79bb      	ldrb	r3, [r7, #6]
 80014b0:	021b      	lsls	r3, r3, #8
 80014b2:	b21a      	sxth	r2, r3
 80014b4:	79fb      	ldrb	r3, [r7, #7]
 80014b6:	b21b      	sxth	r3, r3
 80014b8:	4313      	orrs	r3, r2
 80014ba:	b21a      	sxth	r2, r3
 80014bc:	4b33      	ldr	r3, [pc, #204]	; (800158c <read_calliberation_data_280+0x134>)
 80014be:	801a      	strh	r2, [r3, #0]
     dig_T3= ((Callib_Data[4] << 8) | Callib_Data[5]);
 80014c0:	7a3b      	ldrb	r3, [r7, #8]
 80014c2:	021b      	lsls	r3, r3, #8
 80014c4:	b21a      	sxth	r2, r3
 80014c6:	7a7b      	ldrb	r3, [r7, #9]
 80014c8:	b21b      	sxth	r3, r3
 80014ca:	4313      	orrs	r3, r2
 80014cc:	b21a      	sxth	r2, r3
 80014ce:	4b30      	ldr	r3, [pc, #192]	; (8001590 <read_calliberation_data_280+0x138>)
 80014d0:	801a      	strh	r2, [r3, #0]
     dig_P1= ((Callib_Data[6] << 8) | Callib_Data[7]);
 80014d2:	7abb      	ldrb	r3, [r7, #10]
 80014d4:	021b      	lsls	r3, r3, #8
 80014d6:	b21a      	sxth	r2, r3
 80014d8:	7afb      	ldrb	r3, [r7, #11]
 80014da:	b21b      	sxth	r3, r3
 80014dc:	4313      	orrs	r3, r2
 80014de:	b21b      	sxth	r3, r3
 80014e0:	b29a      	uxth	r2, r3
 80014e2:	4b2c      	ldr	r3, [pc, #176]	; (8001594 <read_calliberation_data_280+0x13c>)
 80014e4:	801a      	strh	r2, [r3, #0]
     dig_P2 = ((Callib_Data[8] << 8) | Callib_Data[9]);
 80014e6:	7b3b      	ldrb	r3, [r7, #12]
 80014e8:	021b      	lsls	r3, r3, #8
 80014ea:	b21a      	sxth	r2, r3
 80014ec:	7b7b      	ldrb	r3, [r7, #13]
 80014ee:	b21b      	sxth	r3, r3
 80014f0:	4313      	orrs	r3, r2
 80014f2:	b21a      	sxth	r2, r3
 80014f4:	4b28      	ldr	r3, [pc, #160]	; (8001598 <read_calliberation_data_280+0x140>)
 80014f6:	801a      	strh	r2, [r3, #0]
     dig_P3 = ((Callib_Data[10] << 8) | Callib_Data[11]);
 80014f8:	7bbb      	ldrb	r3, [r7, #14]
 80014fa:	021b      	lsls	r3, r3, #8
 80014fc:	b21a      	sxth	r2, r3
 80014fe:	7bfb      	ldrb	r3, [r7, #15]
 8001500:	b21b      	sxth	r3, r3
 8001502:	4313      	orrs	r3, r2
 8001504:	b21a      	sxth	r2, r3
 8001506:	4b25      	ldr	r3, [pc, #148]	; (800159c <read_calliberation_data_280+0x144>)
 8001508:	801a      	strh	r2, [r3, #0]
     dig_P4 = ((Callib_Data[12] << 8) | Callib_Data[13]);
 800150a:	7c3b      	ldrb	r3, [r7, #16]
 800150c:	021b      	lsls	r3, r3, #8
 800150e:	b21a      	sxth	r2, r3
 8001510:	7c7b      	ldrb	r3, [r7, #17]
 8001512:	b21b      	sxth	r3, r3
 8001514:	4313      	orrs	r3, r2
 8001516:	b21a      	sxth	r2, r3
 8001518:	4b21      	ldr	r3, [pc, #132]	; (80015a0 <read_calliberation_data_280+0x148>)
 800151a:	801a      	strh	r2, [r3, #0]
     dig_P5= ((Callib_Data[14] << 8) | Callib_Data[15]);
 800151c:	7cbb      	ldrb	r3, [r7, #18]
 800151e:	021b      	lsls	r3, r3, #8
 8001520:	b21a      	sxth	r2, r3
 8001522:	7cfb      	ldrb	r3, [r7, #19]
 8001524:	b21b      	sxth	r3, r3
 8001526:	4313      	orrs	r3, r2
 8001528:	b21a      	sxth	r2, r3
 800152a:	4b1e      	ldr	r3, [pc, #120]	; (80015a4 <read_calliberation_data_280+0x14c>)
 800152c:	801a      	strh	r2, [r3, #0]
     dig_P6 = ((Callib_Data[16] << 8) | Callib_Data[17]);
 800152e:	7d3b      	ldrb	r3, [r7, #20]
 8001530:	021b      	lsls	r3, r3, #8
 8001532:	b21a      	sxth	r2, r3
 8001534:	7d7b      	ldrb	r3, [r7, #21]
 8001536:	b21b      	sxth	r3, r3
 8001538:	4313      	orrs	r3, r2
 800153a:	b21a      	sxth	r2, r3
 800153c:	4b1a      	ldr	r3, [pc, #104]	; (80015a8 <read_calliberation_data_280+0x150>)
 800153e:	801a      	strh	r2, [r3, #0]
     dig_P7 = ((Callib_Data[18] << 8) | Callib_Data[19]);
 8001540:	7dbb      	ldrb	r3, [r7, #22]
 8001542:	021b      	lsls	r3, r3, #8
 8001544:	b21a      	sxth	r2, r3
 8001546:	7dfb      	ldrb	r3, [r7, #23]
 8001548:	b21b      	sxth	r3, r3
 800154a:	4313      	orrs	r3, r2
 800154c:	b21a      	sxth	r2, r3
 800154e:	4b17      	ldr	r3, [pc, #92]	; (80015ac <read_calliberation_data_280+0x154>)
 8001550:	801a      	strh	r2, [r3, #0]
     dig_P8= ((Callib_Data[20] << 8) | Callib_Data[21]);
 8001552:	7e3b      	ldrb	r3, [r7, #24]
 8001554:	021b      	lsls	r3, r3, #8
 8001556:	b21a      	sxth	r2, r3
 8001558:	7e7b      	ldrb	r3, [r7, #25]
 800155a:	b21b      	sxth	r3, r3
 800155c:	4313      	orrs	r3, r2
 800155e:	b21a      	sxth	r2, r3
 8001560:	4b13      	ldr	r3, [pc, #76]	; (80015b0 <read_calliberation_data_280+0x158>)
 8001562:	801a      	strh	r2, [r3, #0]
     dig_P9= ((Callib_Data[22] << 8) | Callib_Data[23]);
 8001564:	7ebb      	ldrb	r3, [r7, #26]
 8001566:	021b      	lsls	r3, r3, #8
 8001568:	b21a      	sxth	r2, r3
 800156a:	7efb      	ldrb	r3, [r7, #27]
 800156c:	b21b      	sxth	r3, r3
 800156e:	4313      	orrs	r3, r2
 8001570:	b21a      	sxth	r2, r3
 8001572:	4b10      	ldr	r3, [pc, #64]	; (80015b4 <read_calliberation_data_280+0x15c>)
 8001574:	801a      	strh	r2, [r3, #0]
     return false;
 8001576:	2300      	movs	r3, #0
 8001578:	e000      	b.n	800157c <read_calliberation_data_280+0x124>
   }
   return true;
 800157a:	2301      	movs	r3, #1
}
 800157c:	4618      	mov	r0, r3
 800157e:	3720      	adds	r7, #32
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	20000218 	.word	0x20000218
 8001588:	200001fc 	.word	0x200001fc
 800158c:	200001fe 	.word	0x200001fe
 8001590:	20000200 	.word	0x20000200
 8001594:	20000202 	.word	0x20000202
 8001598:	20000204 	.word	0x20000204
 800159c:	20000206 	.word	0x20000206
 80015a0:	20000208 	.word	0x20000208
 80015a4:	2000020a 	.word	0x2000020a
 80015a8:	2000020c 	.word	0x2000020c
 80015ac:	2000020e 	.word	0x2000020e
 80015b0:	20000210 	.word	0x20000210
 80015b4:	20000212 	.word	0x20000212

080015b8 <ReadRowData>:

int32_t ReadRowData(){
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b08a      	sub	sp, #40	; 0x28
 80015bc:	af04      	add	r7, sp, #16
	 uint32_t temp[3];
	  uint32_t Raw_T;
	  HAL_StatusTypeDef ReVal;
	  ReVal = HAL_I2C_Mem_Read(BMP280_I2C, BMP280_ADDRESS, 0xFA, 1, temp,3, HAL_MAX_DELAY);
 80015be:	f04f 33ff 	mov.w	r3, #4294967295
 80015c2:	9302      	str	r3, [sp, #8]
 80015c4:	2303      	movs	r3, #3
 80015c6:	9301      	str	r3, [sp, #4]
 80015c8:	1d3b      	adds	r3, r7, #4
 80015ca:	9300      	str	r3, [sp, #0]
 80015cc:	2301      	movs	r3, #1
 80015ce:	22fa      	movs	r2, #250	; 0xfa
 80015d0:	21ec      	movs	r1, #236	; 0xec
 80015d2:	4809      	ldr	r0, [pc, #36]	; (80015f8 <ReadRowData+0x40>)
 80015d4:	f001 f828 	bl	8002628 <HAL_I2C_Mem_Read>
 80015d8:	4603      	mov	r3, r0
 80015da:	75fb      	strb	r3, [r7, #23]
	  Raw_T = (temp[2]<<12)+(temp[1]<<4)+(temp[0]>>4);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	031a      	lsls	r2, r3, #12
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	011b      	lsls	r3, r3, #4
 80015e4:	441a      	add	r2, r3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	091b      	lsrs	r3, r3, #4
 80015ea:	4413      	add	r3, r2
 80015ec:	613b      	str	r3, [r7, #16]
  return Raw_T;
 80015ee:	693b      	ldr	r3, [r7, #16]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3718      	adds	r7, #24
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	20000218 	.word	0x20000218

080015fc <readTemperature>:

int32_t t_fine;
float readTemperature(void ){
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
	  int32_t var1, var2, T;
	  uint32_t adc_T=ReadRowData();
 8001602:	f7ff ffd9 	bl	80015b8 <ReadRowData>
 8001606:	4603      	mov	r3, r0
 8001608:	60fb      	str	r3, [r7, #12]
	  var1 = ((((adc_T >> 3) - ((int32_t)dig_T1 << 1)))*((int32_t)dig_T2)) >>11;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	08db      	lsrs	r3, r3, #3
 800160e:	4a1a      	ldr	r2, [pc, #104]	; (8001678 <readTemperature+0x7c>)
 8001610:	8812      	ldrh	r2, [r2, #0]
 8001612:	0052      	lsls	r2, r2, #1
 8001614:	1a9b      	subs	r3, r3, r2
 8001616:	4a19      	ldr	r2, [pc, #100]	; (800167c <readTemperature+0x80>)
 8001618:	f9b2 2000 	ldrsh.w	r2, [r2]
 800161c:	fb02 f303 	mul.w	r3, r2, r3
 8001620:	0adb      	lsrs	r3, r3, #11
 8001622:	60bb      	str	r3, [r7, #8]

	  var2 = (((((adc_T >> 4) - ((int32_t)dig_T1)) *((adc_T >> 4) - ((int32_t)dig_T1))) >>12) *((int32_t)dig_T3)) >>14;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	091b      	lsrs	r3, r3, #4
 8001628:	4a13      	ldr	r2, [pc, #76]	; (8001678 <readTemperature+0x7c>)
 800162a:	8812      	ldrh	r2, [r2, #0]
 800162c:	1a9b      	subs	r3, r3, r2
 800162e:	68fa      	ldr	r2, [r7, #12]
 8001630:	0912      	lsrs	r2, r2, #4
 8001632:	4911      	ldr	r1, [pc, #68]	; (8001678 <readTemperature+0x7c>)
 8001634:	8809      	ldrh	r1, [r1, #0]
 8001636:	1a52      	subs	r2, r2, r1
 8001638:	fb02 f303 	mul.w	r3, r2, r3
 800163c:	0b1b      	lsrs	r3, r3, #12
 800163e:	4a10      	ldr	r2, [pc, #64]	; (8001680 <readTemperature+0x84>)
 8001640:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001644:	fb02 f303 	mul.w	r3, r2, r3
 8001648:	0b9b      	lsrs	r3, r3, #14
 800164a:	607b      	str	r3, [r7, #4]

	  t_fine = var1 + var2;
 800164c:	68ba      	ldr	r2, [r7, #8]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4413      	add	r3, r2
 8001652:	4a0c      	ldr	r2, [pc, #48]	; (8001684 <readTemperature+0x88>)
 8001654:	6013      	str	r3, [r2, #0]
	  T  = (t_fine * 5 + 128) >> 8;
 8001656:	4b0b      	ldr	r3, [pc, #44]	; (8001684 <readTemperature+0x88>)
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	4613      	mov	r3, r2
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	4413      	add	r3, r2
 8001660:	3380      	adds	r3, #128	; 0x80
 8001662:	121b      	asrs	r3, r3, #8
 8001664:	603b      	str	r3, [r7, #0]
	  return T;
 8001666:	6838      	ldr	r0, [r7, #0]
 8001668:	f7ff fb38 	bl	8000cdc <__aeabi_i2f>
 800166c:	4603      	mov	r3, r0
}
 800166e:	4618      	mov	r0, r3
 8001670:	3710      	adds	r7, #16
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	200001fc 	.word	0x200001fc
 800167c:	200001fe 	.word	0x200001fe
 8001680:	20000200 	.word	0x20000200
 8001684:	20000214 	.word	0x20000214

08001688 <init_bmp>:
void init_bmp(void){
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
	config_F5();
 800168c:	f7ff feb0 	bl	80013f0 <config_F5>
	config_F4_register();
 8001690:	f7ff fd18 	bl	80010c4 <config_F4_register>
    read_calliberation_data_280();
 8001694:	f7ff fee0 	bl	8001458 <read_calliberation_data_280>
}
 8001698:	bf00      	nop
 800169a:	bd80      	pop	{r7, pc}

0800169c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b08a      	sub	sp, #40	; 0x28
 80016a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016a2:	f000 fab9 	bl	8001c18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016a6:	f000 f82b 	bl	8001700 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016aa:	f000 f8bd 	bl	8001828 <MX_GPIO_Init>

  MX_I2C1_Init();
 80016ae:	f000 f863 	bl	8001778 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80016b2:	f000 f88f 	bl	80017d4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
 uint8_t MSGTemperature[30] = {'\0'};
 80016b6:	2300      	movs	r3, #0
 80016b8:	607b      	str	r3, [r7, #4]
 80016ba:	f107 0308 	add.w	r3, r7, #8
 80016be:	2200      	movs	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	605a      	str	r2, [r3, #4]
 80016c4:	609a      	str	r2, [r3, #8]
 80016c6:	60da      	str	r2, [r3, #12]
 80016c8:	611a      	str	r2, [r3, #16]
 80016ca:	615a      	str	r2, [r3, #20]
 80016cc:	831a      	strh	r2, [r3, #24]
// read_calliberation_data ();
  //config();
 init_bmp();
 80016ce:	f7ff ffdb 	bl	8001688 <init_bmp>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 // INIT_BMP280();
    /* USER CODE END WHILE */
	  Temperature = readTemperature();// bmp.readTemperature();
 80016d2:	f7ff ff93 	bl	80015fc <readTemperature>
 80016d6:	6278      	str	r0, [r7, #36]	; 0x24
	  sprintf(MSGTemperature,"Temperature  =  %f\r\n",Temperature);
 80016d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80016da:	f7fe fea5 	bl	8000428 <__aeabi_f2d>
 80016de:	4602      	mov	r2, r0
 80016e0:	460b      	mov	r3, r1
 80016e2:	1d38      	adds	r0, r7, #4
 80016e4:	4904      	ldr	r1, [pc, #16]	; (80016f8 <main+0x5c>)
 80016e6:	f003 f9d7 	bl	8004a98 <siprintf>
	  HAL_UART_Transmit(&huart1,MSGTemperature,sizeof(MSGTemperature),100);
 80016ea:	1d39      	adds	r1, r7, #4
 80016ec:	2364      	movs	r3, #100	; 0x64
 80016ee:	221e      	movs	r2, #30
 80016f0:	4802      	ldr	r0, [pc, #8]	; (80016fc <main+0x60>)
 80016f2:	f002 f9c2 	bl	8003a7a <HAL_UART_Transmit>
	  Temperature = readTemperature();// bmp.readTemperature();
 80016f6:	e7ec      	b.n	80016d2 <main+0x36>
 80016f8:	08008670 	.word	0x08008670
 80016fc:	2000026c 	.word	0x2000026c

08001700 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b090      	sub	sp, #64	; 0x40
 8001704:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001706:	f107 0318 	add.w	r3, r7, #24
 800170a:	2228      	movs	r2, #40	; 0x28
 800170c:	2100      	movs	r1, #0
 800170e:	4618      	mov	r0, r3
 8001710:	f002 fb48 	bl	8003da4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001714:	1d3b      	adds	r3, r7, #4
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	605a      	str	r2, [r3, #4]
 800171c:	609a      	str	r2, [r3, #8]
 800171e:	60da      	str	r2, [r3, #12]
 8001720:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001722:	2302      	movs	r3, #2
 8001724:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001726:	2301      	movs	r3, #1
 8001728:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800172a:	2310      	movs	r3, #16
 800172c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800172e:	2300      	movs	r3, #0
 8001730:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001732:	f107 0318 	add.w	r3, r7, #24
 8001736:	4618      	mov	r0, r3
 8001738:	f001 fd38 	bl	80031ac <HAL_RCC_OscConfig>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001742:	f000 f893 	bl	800186c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001746:	230f      	movs	r3, #15
 8001748:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800174a:	2300      	movs	r3, #0
 800174c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800174e:	2300      	movs	r3, #0
 8001750:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001752:	2300      	movs	r3, #0
 8001754:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001756:	2300      	movs	r3, #0
 8001758:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800175a:	1d3b      	adds	r3, r7, #4
 800175c:	2100      	movs	r1, #0
 800175e:	4618      	mov	r0, r3
 8001760:	f001 ffa6 	bl	80036b0 <HAL_RCC_ClockConfig>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800176a:	f000 f87f 	bl	800186c <Error_Handler>
  }
}
 800176e:	bf00      	nop
 8001770:	3740      	adds	r7, #64	; 0x40
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
	...

08001778 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800177c:	4b12      	ldr	r3, [pc, #72]	; (80017c8 <MX_I2C1_Init+0x50>)
 800177e:	4a13      	ldr	r2, [pc, #76]	; (80017cc <MX_I2C1_Init+0x54>)
 8001780:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001782:	4b11      	ldr	r3, [pc, #68]	; (80017c8 <MX_I2C1_Init+0x50>)
 8001784:	4a12      	ldr	r2, [pc, #72]	; (80017d0 <MX_I2C1_Init+0x58>)
 8001786:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001788:	4b0f      	ldr	r3, [pc, #60]	; (80017c8 <MX_I2C1_Init+0x50>)
 800178a:	2200      	movs	r2, #0
 800178c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800178e:	4b0e      	ldr	r3, [pc, #56]	; (80017c8 <MX_I2C1_Init+0x50>)
 8001790:	2200      	movs	r2, #0
 8001792:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001794:	4b0c      	ldr	r3, [pc, #48]	; (80017c8 <MX_I2C1_Init+0x50>)
 8001796:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800179a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800179c:	4b0a      	ldr	r3, [pc, #40]	; (80017c8 <MX_I2C1_Init+0x50>)
 800179e:	2200      	movs	r2, #0
 80017a0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80017a2:	4b09      	ldr	r3, [pc, #36]	; (80017c8 <MX_I2C1_Init+0x50>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017a8:	4b07      	ldr	r3, [pc, #28]	; (80017c8 <MX_I2C1_Init+0x50>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017ae:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <MX_I2C1_Init+0x50>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017b4:	4804      	ldr	r0, [pc, #16]	; (80017c8 <MX_I2C1_Init+0x50>)
 80017b6:	f000 fcf9 	bl	80021ac <HAL_I2C_Init>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80017c0:	f000 f854 	bl	800186c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017c4:	bf00      	nop
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	20000218 	.word	0x20000218
 80017cc:	40005400 	.word	0x40005400
 80017d0:	000186a0 	.word	0x000186a0

080017d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80017d8:	4b11      	ldr	r3, [pc, #68]	; (8001820 <MX_USART1_UART_Init+0x4c>)
 80017da:	4a12      	ldr	r2, [pc, #72]	; (8001824 <MX_USART1_UART_Init+0x50>)
 80017dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80017de:	4b10      	ldr	r3, [pc, #64]	; (8001820 <MX_USART1_UART_Init+0x4c>)
 80017e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017e6:	4b0e      	ldr	r3, [pc, #56]	; (8001820 <MX_USART1_UART_Init+0x4c>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017ec:	4b0c      	ldr	r3, [pc, #48]	; (8001820 <MX_USART1_UART_Init+0x4c>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017f2:	4b0b      	ldr	r3, [pc, #44]	; (8001820 <MX_USART1_UART_Init+0x4c>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017f8:	4b09      	ldr	r3, [pc, #36]	; (8001820 <MX_USART1_UART_Init+0x4c>)
 80017fa:	220c      	movs	r2, #12
 80017fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017fe:	4b08      	ldr	r3, [pc, #32]	; (8001820 <MX_USART1_UART_Init+0x4c>)
 8001800:	2200      	movs	r2, #0
 8001802:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001804:	4b06      	ldr	r3, [pc, #24]	; (8001820 <MX_USART1_UART_Init+0x4c>)
 8001806:	2200      	movs	r2, #0
 8001808:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800180a:	4805      	ldr	r0, [pc, #20]	; (8001820 <MX_USART1_UART_Init+0x4c>)
 800180c:	f002 f8e8 	bl	80039e0 <HAL_UART_Init>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001816:	f000 f829 	bl	800186c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	2000026c 	.word	0x2000026c
 8001824:	40013800 	.word	0x40013800

08001828 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800182e:	4b0e      	ldr	r3, [pc, #56]	; (8001868 <MX_GPIO_Init+0x40>)
 8001830:	699b      	ldr	r3, [r3, #24]
 8001832:	4a0d      	ldr	r2, [pc, #52]	; (8001868 <MX_GPIO_Init+0x40>)
 8001834:	f043 0304 	orr.w	r3, r3, #4
 8001838:	6193      	str	r3, [r2, #24]
 800183a:	4b0b      	ldr	r3, [pc, #44]	; (8001868 <MX_GPIO_Init+0x40>)
 800183c:	699b      	ldr	r3, [r3, #24]
 800183e:	f003 0304 	and.w	r3, r3, #4
 8001842:	607b      	str	r3, [r7, #4]
 8001844:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001846:	4b08      	ldr	r3, [pc, #32]	; (8001868 <MX_GPIO_Init+0x40>)
 8001848:	699b      	ldr	r3, [r3, #24]
 800184a:	4a07      	ldr	r2, [pc, #28]	; (8001868 <MX_GPIO_Init+0x40>)
 800184c:	f043 0308 	orr.w	r3, r3, #8
 8001850:	6193      	str	r3, [r2, #24]
 8001852:	4b05      	ldr	r3, [pc, #20]	; (8001868 <MX_GPIO_Init+0x40>)
 8001854:	699b      	ldr	r3, [r3, #24]
 8001856:	f003 0308 	and.w	r3, r3, #8
 800185a:	603b      	str	r3, [r7, #0]
 800185c:	683b      	ldr	r3, [r7, #0]

}
 800185e:	bf00      	nop
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	bc80      	pop	{r7}
 8001866:	4770      	bx	lr
 8001868:	40021000 	.word	0x40021000

0800186c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001870:	b672      	cpsid	i
}
 8001872:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001874:	e7fe      	b.n	8001874 <Error_Handler+0x8>
	...

08001878 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001878:	b480      	push	{r7}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800187e:	4b15      	ldr	r3, [pc, #84]	; (80018d4 <HAL_MspInit+0x5c>)
 8001880:	699b      	ldr	r3, [r3, #24]
 8001882:	4a14      	ldr	r2, [pc, #80]	; (80018d4 <HAL_MspInit+0x5c>)
 8001884:	f043 0301 	orr.w	r3, r3, #1
 8001888:	6193      	str	r3, [r2, #24]
 800188a:	4b12      	ldr	r3, [pc, #72]	; (80018d4 <HAL_MspInit+0x5c>)
 800188c:	699b      	ldr	r3, [r3, #24]
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	60bb      	str	r3, [r7, #8]
 8001894:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001896:	4b0f      	ldr	r3, [pc, #60]	; (80018d4 <HAL_MspInit+0x5c>)
 8001898:	69db      	ldr	r3, [r3, #28]
 800189a:	4a0e      	ldr	r2, [pc, #56]	; (80018d4 <HAL_MspInit+0x5c>)
 800189c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018a0:	61d3      	str	r3, [r2, #28]
 80018a2:	4b0c      	ldr	r3, [pc, #48]	; (80018d4 <HAL_MspInit+0x5c>)
 80018a4:	69db      	ldr	r3, [r3, #28]
 80018a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018aa:	607b      	str	r3, [r7, #4]
 80018ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80018ae:	4b0a      	ldr	r3, [pc, #40]	; (80018d8 <HAL_MspInit+0x60>)
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	4a04      	ldr	r2, [pc, #16]	; (80018d8 <HAL_MspInit+0x60>)
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ca:	bf00      	nop
 80018cc:	3714      	adds	r7, #20
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bc80      	pop	{r7}
 80018d2:	4770      	bx	lr
 80018d4:	40021000 	.word	0x40021000
 80018d8:	40010000 	.word	0x40010000

080018dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b088      	sub	sp, #32
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e4:	f107 0310 	add.w	r3, r7, #16
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	605a      	str	r2, [r3, #4]
 80018ee:	609a      	str	r2, [r3, #8]
 80018f0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a15      	ldr	r2, [pc, #84]	; (800194c <HAL_I2C_MspInit+0x70>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d123      	bne.n	8001944 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018fc:	4b14      	ldr	r3, [pc, #80]	; (8001950 <HAL_I2C_MspInit+0x74>)
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	4a13      	ldr	r2, [pc, #76]	; (8001950 <HAL_I2C_MspInit+0x74>)
 8001902:	f043 0308 	orr.w	r3, r3, #8
 8001906:	6193      	str	r3, [r2, #24]
 8001908:	4b11      	ldr	r3, [pc, #68]	; (8001950 <HAL_I2C_MspInit+0x74>)
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	f003 0308 	and.w	r3, r3, #8
 8001910:	60fb      	str	r3, [r7, #12]
 8001912:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001914:	23c0      	movs	r3, #192	; 0xc0
 8001916:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001918:	2312      	movs	r3, #18
 800191a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800191c:	2303      	movs	r3, #3
 800191e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001920:	f107 0310 	add.w	r3, r7, #16
 8001924:	4619      	mov	r1, r3
 8001926:	480b      	ldr	r0, [pc, #44]	; (8001954 <HAL_I2C_MspInit+0x78>)
 8001928:	f000 fabc 	bl	8001ea4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800192c:	4b08      	ldr	r3, [pc, #32]	; (8001950 <HAL_I2C_MspInit+0x74>)
 800192e:	69db      	ldr	r3, [r3, #28]
 8001930:	4a07      	ldr	r2, [pc, #28]	; (8001950 <HAL_I2C_MspInit+0x74>)
 8001932:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001936:	61d3      	str	r3, [r2, #28]
 8001938:	4b05      	ldr	r3, [pc, #20]	; (8001950 <HAL_I2C_MspInit+0x74>)
 800193a:	69db      	ldr	r3, [r3, #28]
 800193c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001940:	60bb      	str	r3, [r7, #8]
 8001942:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001944:	bf00      	nop
 8001946:	3720      	adds	r7, #32
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	40005400 	.word	0x40005400
 8001950:	40021000 	.word	0x40021000
 8001954:	40010c00 	.word	0x40010c00

08001958 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b088      	sub	sp, #32
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001960:	f107 0310 	add.w	r3, r7, #16
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	605a      	str	r2, [r3, #4]
 800196a:	609a      	str	r2, [r3, #8]
 800196c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a1c      	ldr	r2, [pc, #112]	; (80019e4 <HAL_UART_MspInit+0x8c>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d131      	bne.n	80019dc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001978:	4b1b      	ldr	r3, [pc, #108]	; (80019e8 <HAL_UART_MspInit+0x90>)
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	4a1a      	ldr	r2, [pc, #104]	; (80019e8 <HAL_UART_MspInit+0x90>)
 800197e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001982:	6193      	str	r3, [r2, #24]
 8001984:	4b18      	ldr	r3, [pc, #96]	; (80019e8 <HAL_UART_MspInit+0x90>)
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800198c:	60fb      	str	r3, [r7, #12]
 800198e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001990:	4b15      	ldr	r3, [pc, #84]	; (80019e8 <HAL_UART_MspInit+0x90>)
 8001992:	699b      	ldr	r3, [r3, #24]
 8001994:	4a14      	ldr	r2, [pc, #80]	; (80019e8 <HAL_UART_MspInit+0x90>)
 8001996:	f043 0304 	orr.w	r3, r3, #4
 800199a:	6193      	str	r3, [r2, #24]
 800199c:	4b12      	ldr	r3, [pc, #72]	; (80019e8 <HAL_UART_MspInit+0x90>)
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	f003 0304 	and.w	r3, r3, #4
 80019a4:	60bb      	str	r3, [r7, #8]
 80019a6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80019a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ae:	2302      	movs	r3, #2
 80019b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019b2:	2303      	movs	r3, #3
 80019b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b6:	f107 0310 	add.w	r3, r7, #16
 80019ba:	4619      	mov	r1, r3
 80019bc:	480b      	ldr	r0, [pc, #44]	; (80019ec <HAL_UART_MspInit+0x94>)
 80019be:	f000 fa71 	bl	8001ea4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80019c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019c8:	2300      	movs	r3, #0
 80019ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d0:	f107 0310 	add.w	r3, r7, #16
 80019d4:	4619      	mov	r1, r3
 80019d6:	4805      	ldr	r0, [pc, #20]	; (80019ec <HAL_UART_MspInit+0x94>)
 80019d8:	f000 fa64 	bl	8001ea4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80019dc:	bf00      	nop
 80019de:	3720      	adds	r7, #32
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	40013800 	.word	0x40013800
 80019e8:	40021000 	.word	0x40021000
 80019ec:	40010800 	.word	0x40010800

080019f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019f4:	e7fe      	b.n	80019f4 <NMI_Handler+0x4>

080019f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019f6:	b480      	push	{r7}
 80019f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019fa:	e7fe      	b.n	80019fa <HardFault_Handler+0x4>

080019fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a00:	e7fe      	b.n	8001a00 <MemManage_Handler+0x4>

08001a02 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a02:	b480      	push	{r7}
 8001a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a06:	e7fe      	b.n	8001a06 <BusFault_Handler+0x4>

08001a08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a0c:	e7fe      	b.n	8001a0c <UsageFault_Handler+0x4>

08001a0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a12:	bf00      	nop
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bc80      	pop	{r7}
 8001a18:	4770      	bx	lr

08001a1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a1e:	bf00      	nop
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bc80      	pop	{r7}
 8001a24:	4770      	bx	lr

08001a26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a26:	b480      	push	{r7}
 8001a28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a2a:	bf00      	nop
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bc80      	pop	{r7}
 8001a30:	4770      	bx	lr

08001a32 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a36:	f000 f935 	bl	8001ca4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a3a:	bf00      	nop
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	af00      	add	r7, sp, #0
	return 1;
 8001a42:	2301      	movs	r3, #1
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bc80      	pop	{r7}
 8001a4a:	4770      	bx	lr

08001a4c <_kill>:

int _kill(int pid, int sig)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a56:	f002 f97b 	bl	8003d50 <__errno>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2216      	movs	r2, #22
 8001a5e:	601a      	str	r2, [r3, #0]
	return -1;
 8001a60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3708      	adds	r7, #8
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <_exit>:

void _exit (int status)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a74:	f04f 31ff 	mov.w	r1, #4294967295
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f7ff ffe7 	bl	8001a4c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a7e:	e7fe      	b.n	8001a7e <_exit+0x12>

08001a80 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b086      	sub	sp, #24
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	60b9      	str	r1, [r7, #8]
 8001a8a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	617b      	str	r3, [r7, #20]
 8001a90:	e00a      	b.n	8001aa8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a92:	f3af 8000 	nop.w
 8001a96:	4601      	mov	r1, r0
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	1c5a      	adds	r2, r3, #1
 8001a9c:	60ba      	str	r2, [r7, #8]
 8001a9e:	b2ca      	uxtb	r2, r1
 8001aa0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	617b      	str	r3, [r7, #20]
 8001aa8:	697a      	ldr	r2, [r7, #20]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	dbf0      	blt.n	8001a92 <_read+0x12>
	}

return len;
 8001ab0:	687b      	ldr	r3, [r7, #4]
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3718      	adds	r7, #24
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b086      	sub	sp, #24
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	60f8      	str	r0, [r7, #12]
 8001ac2:	60b9      	str	r1, [r7, #8]
 8001ac4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	617b      	str	r3, [r7, #20]
 8001aca:	e009      	b.n	8001ae0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	1c5a      	adds	r2, r3, #1
 8001ad0:	60ba      	str	r2, [r7, #8]
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	3301      	adds	r3, #1
 8001ade:	617b      	str	r3, [r7, #20]
 8001ae0:	697a      	ldr	r2, [r7, #20]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	dbf1      	blt.n	8001acc <_write+0x12>
	}
	return len;
 8001ae8:	687b      	ldr	r3, [r7, #4]
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3718      	adds	r7, #24
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <_close>:

int _close(int file)
{
 8001af2:	b480      	push	{r7}
 8001af4:	b083      	sub	sp, #12
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
	return -1;
 8001afa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bc80      	pop	{r7}
 8001b06:	4770      	bx	lr

08001b08 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b18:	605a      	str	r2, [r3, #4]
	return 0;
 8001b1a:	2300      	movs	r3, #0
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bc80      	pop	{r7}
 8001b24:	4770      	bx	lr

08001b26 <_isatty>:

int _isatty(int file)
{
 8001b26:	b480      	push	{r7}
 8001b28:	b083      	sub	sp, #12
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
	return 1;
 8001b2e:	2301      	movs	r3, #1
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bc80      	pop	{r7}
 8001b38:	4770      	bx	lr

08001b3a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	b085      	sub	sp, #20
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	60f8      	str	r0, [r7, #12]
 8001b42:	60b9      	str	r1, [r7, #8]
 8001b44:	607a      	str	r2, [r7, #4]
	return 0;
 8001b46:	2300      	movs	r3, #0
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3714      	adds	r7, #20
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bc80      	pop	{r7}
 8001b50:	4770      	bx	lr
	...

08001b54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b5c:	4a14      	ldr	r2, [pc, #80]	; (8001bb0 <_sbrk+0x5c>)
 8001b5e:	4b15      	ldr	r3, [pc, #84]	; (8001bb4 <_sbrk+0x60>)
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b68:	4b13      	ldr	r3, [pc, #76]	; (8001bb8 <_sbrk+0x64>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d102      	bne.n	8001b76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b70:	4b11      	ldr	r3, [pc, #68]	; (8001bb8 <_sbrk+0x64>)
 8001b72:	4a12      	ldr	r2, [pc, #72]	; (8001bbc <_sbrk+0x68>)
 8001b74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b76:	4b10      	ldr	r3, [pc, #64]	; (8001bb8 <_sbrk+0x64>)
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d207      	bcs.n	8001b94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b84:	f002 f8e4 	bl	8003d50 <__errno>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	220c      	movs	r2, #12
 8001b8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b92:	e009      	b.n	8001ba8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b94:	4b08      	ldr	r3, [pc, #32]	; (8001bb8 <_sbrk+0x64>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b9a:	4b07      	ldr	r3, [pc, #28]	; (8001bb8 <_sbrk+0x64>)
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	4a05      	ldr	r2, [pc, #20]	; (8001bb8 <_sbrk+0x64>)
 8001ba4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3718      	adds	r7, #24
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	20005000 	.word	0x20005000
 8001bb4:	00000400 	.word	0x00000400
 8001bb8:	200002b0 	.word	0x200002b0
 8001bbc:	200002c8 	.word	0x200002c8

08001bc0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bc4:	bf00      	nop
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bc80      	pop	{r7}
 8001bca:	4770      	bx	lr

08001bcc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bcc:	480c      	ldr	r0, [pc, #48]	; (8001c00 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001bce:	490d      	ldr	r1, [pc, #52]	; (8001c04 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001bd0:	4a0d      	ldr	r2, [pc, #52]	; (8001c08 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001bd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bd4:	e002      	b.n	8001bdc <LoopCopyDataInit>

08001bd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bda:	3304      	adds	r3, #4

08001bdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001be0:	d3f9      	bcc.n	8001bd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001be2:	4a0a      	ldr	r2, [pc, #40]	; (8001c0c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001be4:	4c0a      	ldr	r4, [pc, #40]	; (8001c10 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001be6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001be8:	e001      	b.n	8001bee <LoopFillZerobss>

08001bea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bec:	3204      	adds	r2, #4

08001bee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bf0:	d3fb      	bcc.n	8001bea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001bf2:	f7ff ffe5 	bl	8001bc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bf6:	f002 f8b1 	bl	8003d5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bfa:	f7ff fd4f 	bl	800169c <main>
  bx lr
 8001bfe:	4770      	bx	lr
  ldr r0, =_sdata
 8001c00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c04:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001c08:	08008b5c 	.word	0x08008b5c
  ldr r2, =_sbss
 8001c0c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001c10:	200002c8 	.word	0x200002c8

08001c14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c14:	e7fe      	b.n	8001c14 <ADC1_2_IRQHandler>
	...

08001c18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c1c:	4b08      	ldr	r3, [pc, #32]	; (8001c40 <HAL_Init+0x28>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a07      	ldr	r2, [pc, #28]	; (8001c40 <HAL_Init+0x28>)
 8001c22:	f043 0310 	orr.w	r3, r3, #16
 8001c26:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c28:	2003      	movs	r0, #3
 8001c2a:	f000 f907 	bl	8001e3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c2e:	200f      	movs	r0, #15
 8001c30:	f000 f808 	bl	8001c44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c34:	f7ff fe20 	bl	8001878 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	40022000 	.word	0x40022000

08001c44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c4c:	4b12      	ldr	r3, [pc, #72]	; (8001c98 <HAL_InitTick+0x54>)
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	4b12      	ldr	r3, [pc, #72]	; (8001c9c <HAL_InitTick+0x58>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	4619      	mov	r1, r3
 8001c56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c62:	4618      	mov	r0, r3
 8001c64:	f000 f911 	bl	8001e8a <HAL_SYSTICK_Config>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e00e      	b.n	8001c90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2b0f      	cmp	r3, #15
 8001c76:	d80a      	bhi.n	8001c8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c78:	2200      	movs	r2, #0
 8001c7a:	6879      	ldr	r1, [r7, #4]
 8001c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c80:	f000 f8e7 	bl	8001e52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c84:	4a06      	ldr	r2, [pc, #24]	; (8001ca0 <HAL_InitTick+0x5c>)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	e000      	b.n	8001c90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3708      	adds	r7, #8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	20000000 	.word	0x20000000
 8001c9c:	20000008 	.word	0x20000008
 8001ca0:	20000004 	.word	0x20000004

08001ca4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ca8:	4b05      	ldr	r3, [pc, #20]	; (8001cc0 <HAL_IncTick+0x1c>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	461a      	mov	r2, r3
 8001cae:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <HAL_IncTick+0x20>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	4a03      	ldr	r2, [pc, #12]	; (8001cc4 <HAL_IncTick+0x20>)
 8001cb6:	6013      	str	r3, [r2, #0]
}
 8001cb8:	bf00      	nop
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bc80      	pop	{r7}
 8001cbe:	4770      	bx	lr
 8001cc0:	20000008 	.word	0x20000008
 8001cc4:	200002b4 	.word	0x200002b4

08001cc8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  return uwTick;
 8001ccc:	4b02      	ldr	r3, [pc, #8]	; (8001cd8 <HAL_GetTick+0x10>)
 8001cce:	681b      	ldr	r3, [r3, #0]
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bc80      	pop	{r7}
 8001cd6:	4770      	bx	lr
 8001cd8:	200002b4 	.word	0x200002b4

08001cdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b085      	sub	sp, #20
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f003 0307 	and.w	r3, r3, #7
 8001cea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cec:	4b0c      	ldr	r3, [pc, #48]	; (8001d20 <__NVIC_SetPriorityGrouping+0x44>)
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cf2:	68ba      	ldr	r2, [r7, #8]
 8001cf4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d0e:	4a04      	ldr	r2, [pc, #16]	; (8001d20 <__NVIC_SetPriorityGrouping+0x44>)
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	60d3      	str	r3, [r2, #12]
}
 8001d14:	bf00      	nop
 8001d16:	3714      	adds	r7, #20
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bc80      	pop	{r7}
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	e000ed00 	.word	0xe000ed00

08001d24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d28:	4b04      	ldr	r3, [pc, #16]	; (8001d3c <__NVIC_GetPriorityGrouping+0x18>)
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	0a1b      	lsrs	r3, r3, #8
 8001d2e:	f003 0307 	and.w	r3, r3, #7
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bc80      	pop	{r7}
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	e000ed00 	.word	0xe000ed00

08001d40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	6039      	str	r1, [r7, #0]
 8001d4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	db0a      	blt.n	8001d6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	b2da      	uxtb	r2, r3
 8001d58:	490c      	ldr	r1, [pc, #48]	; (8001d8c <__NVIC_SetPriority+0x4c>)
 8001d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5e:	0112      	lsls	r2, r2, #4
 8001d60:	b2d2      	uxtb	r2, r2
 8001d62:	440b      	add	r3, r1
 8001d64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d68:	e00a      	b.n	8001d80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	b2da      	uxtb	r2, r3
 8001d6e:	4908      	ldr	r1, [pc, #32]	; (8001d90 <__NVIC_SetPriority+0x50>)
 8001d70:	79fb      	ldrb	r3, [r7, #7]
 8001d72:	f003 030f 	and.w	r3, r3, #15
 8001d76:	3b04      	subs	r3, #4
 8001d78:	0112      	lsls	r2, r2, #4
 8001d7a:	b2d2      	uxtb	r2, r2
 8001d7c:	440b      	add	r3, r1
 8001d7e:	761a      	strb	r2, [r3, #24]
}
 8001d80:	bf00      	nop
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bc80      	pop	{r7}
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	e000e100 	.word	0xe000e100
 8001d90:	e000ed00 	.word	0xe000ed00

08001d94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b089      	sub	sp, #36	; 0x24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f003 0307 	and.w	r3, r3, #7
 8001da6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	f1c3 0307 	rsb	r3, r3, #7
 8001dae:	2b04      	cmp	r3, #4
 8001db0:	bf28      	it	cs
 8001db2:	2304      	movcs	r3, #4
 8001db4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	3304      	adds	r3, #4
 8001dba:	2b06      	cmp	r3, #6
 8001dbc:	d902      	bls.n	8001dc4 <NVIC_EncodePriority+0x30>
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	3b03      	subs	r3, #3
 8001dc2:	e000      	b.n	8001dc6 <NVIC_EncodePriority+0x32>
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	43da      	mvns	r2, r3
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	401a      	ands	r2, r3
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ddc:	f04f 31ff 	mov.w	r1, #4294967295
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	fa01 f303 	lsl.w	r3, r1, r3
 8001de6:	43d9      	mvns	r1, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dec:	4313      	orrs	r3, r2
         );
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3724      	adds	r7, #36	; 0x24
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bc80      	pop	{r7}
 8001df6:	4770      	bx	lr

08001df8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	3b01      	subs	r3, #1
 8001e04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e08:	d301      	bcc.n	8001e0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e00f      	b.n	8001e2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e0e:	4a0a      	ldr	r2, [pc, #40]	; (8001e38 <SysTick_Config+0x40>)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	3b01      	subs	r3, #1
 8001e14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e16:	210f      	movs	r1, #15
 8001e18:	f04f 30ff 	mov.w	r0, #4294967295
 8001e1c:	f7ff ff90 	bl	8001d40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e20:	4b05      	ldr	r3, [pc, #20]	; (8001e38 <SysTick_Config+0x40>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e26:	4b04      	ldr	r3, [pc, #16]	; (8001e38 <SysTick_Config+0x40>)
 8001e28:	2207      	movs	r2, #7
 8001e2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	e000e010 	.word	0xe000e010

08001e3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f7ff ff49 	bl	8001cdc <__NVIC_SetPriorityGrouping>
}
 8001e4a:	bf00      	nop
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b086      	sub	sp, #24
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	4603      	mov	r3, r0
 8001e5a:	60b9      	str	r1, [r7, #8]
 8001e5c:	607a      	str	r2, [r7, #4]
 8001e5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e60:	2300      	movs	r3, #0
 8001e62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e64:	f7ff ff5e 	bl	8001d24 <__NVIC_GetPriorityGrouping>
 8001e68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	68b9      	ldr	r1, [r7, #8]
 8001e6e:	6978      	ldr	r0, [r7, #20]
 8001e70:	f7ff ff90 	bl	8001d94 <NVIC_EncodePriority>
 8001e74:	4602      	mov	r2, r0
 8001e76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e7a:	4611      	mov	r1, r2
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7ff ff5f 	bl	8001d40 <__NVIC_SetPriority>
}
 8001e82:	bf00      	nop
 8001e84:	3718      	adds	r7, #24
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b082      	sub	sp, #8
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f7ff ffb0 	bl	8001df8 <SysTick_Config>
 8001e98:	4603      	mov	r3, r0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
	...

08001ea4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b08b      	sub	sp, #44	; 0x2c
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eb6:	e169      	b.n	800218c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001eb8:	2201      	movs	r2, #1
 8001eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	69fa      	ldr	r2, [r7, #28]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	f040 8158 	bne.w	8002186 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	4a9a      	ldr	r2, [pc, #616]	; (8002144 <HAL_GPIO_Init+0x2a0>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d05e      	beq.n	8001f9e <HAL_GPIO_Init+0xfa>
 8001ee0:	4a98      	ldr	r2, [pc, #608]	; (8002144 <HAL_GPIO_Init+0x2a0>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d875      	bhi.n	8001fd2 <HAL_GPIO_Init+0x12e>
 8001ee6:	4a98      	ldr	r2, [pc, #608]	; (8002148 <HAL_GPIO_Init+0x2a4>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d058      	beq.n	8001f9e <HAL_GPIO_Init+0xfa>
 8001eec:	4a96      	ldr	r2, [pc, #600]	; (8002148 <HAL_GPIO_Init+0x2a4>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d86f      	bhi.n	8001fd2 <HAL_GPIO_Init+0x12e>
 8001ef2:	4a96      	ldr	r2, [pc, #600]	; (800214c <HAL_GPIO_Init+0x2a8>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d052      	beq.n	8001f9e <HAL_GPIO_Init+0xfa>
 8001ef8:	4a94      	ldr	r2, [pc, #592]	; (800214c <HAL_GPIO_Init+0x2a8>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d869      	bhi.n	8001fd2 <HAL_GPIO_Init+0x12e>
 8001efe:	4a94      	ldr	r2, [pc, #592]	; (8002150 <HAL_GPIO_Init+0x2ac>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d04c      	beq.n	8001f9e <HAL_GPIO_Init+0xfa>
 8001f04:	4a92      	ldr	r2, [pc, #584]	; (8002150 <HAL_GPIO_Init+0x2ac>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d863      	bhi.n	8001fd2 <HAL_GPIO_Init+0x12e>
 8001f0a:	4a92      	ldr	r2, [pc, #584]	; (8002154 <HAL_GPIO_Init+0x2b0>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d046      	beq.n	8001f9e <HAL_GPIO_Init+0xfa>
 8001f10:	4a90      	ldr	r2, [pc, #576]	; (8002154 <HAL_GPIO_Init+0x2b0>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d85d      	bhi.n	8001fd2 <HAL_GPIO_Init+0x12e>
 8001f16:	2b12      	cmp	r3, #18
 8001f18:	d82a      	bhi.n	8001f70 <HAL_GPIO_Init+0xcc>
 8001f1a:	2b12      	cmp	r3, #18
 8001f1c:	d859      	bhi.n	8001fd2 <HAL_GPIO_Init+0x12e>
 8001f1e:	a201      	add	r2, pc, #4	; (adr r2, 8001f24 <HAL_GPIO_Init+0x80>)
 8001f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f24:	08001f9f 	.word	0x08001f9f
 8001f28:	08001f79 	.word	0x08001f79
 8001f2c:	08001f8b 	.word	0x08001f8b
 8001f30:	08001fcd 	.word	0x08001fcd
 8001f34:	08001fd3 	.word	0x08001fd3
 8001f38:	08001fd3 	.word	0x08001fd3
 8001f3c:	08001fd3 	.word	0x08001fd3
 8001f40:	08001fd3 	.word	0x08001fd3
 8001f44:	08001fd3 	.word	0x08001fd3
 8001f48:	08001fd3 	.word	0x08001fd3
 8001f4c:	08001fd3 	.word	0x08001fd3
 8001f50:	08001fd3 	.word	0x08001fd3
 8001f54:	08001fd3 	.word	0x08001fd3
 8001f58:	08001fd3 	.word	0x08001fd3
 8001f5c:	08001fd3 	.word	0x08001fd3
 8001f60:	08001fd3 	.word	0x08001fd3
 8001f64:	08001fd3 	.word	0x08001fd3
 8001f68:	08001f81 	.word	0x08001f81
 8001f6c:	08001f95 	.word	0x08001f95
 8001f70:	4a79      	ldr	r2, [pc, #484]	; (8002158 <HAL_GPIO_Init+0x2b4>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d013      	beq.n	8001f9e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f76:	e02c      	b.n	8001fd2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	623b      	str	r3, [r7, #32]
          break;
 8001f7e:	e029      	b.n	8001fd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	3304      	adds	r3, #4
 8001f86:	623b      	str	r3, [r7, #32]
          break;
 8001f88:	e024      	b.n	8001fd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	3308      	adds	r3, #8
 8001f90:	623b      	str	r3, [r7, #32]
          break;
 8001f92:	e01f      	b.n	8001fd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	330c      	adds	r3, #12
 8001f9a:	623b      	str	r3, [r7, #32]
          break;
 8001f9c:	e01a      	b.n	8001fd4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d102      	bne.n	8001fac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001fa6:	2304      	movs	r3, #4
 8001fa8:	623b      	str	r3, [r7, #32]
          break;
 8001faa:	e013      	b.n	8001fd4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d105      	bne.n	8001fc0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fb4:	2308      	movs	r3, #8
 8001fb6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	69fa      	ldr	r2, [r7, #28]
 8001fbc:	611a      	str	r2, [r3, #16]
          break;
 8001fbe:	e009      	b.n	8001fd4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fc0:	2308      	movs	r3, #8
 8001fc2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	69fa      	ldr	r2, [r7, #28]
 8001fc8:	615a      	str	r2, [r3, #20]
          break;
 8001fca:	e003      	b.n	8001fd4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	623b      	str	r3, [r7, #32]
          break;
 8001fd0:	e000      	b.n	8001fd4 <HAL_GPIO_Init+0x130>
          break;
 8001fd2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	2bff      	cmp	r3, #255	; 0xff
 8001fd8:	d801      	bhi.n	8001fde <HAL_GPIO_Init+0x13a>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	e001      	b.n	8001fe2 <HAL_GPIO_Init+0x13e>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	3304      	adds	r3, #4
 8001fe2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	2bff      	cmp	r3, #255	; 0xff
 8001fe8:	d802      	bhi.n	8001ff0 <HAL_GPIO_Init+0x14c>
 8001fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	e002      	b.n	8001ff6 <HAL_GPIO_Init+0x152>
 8001ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff2:	3b08      	subs	r3, #8
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	210f      	movs	r1, #15
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	fa01 f303 	lsl.w	r3, r1, r3
 8002004:	43db      	mvns	r3, r3
 8002006:	401a      	ands	r2, r3
 8002008:	6a39      	ldr	r1, [r7, #32]
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	fa01 f303 	lsl.w	r3, r1, r3
 8002010:	431a      	orrs	r2, r3
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800201e:	2b00      	cmp	r3, #0
 8002020:	f000 80b1 	beq.w	8002186 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002024:	4b4d      	ldr	r3, [pc, #308]	; (800215c <HAL_GPIO_Init+0x2b8>)
 8002026:	699b      	ldr	r3, [r3, #24]
 8002028:	4a4c      	ldr	r2, [pc, #304]	; (800215c <HAL_GPIO_Init+0x2b8>)
 800202a:	f043 0301 	orr.w	r3, r3, #1
 800202e:	6193      	str	r3, [r2, #24]
 8002030:	4b4a      	ldr	r3, [pc, #296]	; (800215c <HAL_GPIO_Init+0x2b8>)
 8002032:	699b      	ldr	r3, [r3, #24]
 8002034:	f003 0301 	and.w	r3, r3, #1
 8002038:	60bb      	str	r3, [r7, #8]
 800203a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800203c:	4a48      	ldr	r2, [pc, #288]	; (8002160 <HAL_GPIO_Init+0x2bc>)
 800203e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002040:	089b      	lsrs	r3, r3, #2
 8002042:	3302      	adds	r3, #2
 8002044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002048:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800204a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204c:	f003 0303 	and.w	r3, r3, #3
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	220f      	movs	r2, #15
 8002054:	fa02 f303 	lsl.w	r3, r2, r3
 8002058:	43db      	mvns	r3, r3
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	4013      	ands	r3, r2
 800205e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4a40      	ldr	r2, [pc, #256]	; (8002164 <HAL_GPIO_Init+0x2c0>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d013      	beq.n	8002090 <HAL_GPIO_Init+0x1ec>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4a3f      	ldr	r2, [pc, #252]	; (8002168 <HAL_GPIO_Init+0x2c4>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d00d      	beq.n	800208c <HAL_GPIO_Init+0x1e8>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4a3e      	ldr	r2, [pc, #248]	; (800216c <HAL_GPIO_Init+0x2c8>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d007      	beq.n	8002088 <HAL_GPIO_Init+0x1e4>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4a3d      	ldr	r2, [pc, #244]	; (8002170 <HAL_GPIO_Init+0x2cc>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d101      	bne.n	8002084 <HAL_GPIO_Init+0x1e0>
 8002080:	2303      	movs	r3, #3
 8002082:	e006      	b.n	8002092 <HAL_GPIO_Init+0x1ee>
 8002084:	2304      	movs	r3, #4
 8002086:	e004      	b.n	8002092 <HAL_GPIO_Init+0x1ee>
 8002088:	2302      	movs	r3, #2
 800208a:	e002      	b.n	8002092 <HAL_GPIO_Init+0x1ee>
 800208c:	2301      	movs	r3, #1
 800208e:	e000      	b.n	8002092 <HAL_GPIO_Init+0x1ee>
 8002090:	2300      	movs	r3, #0
 8002092:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002094:	f002 0203 	and.w	r2, r2, #3
 8002098:	0092      	lsls	r2, r2, #2
 800209a:	4093      	lsls	r3, r2
 800209c:	68fa      	ldr	r2, [r7, #12]
 800209e:	4313      	orrs	r3, r2
 80020a0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80020a2:	492f      	ldr	r1, [pc, #188]	; (8002160 <HAL_GPIO_Init+0x2bc>)
 80020a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a6:	089b      	lsrs	r3, r3, #2
 80020a8:	3302      	adds	r3, #2
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d006      	beq.n	80020ca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80020bc:	4b2d      	ldr	r3, [pc, #180]	; (8002174 <HAL_GPIO_Init+0x2d0>)
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	492c      	ldr	r1, [pc, #176]	; (8002174 <HAL_GPIO_Init+0x2d0>)
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	600b      	str	r3, [r1, #0]
 80020c8:	e006      	b.n	80020d8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020ca:	4b2a      	ldr	r3, [pc, #168]	; (8002174 <HAL_GPIO_Init+0x2d0>)
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	43db      	mvns	r3, r3
 80020d2:	4928      	ldr	r1, [pc, #160]	; (8002174 <HAL_GPIO_Init+0x2d0>)
 80020d4:	4013      	ands	r3, r2
 80020d6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d006      	beq.n	80020f2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020e4:	4b23      	ldr	r3, [pc, #140]	; (8002174 <HAL_GPIO_Init+0x2d0>)
 80020e6:	685a      	ldr	r2, [r3, #4]
 80020e8:	4922      	ldr	r1, [pc, #136]	; (8002174 <HAL_GPIO_Init+0x2d0>)
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	604b      	str	r3, [r1, #4]
 80020f0:	e006      	b.n	8002100 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80020f2:	4b20      	ldr	r3, [pc, #128]	; (8002174 <HAL_GPIO_Init+0x2d0>)
 80020f4:	685a      	ldr	r2, [r3, #4]
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	43db      	mvns	r3, r3
 80020fa:	491e      	ldr	r1, [pc, #120]	; (8002174 <HAL_GPIO_Init+0x2d0>)
 80020fc:	4013      	ands	r3, r2
 80020fe:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d006      	beq.n	800211a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800210c:	4b19      	ldr	r3, [pc, #100]	; (8002174 <HAL_GPIO_Init+0x2d0>)
 800210e:	689a      	ldr	r2, [r3, #8]
 8002110:	4918      	ldr	r1, [pc, #96]	; (8002174 <HAL_GPIO_Init+0x2d0>)
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	4313      	orrs	r3, r2
 8002116:	608b      	str	r3, [r1, #8]
 8002118:	e006      	b.n	8002128 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800211a:	4b16      	ldr	r3, [pc, #88]	; (8002174 <HAL_GPIO_Init+0x2d0>)
 800211c:	689a      	ldr	r2, [r3, #8]
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	43db      	mvns	r3, r3
 8002122:	4914      	ldr	r1, [pc, #80]	; (8002174 <HAL_GPIO_Init+0x2d0>)
 8002124:	4013      	ands	r3, r2
 8002126:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d021      	beq.n	8002178 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002134:	4b0f      	ldr	r3, [pc, #60]	; (8002174 <HAL_GPIO_Init+0x2d0>)
 8002136:	68da      	ldr	r2, [r3, #12]
 8002138:	490e      	ldr	r1, [pc, #56]	; (8002174 <HAL_GPIO_Init+0x2d0>)
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	4313      	orrs	r3, r2
 800213e:	60cb      	str	r3, [r1, #12]
 8002140:	e021      	b.n	8002186 <HAL_GPIO_Init+0x2e2>
 8002142:	bf00      	nop
 8002144:	10320000 	.word	0x10320000
 8002148:	10310000 	.word	0x10310000
 800214c:	10220000 	.word	0x10220000
 8002150:	10210000 	.word	0x10210000
 8002154:	10120000 	.word	0x10120000
 8002158:	10110000 	.word	0x10110000
 800215c:	40021000 	.word	0x40021000
 8002160:	40010000 	.word	0x40010000
 8002164:	40010800 	.word	0x40010800
 8002168:	40010c00 	.word	0x40010c00
 800216c:	40011000 	.word	0x40011000
 8002170:	40011400 	.word	0x40011400
 8002174:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002178:	4b0b      	ldr	r3, [pc, #44]	; (80021a8 <HAL_GPIO_Init+0x304>)
 800217a:	68da      	ldr	r2, [r3, #12]
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	43db      	mvns	r3, r3
 8002180:	4909      	ldr	r1, [pc, #36]	; (80021a8 <HAL_GPIO_Init+0x304>)
 8002182:	4013      	ands	r3, r2
 8002184:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002188:	3301      	adds	r3, #1
 800218a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002192:	fa22 f303 	lsr.w	r3, r2, r3
 8002196:	2b00      	cmp	r3, #0
 8002198:	f47f ae8e 	bne.w	8001eb8 <HAL_GPIO_Init+0x14>
  }
}
 800219c:	bf00      	nop
 800219e:	bf00      	nop
 80021a0:	372c      	adds	r7, #44	; 0x2c
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bc80      	pop	{r7}
 80021a6:	4770      	bx	lr
 80021a8:	40010400 	.word	0x40010400

080021ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d101      	bne.n	80021be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e12b      	b.n	8002416 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d106      	bne.n	80021d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f7ff fb82 	bl	80018dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2224      	movs	r2, #36	; 0x24
 80021dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f022 0201 	bic.w	r2, r2, #1
 80021ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800220e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002210:	f001 fba0 	bl	8003954 <HAL_RCC_GetPCLK1Freq>
 8002214:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	4a81      	ldr	r2, [pc, #516]	; (8002420 <HAL_I2C_Init+0x274>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d807      	bhi.n	8002230 <HAL_I2C_Init+0x84>
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	4a80      	ldr	r2, [pc, #512]	; (8002424 <HAL_I2C_Init+0x278>)
 8002224:	4293      	cmp	r3, r2
 8002226:	bf94      	ite	ls
 8002228:	2301      	movls	r3, #1
 800222a:	2300      	movhi	r3, #0
 800222c:	b2db      	uxtb	r3, r3
 800222e:	e006      	b.n	800223e <HAL_I2C_Init+0x92>
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	4a7d      	ldr	r2, [pc, #500]	; (8002428 <HAL_I2C_Init+0x27c>)
 8002234:	4293      	cmp	r3, r2
 8002236:	bf94      	ite	ls
 8002238:	2301      	movls	r3, #1
 800223a:	2300      	movhi	r3, #0
 800223c:	b2db      	uxtb	r3, r3
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e0e7      	b.n	8002416 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	4a78      	ldr	r2, [pc, #480]	; (800242c <HAL_I2C_Init+0x280>)
 800224a:	fba2 2303 	umull	r2, r3, r2, r3
 800224e:	0c9b      	lsrs	r3, r3, #18
 8002250:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	68ba      	ldr	r2, [r7, #8]
 8002262:	430a      	orrs	r2, r1
 8002264:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	6a1b      	ldr	r3, [r3, #32]
 800226c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	4a6a      	ldr	r2, [pc, #424]	; (8002420 <HAL_I2C_Init+0x274>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d802      	bhi.n	8002280 <HAL_I2C_Init+0xd4>
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	3301      	adds	r3, #1
 800227e:	e009      	b.n	8002294 <HAL_I2C_Init+0xe8>
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002286:	fb02 f303 	mul.w	r3, r2, r3
 800228a:	4a69      	ldr	r2, [pc, #420]	; (8002430 <HAL_I2C_Init+0x284>)
 800228c:	fba2 2303 	umull	r2, r3, r2, r3
 8002290:	099b      	lsrs	r3, r3, #6
 8002292:	3301      	adds	r3, #1
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	6812      	ldr	r2, [r2, #0]
 8002298:	430b      	orrs	r3, r1
 800229a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	69db      	ldr	r3, [r3, #28]
 80022a2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80022a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	495c      	ldr	r1, [pc, #368]	; (8002420 <HAL_I2C_Init+0x274>)
 80022b0:	428b      	cmp	r3, r1
 80022b2:	d819      	bhi.n	80022e8 <HAL_I2C_Init+0x13c>
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	1e59      	subs	r1, r3, #1
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	fbb1 f3f3 	udiv	r3, r1, r3
 80022c2:	1c59      	adds	r1, r3, #1
 80022c4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80022c8:	400b      	ands	r3, r1
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d00a      	beq.n	80022e4 <HAL_I2C_Init+0x138>
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	1e59      	subs	r1, r3, #1
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80022dc:	3301      	adds	r3, #1
 80022de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022e2:	e051      	b.n	8002388 <HAL_I2C_Init+0x1dc>
 80022e4:	2304      	movs	r3, #4
 80022e6:	e04f      	b.n	8002388 <HAL_I2C_Init+0x1dc>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d111      	bne.n	8002314 <HAL_I2C_Init+0x168>
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	1e58      	subs	r0, r3, #1
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6859      	ldr	r1, [r3, #4]
 80022f8:	460b      	mov	r3, r1
 80022fa:	005b      	lsls	r3, r3, #1
 80022fc:	440b      	add	r3, r1
 80022fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002302:	3301      	adds	r3, #1
 8002304:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002308:	2b00      	cmp	r3, #0
 800230a:	bf0c      	ite	eq
 800230c:	2301      	moveq	r3, #1
 800230e:	2300      	movne	r3, #0
 8002310:	b2db      	uxtb	r3, r3
 8002312:	e012      	b.n	800233a <HAL_I2C_Init+0x18e>
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	1e58      	subs	r0, r3, #1
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6859      	ldr	r1, [r3, #4]
 800231c:	460b      	mov	r3, r1
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	440b      	add	r3, r1
 8002322:	0099      	lsls	r1, r3, #2
 8002324:	440b      	add	r3, r1
 8002326:	fbb0 f3f3 	udiv	r3, r0, r3
 800232a:	3301      	adds	r3, #1
 800232c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002330:	2b00      	cmp	r3, #0
 8002332:	bf0c      	ite	eq
 8002334:	2301      	moveq	r3, #1
 8002336:	2300      	movne	r3, #0
 8002338:	b2db      	uxtb	r3, r3
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <HAL_I2C_Init+0x196>
 800233e:	2301      	movs	r3, #1
 8002340:	e022      	b.n	8002388 <HAL_I2C_Init+0x1dc>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d10e      	bne.n	8002368 <HAL_I2C_Init+0x1bc>
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	1e58      	subs	r0, r3, #1
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6859      	ldr	r1, [r3, #4]
 8002352:	460b      	mov	r3, r1
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	440b      	add	r3, r1
 8002358:	fbb0 f3f3 	udiv	r3, r0, r3
 800235c:	3301      	adds	r3, #1
 800235e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002362:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002366:	e00f      	b.n	8002388 <HAL_I2C_Init+0x1dc>
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	1e58      	subs	r0, r3, #1
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6859      	ldr	r1, [r3, #4]
 8002370:	460b      	mov	r3, r1
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	440b      	add	r3, r1
 8002376:	0099      	lsls	r1, r3, #2
 8002378:	440b      	add	r3, r1
 800237a:	fbb0 f3f3 	udiv	r3, r0, r3
 800237e:	3301      	adds	r3, #1
 8002380:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002384:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002388:	6879      	ldr	r1, [r7, #4]
 800238a:	6809      	ldr	r1, [r1, #0]
 800238c:	4313      	orrs	r3, r2
 800238e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	69da      	ldr	r2, [r3, #28]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a1b      	ldr	r3, [r3, #32]
 80023a2:	431a      	orrs	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	430a      	orrs	r2, r1
 80023aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80023b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	6911      	ldr	r1, [r2, #16]
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	68d2      	ldr	r2, [r2, #12]
 80023c2:	4311      	orrs	r1, r2
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	6812      	ldr	r2, [r2, #0]
 80023c8:	430b      	orrs	r3, r1
 80023ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	695a      	ldr	r2, [r3, #20]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	699b      	ldr	r3, [r3, #24]
 80023de:	431a      	orrs	r2, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	430a      	orrs	r2, r1
 80023e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f042 0201 	orr.w	r2, r2, #1
 80023f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2220      	movs	r2, #32
 8002402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3710      	adds	r7, #16
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	000186a0 	.word	0x000186a0
 8002424:	001e847f 	.word	0x001e847f
 8002428:	003d08ff 	.word	0x003d08ff
 800242c:	431bde83 	.word	0x431bde83
 8002430:	10624dd3 	.word	0x10624dd3

08002434 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b088      	sub	sp, #32
 8002438:	af02      	add	r7, sp, #8
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	4608      	mov	r0, r1
 800243e:	4611      	mov	r1, r2
 8002440:	461a      	mov	r2, r3
 8002442:	4603      	mov	r3, r0
 8002444:	817b      	strh	r3, [r7, #10]
 8002446:	460b      	mov	r3, r1
 8002448:	813b      	strh	r3, [r7, #8]
 800244a:	4613      	mov	r3, r2
 800244c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800244e:	f7ff fc3b 	bl	8001cc8 <HAL_GetTick>
 8002452:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800245a:	b2db      	uxtb	r3, r3
 800245c:	2b20      	cmp	r3, #32
 800245e:	f040 80d9 	bne.w	8002614 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	9300      	str	r3, [sp, #0]
 8002466:	2319      	movs	r3, #25
 8002468:	2201      	movs	r2, #1
 800246a:	496d      	ldr	r1, [pc, #436]	; (8002620 <HAL_I2C_Mem_Write+0x1ec>)
 800246c:	68f8      	ldr	r0, [r7, #12]
 800246e:	f000 fcc1 	bl	8002df4 <I2C_WaitOnFlagUntilTimeout>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d001      	beq.n	800247c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002478:	2302      	movs	r3, #2
 800247a:	e0cc      	b.n	8002616 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002482:	2b01      	cmp	r3, #1
 8002484:	d101      	bne.n	800248a <HAL_I2C_Mem_Write+0x56>
 8002486:	2302      	movs	r3, #2
 8002488:	e0c5      	b.n	8002616 <HAL_I2C_Mem_Write+0x1e2>
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2201      	movs	r2, #1
 800248e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0301 	and.w	r3, r3, #1
 800249c:	2b01      	cmp	r3, #1
 800249e:	d007      	beq.n	80024b0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f042 0201 	orr.w	r2, r2, #1
 80024ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2221      	movs	r2, #33	; 0x21
 80024c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2240      	movs	r2, #64	; 0x40
 80024cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2200      	movs	r2, #0
 80024d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	6a3a      	ldr	r2, [r7, #32]
 80024da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80024e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024e6:	b29a      	uxth	r2, r3
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	4a4d      	ldr	r2, [pc, #308]	; (8002624 <HAL_I2C_Mem_Write+0x1f0>)
 80024f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80024f2:	88f8      	ldrh	r0, [r7, #6]
 80024f4:	893a      	ldrh	r2, [r7, #8]
 80024f6:	8979      	ldrh	r1, [r7, #10]
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	9301      	str	r3, [sp, #4]
 80024fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024fe:	9300      	str	r3, [sp, #0]
 8002500:	4603      	mov	r3, r0
 8002502:	68f8      	ldr	r0, [r7, #12]
 8002504:	f000 faf8 	bl	8002af8 <I2C_RequestMemoryWrite>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d052      	beq.n	80025b4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e081      	b.n	8002616 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002512:	697a      	ldr	r2, [r7, #20]
 8002514:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002516:	68f8      	ldr	r0, [r7, #12]
 8002518:	f000 fd42 	bl	8002fa0 <I2C_WaitOnTXEFlagUntilTimeout>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d00d      	beq.n	800253e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002526:	2b04      	cmp	r3, #4
 8002528:	d107      	bne.n	800253a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002538:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e06b      	b.n	8002616 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002542:	781a      	ldrb	r2, [r3, #0]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254e:	1c5a      	adds	r2, r3, #1
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002558:	3b01      	subs	r3, #1
 800255a:	b29a      	uxth	r2, r3
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002564:	b29b      	uxth	r3, r3
 8002566:	3b01      	subs	r3, #1
 8002568:	b29a      	uxth	r2, r3
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	695b      	ldr	r3, [r3, #20]
 8002574:	f003 0304 	and.w	r3, r3, #4
 8002578:	2b04      	cmp	r3, #4
 800257a:	d11b      	bne.n	80025b4 <HAL_I2C_Mem_Write+0x180>
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002580:	2b00      	cmp	r3, #0
 8002582:	d017      	beq.n	80025b4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002588:	781a      	ldrb	r2, [r3, #0]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002594:	1c5a      	adds	r2, r3, #1
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800259e:	3b01      	subs	r3, #1
 80025a0:	b29a      	uxth	r2, r3
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	3b01      	subs	r3, #1
 80025ae:	b29a      	uxth	r2, r3
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d1aa      	bne.n	8002512 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025bc:	697a      	ldr	r2, [r7, #20]
 80025be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025c0:	68f8      	ldr	r0, [r7, #12]
 80025c2:	f000 fd2e 	bl	8003022 <I2C_WaitOnBTFFlagUntilTimeout>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d00d      	beq.n	80025e8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d0:	2b04      	cmp	r3, #4
 80025d2:	d107      	bne.n	80025e4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025e2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e016      	b.n	8002616 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2220      	movs	r2, #32
 80025fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2200      	movs	r2, #0
 8002604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2200      	movs	r2, #0
 800260c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002610:	2300      	movs	r3, #0
 8002612:	e000      	b.n	8002616 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002614:	2302      	movs	r3, #2
  }
}
 8002616:	4618      	mov	r0, r3
 8002618:	3718      	adds	r7, #24
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	00100002 	.word	0x00100002
 8002624:	ffff0000 	.word	0xffff0000

08002628 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b08c      	sub	sp, #48	; 0x30
 800262c:	af02      	add	r7, sp, #8
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	4608      	mov	r0, r1
 8002632:	4611      	mov	r1, r2
 8002634:	461a      	mov	r2, r3
 8002636:	4603      	mov	r3, r0
 8002638:	817b      	strh	r3, [r7, #10]
 800263a:	460b      	mov	r3, r1
 800263c:	813b      	strh	r3, [r7, #8]
 800263e:	4613      	mov	r3, r2
 8002640:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002642:	2300      	movs	r3, #0
 8002644:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002646:	f7ff fb3f 	bl	8001cc8 <HAL_GetTick>
 800264a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002652:	b2db      	uxtb	r3, r3
 8002654:	2b20      	cmp	r3, #32
 8002656:	f040 8244 	bne.w	8002ae2 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800265a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265c:	9300      	str	r3, [sp, #0]
 800265e:	2319      	movs	r3, #25
 8002660:	2201      	movs	r2, #1
 8002662:	4982      	ldr	r1, [pc, #520]	; (800286c <HAL_I2C_Mem_Read+0x244>)
 8002664:	68f8      	ldr	r0, [r7, #12]
 8002666:	f000 fbc5 	bl	8002df4 <I2C_WaitOnFlagUntilTimeout>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002670:	2302      	movs	r3, #2
 8002672:	e237      	b.n	8002ae4 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800267a:	2b01      	cmp	r3, #1
 800267c:	d101      	bne.n	8002682 <HAL_I2C_Mem_Read+0x5a>
 800267e:	2302      	movs	r3, #2
 8002680:	e230      	b.n	8002ae4 <HAL_I2C_Mem_Read+0x4bc>
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2201      	movs	r2, #1
 8002686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0301 	and.w	r3, r3, #1
 8002694:	2b01      	cmp	r3, #1
 8002696:	d007      	beq.n	80026a8 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f042 0201 	orr.w	r2, r2, #1
 80026a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2222      	movs	r2, #34	; 0x22
 80026bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2240      	movs	r2, #64	; 0x40
 80026c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2200      	movs	r2, #0
 80026cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80026d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026de:	b29a      	uxth	r2, r3
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	4a62      	ldr	r2, [pc, #392]	; (8002870 <HAL_I2C_Mem_Read+0x248>)
 80026e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026ea:	88f8      	ldrh	r0, [r7, #6]
 80026ec:	893a      	ldrh	r2, [r7, #8]
 80026ee:	8979      	ldrh	r1, [r7, #10]
 80026f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f2:	9301      	str	r3, [sp, #4]
 80026f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026f6:	9300      	str	r3, [sp, #0]
 80026f8:	4603      	mov	r3, r0
 80026fa:	68f8      	ldr	r0, [r7, #12]
 80026fc:	f000 fa92 	bl	8002c24 <I2C_RequestMemoryRead>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e1ec      	b.n	8002ae4 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800270e:	2b00      	cmp	r3, #0
 8002710:	d113      	bne.n	800273a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002712:	2300      	movs	r3, #0
 8002714:	61fb      	str	r3, [r7, #28]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	695b      	ldr	r3, [r3, #20]
 800271c:	61fb      	str	r3, [r7, #28]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	61fb      	str	r3, [r7, #28]
 8002726:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002736:	601a      	str	r2, [r3, #0]
 8002738:	e1c0      	b.n	8002abc <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800273e:	2b01      	cmp	r3, #1
 8002740:	d11e      	bne.n	8002780 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002750:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002752:	b672      	cpsid	i
}
 8002754:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002756:	2300      	movs	r3, #0
 8002758:	61bb      	str	r3, [r7, #24]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	695b      	ldr	r3, [r3, #20]
 8002760:	61bb      	str	r3, [r7, #24]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	699b      	ldr	r3, [r3, #24]
 8002768:	61bb      	str	r3, [r7, #24]
 800276a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800277a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800277c:	b662      	cpsie	i
}
 800277e:	e035      	b.n	80027ec <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002784:	2b02      	cmp	r3, #2
 8002786:	d11e      	bne.n	80027c6 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002796:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002798:	b672      	cpsid	i
}
 800279a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800279c:	2300      	movs	r3, #0
 800279e:	617b      	str	r3, [r7, #20]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	695b      	ldr	r3, [r3, #20]
 80027a6:	617b      	str	r3, [r7, #20]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	699b      	ldr	r3, [r3, #24]
 80027ae:	617b      	str	r3, [r7, #20]
 80027b0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027c0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80027c2:	b662      	cpsie	i
}
 80027c4:	e012      	b.n	80027ec <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80027d4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027d6:	2300      	movs	r3, #0
 80027d8:	613b      	str	r3, [r7, #16]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	695b      	ldr	r3, [r3, #20]
 80027e0:	613b      	str	r3, [r7, #16]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	699b      	ldr	r3, [r3, #24]
 80027e8:	613b      	str	r3, [r7, #16]
 80027ea:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80027ec:	e166      	b.n	8002abc <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027f2:	2b03      	cmp	r3, #3
 80027f4:	f200 811f 	bhi.w	8002a36 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d123      	bne.n	8002848 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002800:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002802:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002804:	68f8      	ldr	r0, [r7, #12]
 8002806:	f000 fc4d 	bl	80030a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d001      	beq.n	8002814 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e167      	b.n	8002ae4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	691a      	ldr	r2, [r3, #16]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281e:	b2d2      	uxtb	r2, r2
 8002820:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002826:	1c5a      	adds	r2, r3, #1
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002830:	3b01      	subs	r3, #1
 8002832:	b29a      	uxth	r2, r3
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800283c:	b29b      	uxth	r3, r3
 800283e:	3b01      	subs	r3, #1
 8002840:	b29a      	uxth	r2, r3
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002846:	e139      	b.n	8002abc <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800284c:	2b02      	cmp	r3, #2
 800284e:	d152      	bne.n	80028f6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002852:	9300      	str	r3, [sp, #0]
 8002854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002856:	2200      	movs	r2, #0
 8002858:	4906      	ldr	r1, [pc, #24]	; (8002874 <HAL_I2C_Mem_Read+0x24c>)
 800285a:	68f8      	ldr	r0, [r7, #12]
 800285c:	f000 faca 	bl	8002df4 <I2C_WaitOnFlagUntilTimeout>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d008      	beq.n	8002878 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e13c      	b.n	8002ae4 <HAL_I2C_Mem_Read+0x4bc>
 800286a:	bf00      	nop
 800286c:	00100002 	.word	0x00100002
 8002870:	ffff0000 	.word	0xffff0000
 8002874:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002878:	b672      	cpsid	i
}
 800287a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800288a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	691a      	ldr	r2, [r3, #16]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002896:	b2d2      	uxtb	r2, r2
 8002898:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289e:	1c5a      	adds	r2, r3, #1
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028a8:	3b01      	subs	r3, #1
 80028aa:	b29a      	uxth	r2, r3
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	3b01      	subs	r3, #1
 80028b8:	b29a      	uxth	r2, r3
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80028be:	b662      	cpsie	i
}
 80028c0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	691a      	ldr	r2, [r3, #16]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028cc:	b2d2      	uxtb	r2, r2
 80028ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d4:	1c5a      	adds	r2, r3, #1
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028de:	3b01      	subs	r3, #1
 80028e0:	b29a      	uxth	r2, r3
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	3b01      	subs	r3, #1
 80028ee:	b29a      	uxth	r2, r3
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80028f4:	e0e2      	b.n	8002abc <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f8:	9300      	str	r3, [sp, #0]
 80028fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028fc:	2200      	movs	r2, #0
 80028fe:	497b      	ldr	r1, [pc, #492]	; (8002aec <HAL_I2C_Mem_Read+0x4c4>)
 8002900:	68f8      	ldr	r0, [r7, #12]
 8002902:	f000 fa77 	bl	8002df4 <I2C_WaitOnFlagUntilTimeout>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d001      	beq.n	8002910 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e0e9      	b.n	8002ae4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800291e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002920:	b672      	cpsid	i
}
 8002922:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	691a      	ldr	r2, [r3, #16]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292e:	b2d2      	uxtb	r2, r2
 8002930:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002936:	1c5a      	adds	r2, r3, #1
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002940:	3b01      	subs	r3, #1
 8002942:	b29a      	uxth	r2, r3
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800294c:	b29b      	uxth	r3, r3
 800294e:	3b01      	subs	r3, #1
 8002950:	b29a      	uxth	r2, r3
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002956:	4b66      	ldr	r3, [pc, #408]	; (8002af0 <HAL_I2C_Mem_Read+0x4c8>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	08db      	lsrs	r3, r3, #3
 800295c:	4a65      	ldr	r2, [pc, #404]	; (8002af4 <HAL_I2C_Mem_Read+0x4cc>)
 800295e:	fba2 2303 	umull	r2, r3, r2, r3
 8002962:	0a1a      	lsrs	r2, r3, #8
 8002964:	4613      	mov	r3, r2
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	4413      	add	r3, r2
 800296a:	00da      	lsls	r2, r3, #3
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002970:	6a3b      	ldr	r3, [r7, #32]
 8002972:	3b01      	subs	r3, #1
 8002974:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002976:	6a3b      	ldr	r3, [r7, #32]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d118      	bne.n	80029ae <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2200      	movs	r2, #0
 8002980:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2220      	movs	r2, #32
 8002986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2200      	movs	r2, #0
 800298e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002996:	f043 0220 	orr.w	r2, r3, #32
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800299e:	b662      	cpsie	i
}
 80029a0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e09a      	b.n	8002ae4 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	695b      	ldr	r3, [r3, #20]
 80029b4:	f003 0304 	and.w	r3, r3, #4
 80029b8:	2b04      	cmp	r3, #4
 80029ba:	d1d9      	bne.n	8002970 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	691a      	ldr	r2, [r3, #16]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d6:	b2d2      	uxtb	r2, r2
 80029d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029de:	1c5a      	adds	r2, r3, #1
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029e8:	3b01      	subs	r3, #1
 80029ea:	b29a      	uxth	r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	3b01      	subs	r3, #1
 80029f8:	b29a      	uxth	r2, r3
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80029fe:	b662      	cpsie	i
}
 8002a00:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	691a      	ldr	r2, [r3, #16]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0c:	b2d2      	uxtb	r2, r2
 8002a0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a14:	1c5a      	adds	r2, r3, #1
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	b29a      	uxth	r2, r3
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	3b01      	subs	r3, #1
 8002a2e:	b29a      	uxth	r2, r3
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a34:	e042      	b.n	8002abc <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a38:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002a3a:	68f8      	ldr	r0, [r7, #12]
 8002a3c:	f000 fb32 	bl	80030a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d001      	beq.n	8002a4a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e04c      	b.n	8002ae4 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	691a      	ldr	r2, [r3, #16]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a54:	b2d2      	uxtb	r2, r2
 8002a56:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5c:	1c5a      	adds	r2, r3, #1
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a66:	3b01      	subs	r3, #1
 8002a68:	b29a      	uxth	r2, r3
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	3b01      	subs	r3, #1
 8002a76:	b29a      	uxth	r2, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	695b      	ldr	r3, [r3, #20]
 8002a82:	f003 0304 	and.w	r3, r3, #4
 8002a86:	2b04      	cmp	r3, #4
 8002a88:	d118      	bne.n	8002abc <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	691a      	ldr	r2, [r3, #16]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a94:	b2d2      	uxtb	r2, r2
 8002a96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9c:	1c5a      	adds	r2, r3, #1
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aa6:	3b01      	subs	r3, #1
 8002aa8:	b29a      	uxth	r2, r3
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	3b01      	subs	r3, #1
 8002ab6:	b29a      	uxth	r2, r3
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	f47f ae94 	bne.w	80027ee <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2220      	movs	r2, #32
 8002aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	e000      	b.n	8002ae4 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8002ae2:	2302      	movs	r3, #2
  }
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3728      	adds	r7, #40	; 0x28
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	00010004 	.word	0x00010004
 8002af0:	20000000 	.word	0x20000000
 8002af4:	14f8b589 	.word	0x14f8b589

08002af8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b088      	sub	sp, #32
 8002afc:	af02      	add	r7, sp, #8
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	4608      	mov	r0, r1
 8002b02:	4611      	mov	r1, r2
 8002b04:	461a      	mov	r2, r3
 8002b06:	4603      	mov	r3, r0
 8002b08:	817b      	strh	r3, [r7, #10]
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	813b      	strh	r3, [r7, #8]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b20:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b24:	9300      	str	r3, [sp, #0]
 8002b26:	6a3b      	ldr	r3, [r7, #32]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b2e:	68f8      	ldr	r0, [r7, #12]
 8002b30:	f000 f960 	bl	8002df4 <I2C_WaitOnFlagUntilTimeout>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d00d      	beq.n	8002b56 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b48:	d103      	bne.n	8002b52 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b50:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e05f      	b.n	8002c16 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b56:	897b      	ldrh	r3, [r7, #10]
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b64:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b68:	6a3a      	ldr	r2, [r7, #32]
 8002b6a:	492d      	ldr	r1, [pc, #180]	; (8002c20 <I2C_RequestMemoryWrite+0x128>)
 8002b6c:	68f8      	ldr	r0, [r7, #12]
 8002b6e:	f000 f998 	bl	8002ea2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d001      	beq.n	8002b7c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e04c      	b.n	8002c16 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	617b      	str	r3, [r7, #20]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	695b      	ldr	r3, [r3, #20]
 8002b86:	617b      	str	r3, [r7, #20]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	617b      	str	r3, [r7, #20]
 8002b90:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b94:	6a39      	ldr	r1, [r7, #32]
 8002b96:	68f8      	ldr	r0, [r7, #12]
 8002b98:	f000 fa02 	bl	8002fa0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d00d      	beq.n	8002bbe <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba6:	2b04      	cmp	r3, #4
 8002ba8:	d107      	bne.n	8002bba <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bb8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e02b      	b.n	8002c16 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002bbe:	88fb      	ldrh	r3, [r7, #6]
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d105      	bne.n	8002bd0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002bc4:	893b      	ldrh	r3, [r7, #8]
 8002bc6:	b2da      	uxtb	r2, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	611a      	str	r2, [r3, #16]
 8002bce:	e021      	b.n	8002c14 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002bd0:	893b      	ldrh	r3, [r7, #8]
 8002bd2:	0a1b      	lsrs	r3, r3, #8
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	b2da      	uxtb	r2, r3
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002be0:	6a39      	ldr	r1, [r7, #32]
 8002be2:	68f8      	ldr	r0, [r7, #12]
 8002be4:	f000 f9dc 	bl	8002fa0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d00d      	beq.n	8002c0a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf2:	2b04      	cmp	r3, #4
 8002bf4:	d107      	bne.n	8002c06 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c04:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e005      	b.n	8002c16 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c0a:	893b      	ldrh	r3, [r7, #8]
 8002c0c:	b2da      	uxtb	r2, r3
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3718      	adds	r7, #24
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	00010002 	.word	0x00010002

08002c24 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b088      	sub	sp, #32
 8002c28:	af02      	add	r7, sp, #8
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	4608      	mov	r0, r1
 8002c2e:	4611      	mov	r1, r2
 8002c30:	461a      	mov	r2, r3
 8002c32:	4603      	mov	r3, r0
 8002c34:	817b      	strh	r3, [r7, #10]
 8002c36:	460b      	mov	r3, r1
 8002c38:	813b      	strh	r3, [r7, #8]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c4c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c5c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c60:	9300      	str	r3, [sp, #0]
 8002c62:	6a3b      	ldr	r3, [r7, #32]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c6a:	68f8      	ldr	r0, [r7, #12]
 8002c6c:	f000 f8c2 	bl	8002df4 <I2C_WaitOnFlagUntilTimeout>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d00d      	beq.n	8002c92 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c84:	d103      	bne.n	8002c8e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c8c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e0aa      	b.n	8002de8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c92:	897b      	ldrh	r3, [r7, #10]
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	461a      	mov	r2, r3
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ca0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca4:	6a3a      	ldr	r2, [r7, #32]
 8002ca6:	4952      	ldr	r1, [pc, #328]	; (8002df0 <I2C_RequestMemoryRead+0x1cc>)
 8002ca8:	68f8      	ldr	r0, [r7, #12]
 8002caa:	f000 f8fa 	bl	8002ea2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d001      	beq.n	8002cb8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e097      	b.n	8002de8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cb8:	2300      	movs	r3, #0
 8002cba:	617b      	str	r3, [r7, #20]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	695b      	ldr	r3, [r3, #20]
 8002cc2:	617b      	str	r3, [r7, #20]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	617b      	str	r3, [r7, #20]
 8002ccc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cd0:	6a39      	ldr	r1, [r7, #32]
 8002cd2:	68f8      	ldr	r0, [r7, #12]
 8002cd4:	f000 f964 	bl	8002fa0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00d      	beq.n	8002cfa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce2:	2b04      	cmp	r3, #4
 8002ce4:	d107      	bne.n	8002cf6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cf4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e076      	b.n	8002de8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002cfa:	88fb      	ldrh	r3, [r7, #6]
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d105      	bne.n	8002d0c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d00:	893b      	ldrh	r3, [r7, #8]
 8002d02:	b2da      	uxtb	r2, r3
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	611a      	str	r2, [r3, #16]
 8002d0a:	e021      	b.n	8002d50 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002d0c:	893b      	ldrh	r3, [r7, #8]
 8002d0e:	0a1b      	lsrs	r3, r3, #8
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	b2da      	uxtb	r2, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d1c:	6a39      	ldr	r1, [r7, #32]
 8002d1e:	68f8      	ldr	r0, [r7, #12]
 8002d20:	f000 f93e 	bl	8002fa0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d00d      	beq.n	8002d46 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2e:	2b04      	cmp	r3, #4
 8002d30:	d107      	bne.n	8002d42 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d40:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e050      	b.n	8002de8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d46:	893b      	ldrh	r3, [r7, #8]
 8002d48:	b2da      	uxtb	r2, r3
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d52:	6a39      	ldr	r1, [r7, #32]
 8002d54:	68f8      	ldr	r0, [r7, #12]
 8002d56:	f000 f923 	bl	8002fa0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d00d      	beq.n	8002d7c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d64:	2b04      	cmp	r3, #4
 8002d66:	d107      	bne.n	8002d78 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d76:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e035      	b.n	8002de8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d8a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8e:	9300      	str	r3, [sp, #0]
 8002d90:	6a3b      	ldr	r3, [r7, #32]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d98:	68f8      	ldr	r0, [r7, #12]
 8002d9a:	f000 f82b 	bl	8002df4 <I2C_WaitOnFlagUntilTimeout>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d00d      	beq.n	8002dc0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002db2:	d103      	bne.n	8002dbc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e013      	b.n	8002de8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002dc0:	897b      	ldrh	r3, [r7, #10]
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	f043 0301 	orr.w	r3, r3, #1
 8002dc8:	b2da      	uxtb	r2, r3
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd2:	6a3a      	ldr	r2, [r7, #32]
 8002dd4:	4906      	ldr	r1, [pc, #24]	; (8002df0 <I2C_RequestMemoryRead+0x1cc>)
 8002dd6:	68f8      	ldr	r0, [r7, #12]
 8002dd8:	f000 f863 	bl	8002ea2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e000      	b.n	8002de8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3718      	adds	r7, #24
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	00010002 	.word	0x00010002

08002df4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	60b9      	str	r1, [r7, #8]
 8002dfe:	603b      	str	r3, [r7, #0]
 8002e00:	4613      	mov	r3, r2
 8002e02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e04:	e025      	b.n	8002e52 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e0c:	d021      	beq.n	8002e52 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e0e:	f7fe ff5b 	bl	8001cc8 <HAL_GetTick>
 8002e12:	4602      	mov	r2, r0
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	683a      	ldr	r2, [r7, #0]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d302      	bcc.n	8002e24 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d116      	bne.n	8002e52 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2200      	movs	r2, #0
 8002e28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2220      	movs	r2, #32
 8002e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3e:	f043 0220 	orr.w	r2, r3, #32
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e023      	b.n	8002e9a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	0c1b      	lsrs	r3, r3, #16
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d10d      	bne.n	8002e78 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	43da      	mvns	r2, r3
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	4013      	ands	r3, r2
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	bf0c      	ite	eq
 8002e6e:	2301      	moveq	r3, #1
 8002e70:	2300      	movne	r3, #0
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	461a      	mov	r2, r3
 8002e76:	e00c      	b.n	8002e92 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	699b      	ldr	r3, [r3, #24]
 8002e7e:	43da      	mvns	r2, r3
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	4013      	ands	r3, r2
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	bf0c      	ite	eq
 8002e8a:	2301      	moveq	r3, #1
 8002e8c:	2300      	movne	r3, #0
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	461a      	mov	r2, r3
 8002e92:	79fb      	ldrb	r3, [r7, #7]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d0b6      	beq.n	8002e06 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3710      	adds	r7, #16
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002ea2:	b580      	push	{r7, lr}
 8002ea4:	b084      	sub	sp, #16
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	60f8      	str	r0, [r7, #12]
 8002eaa:	60b9      	str	r1, [r7, #8]
 8002eac:	607a      	str	r2, [r7, #4]
 8002eae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002eb0:	e051      	b.n	8002f56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	695b      	ldr	r3, [r3, #20]
 8002eb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ebc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ec0:	d123      	bne.n	8002f0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ed0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002eda:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2220      	movs	r2, #32
 8002ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef6:	f043 0204 	orr.w	r2, r3, #4
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e046      	b.n	8002f98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f10:	d021      	beq.n	8002f56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f12:	f7fe fed9 	bl	8001cc8 <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d302      	bcc.n	8002f28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d116      	bne.n	8002f56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2220      	movs	r2, #32
 8002f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f42:	f043 0220 	orr.w	r2, r3, #32
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e020      	b.n	8002f98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	0c1b      	lsrs	r3, r3, #16
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d10c      	bne.n	8002f7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	695b      	ldr	r3, [r3, #20]
 8002f66:	43da      	mvns	r2, r3
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	bf14      	ite	ne
 8002f72:	2301      	movne	r3, #1
 8002f74:	2300      	moveq	r3, #0
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	e00b      	b.n	8002f92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	699b      	ldr	r3, [r3, #24]
 8002f80:	43da      	mvns	r2, r3
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	4013      	ands	r3, r2
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	bf14      	ite	ne
 8002f8c:	2301      	movne	r3, #1
 8002f8e:	2300      	moveq	r3, #0
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d18d      	bne.n	8002eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002f96:	2300      	movs	r3, #0
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3710      	adds	r7, #16
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fac:	e02d      	b.n	800300a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002fae:	68f8      	ldr	r0, [r7, #12]
 8002fb0:	f000 f8ce 	bl	8003150 <I2C_IsAcknowledgeFailed>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d001      	beq.n	8002fbe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e02d      	b.n	800301a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fc4:	d021      	beq.n	800300a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fc6:	f7fe fe7f 	bl	8001cc8 <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	68ba      	ldr	r2, [r7, #8]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d302      	bcc.n	8002fdc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d116      	bne.n	800300a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2220      	movs	r2, #32
 8002fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff6:	f043 0220 	orr.w	r2, r3, #32
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e007      	b.n	800301a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	695b      	ldr	r3, [r3, #20]
 8003010:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003014:	2b80      	cmp	r3, #128	; 0x80
 8003016:	d1ca      	bne.n	8002fae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	3710      	adds	r7, #16
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}

08003022 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003022:	b580      	push	{r7, lr}
 8003024:	b084      	sub	sp, #16
 8003026:	af00      	add	r7, sp, #0
 8003028:	60f8      	str	r0, [r7, #12]
 800302a:	60b9      	str	r1, [r7, #8]
 800302c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800302e:	e02d      	b.n	800308c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003030:	68f8      	ldr	r0, [r7, #12]
 8003032:	f000 f88d 	bl	8003150 <I2C_IsAcknowledgeFailed>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d001      	beq.n	8003040 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e02d      	b.n	800309c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003046:	d021      	beq.n	800308c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003048:	f7fe fe3e 	bl	8001cc8 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	68ba      	ldr	r2, [r7, #8]
 8003054:	429a      	cmp	r2, r3
 8003056:	d302      	bcc.n	800305e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d116      	bne.n	800308c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2200      	movs	r2, #0
 8003062:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2220      	movs	r2, #32
 8003068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003078:	f043 0220 	orr.w	r2, r3, #32
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2200      	movs	r2, #0
 8003084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e007      	b.n	800309c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	695b      	ldr	r3, [r3, #20]
 8003092:	f003 0304 	and.w	r3, r3, #4
 8003096:	2b04      	cmp	r3, #4
 8003098:	d1ca      	bne.n	8003030 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800309a:	2300      	movs	r3, #0
}
 800309c:	4618      	mov	r0, r3
 800309e:	3710      	adds	r7, #16
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80030b0:	e042      	b.n	8003138 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	695b      	ldr	r3, [r3, #20]
 80030b8:	f003 0310 	and.w	r3, r3, #16
 80030bc:	2b10      	cmp	r3, #16
 80030be:	d119      	bne.n	80030f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f06f 0210 	mvn.w	r2, #16
 80030c8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2200      	movs	r2, #0
 80030ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2220      	movs	r2, #32
 80030d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e029      	b.n	8003148 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030f4:	f7fe fde8 	bl	8001cc8 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	68ba      	ldr	r2, [r7, #8]
 8003100:	429a      	cmp	r2, r3
 8003102:	d302      	bcc.n	800310a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d116      	bne.n	8003138 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2200      	movs	r2, #0
 800310e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2220      	movs	r2, #32
 8003114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003124:	f043 0220 	orr.w	r2, r3, #32
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2200      	movs	r2, #0
 8003130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e007      	b.n	8003148 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	695b      	ldr	r3, [r3, #20]
 800313e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003142:	2b40      	cmp	r3, #64	; 0x40
 8003144:	d1b5      	bne.n	80030b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003146:	2300      	movs	r3, #0
}
 8003148:	4618      	mov	r0, r3
 800314a:	3710      	adds	r7, #16
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	695b      	ldr	r3, [r3, #20]
 800315e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003162:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003166:	d11b      	bne.n	80031a0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003170:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2220      	movs	r2, #32
 800317c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318c:	f043 0204 	orr.w	r2, r3, #4
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e000      	b.n	80031a2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	370c      	adds	r7, #12
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bc80      	pop	{r7}
 80031aa:	4770      	bx	lr

080031ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b086      	sub	sp, #24
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e272      	b.n	80036a4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0301 	and.w	r3, r3, #1
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	f000 8087 	beq.w	80032da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80031cc:	4b92      	ldr	r3, [pc, #584]	; (8003418 <HAL_RCC_OscConfig+0x26c>)
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f003 030c 	and.w	r3, r3, #12
 80031d4:	2b04      	cmp	r3, #4
 80031d6:	d00c      	beq.n	80031f2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80031d8:	4b8f      	ldr	r3, [pc, #572]	; (8003418 <HAL_RCC_OscConfig+0x26c>)
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f003 030c 	and.w	r3, r3, #12
 80031e0:	2b08      	cmp	r3, #8
 80031e2:	d112      	bne.n	800320a <HAL_RCC_OscConfig+0x5e>
 80031e4:	4b8c      	ldr	r3, [pc, #560]	; (8003418 <HAL_RCC_OscConfig+0x26c>)
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031f0:	d10b      	bne.n	800320a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031f2:	4b89      	ldr	r3, [pc, #548]	; (8003418 <HAL_RCC_OscConfig+0x26c>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d06c      	beq.n	80032d8 <HAL_RCC_OscConfig+0x12c>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d168      	bne.n	80032d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e24c      	b.n	80036a4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003212:	d106      	bne.n	8003222 <HAL_RCC_OscConfig+0x76>
 8003214:	4b80      	ldr	r3, [pc, #512]	; (8003418 <HAL_RCC_OscConfig+0x26c>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a7f      	ldr	r2, [pc, #508]	; (8003418 <HAL_RCC_OscConfig+0x26c>)
 800321a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800321e:	6013      	str	r3, [r2, #0]
 8003220:	e02e      	b.n	8003280 <HAL_RCC_OscConfig+0xd4>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d10c      	bne.n	8003244 <HAL_RCC_OscConfig+0x98>
 800322a:	4b7b      	ldr	r3, [pc, #492]	; (8003418 <HAL_RCC_OscConfig+0x26c>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a7a      	ldr	r2, [pc, #488]	; (8003418 <HAL_RCC_OscConfig+0x26c>)
 8003230:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003234:	6013      	str	r3, [r2, #0]
 8003236:	4b78      	ldr	r3, [pc, #480]	; (8003418 <HAL_RCC_OscConfig+0x26c>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a77      	ldr	r2, [pc, #476]	; (8003418 <HAL_RCC_OscConfig+0x26c>)
 800323c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003240:	6013      	str	r3, [r2, #0]
 8003242:	e01d      	b.n	8003280 <HAL_RCC_OscConfig+0xd4>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800324c:	d10c      	bne.n	8003268 <HAL_RCC_OscConfig+0xbc>
 800324e:	4b72      	ldr	r3, [pc, #456]	; (8003418 <HAL_RCC_OscConfig+0x26c>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a71      	ldr	r2, [pc, #452]	; (8003418 <HAL_RCC_OscConfig+0x26c>)
 8003254:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003258:	6013      	str	r3, [r2, #0]
 800325a:	4b6f      	ldr	r3, [pc, #444]	; (8003418 <HAL_RCC_OscConfig+0x26c>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a6e      	ldr	r2, [pc, #440]	; (8003418 <HAL_RCC_OscConfig+0x26c>)
 8003260:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003264:	6013      	str	r3, [r2, #0]
 8003266:	e00b      	b.n	8003280 <HAL_RCC_OscConfig+0xd4>
 8003268:	4b6b      	ldr	r3, [pc, #428]	; (8003418 <HAL_RCC_OscConfig+0x26c>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a6a      	ldr	r2, [pc, #424]	; (8003418 <HAL_RCC_OscConfig+0x26c>)
 800326e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003272:	6013      	str	r3, [r2, #0]
 8003274:	4b68      	ldr	r3, [pc, #416]	; (8003418 <HAL_RCC_OscConfig+0x26c>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a67      	ldr	r2, [pc, #412]	; (8003418 <HAL_RCC_OscConfig+0x26c>)
 800327a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800327e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d013      	beq.n	80032b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003288:	f7fe fd1e 	bl	8001cc8 <HAL_GetTick>
 800328c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800328e:	e008      	b.n	80032a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003290:	f7fe fd1a 	bl	8001cc8 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	2b64      	cmp	r3, #100	; 0x64
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e200      	b.n	80036a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032a2:	4b5d      	ldr	r3, [pc, #372]	; (8003418 <HAL_RCC_OscConfig+0x26c>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d0f0      	beq.n	8003290 <HAL_RCC_OscConfig+0xe4>
 80032ae:	e014      	b.n	80032da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b0:	f7fe fd0a 	bl	8001cc8 <HAL_GetTick>
 80032b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032b6:	e008      	b.n	80032ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032b8:	f7fe fd06 	bl	8001cc8 <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	2b64      	cmp	r3, #100	; 0x64
 80032c4:	d901      	bls.n	80032ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e1ec      	b.n	80036a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032ca:	4b53      	ldr	r3, [pc, #332]	; (8003418 <HAL_RCC_OscConfig+0x26c>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d1f0      	bne.n	80032b8 <HAL_RCC_OscConfig+0x10c>
 80032d6:	e000      	b.n	80032da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d063      	beq.n	80033ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032e6:	4b4c      	ldr	r3, [pc, #304]	; (8003418 <HAL_RCC_OscConfig+0x26c>)
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f003 030c 	and.w	r3, r3, #12
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d00b      	beq.n	800330a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80032f2:	4b49      	ldr	r3, [pc, #292]	; (8003418 <HAL_RCC_OscConfig+0x26c>)
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f003 030c 	and.w	r3, r3, #12
 80032fa:	2b08      	cmp	r3, #8
 80032fc:	d11c      	bne.n	8003338 <HAL_RCC_OscConfig+0x18c>
 80032fe:	4b46      	ldr	r3, [pc, #280]	; (8003418 <HAL_RCC_OscConfig+0x26c>)
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d116      	bne.n	8003338 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800330a:	4b43      	ldr	r3, [pc, #268]	; (8003418 <HAL_RCC_OscConfig+0x26c>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	2b00      	cmp	r3, #0
 8003314:	d005      	beq.n	8003322 <HAL_RCC_OscConfig+0x176>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	2b01      	cmp	r3, #1
 800331c:	d001      	beq.n	8003322 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e1c0      	b.n	80036a4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003322:	4b3d      	ldr	r3, [pc, #244]	; (8003418 <HAL_RCC_OscConfig+0x26c>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	695b      	ldr	r3, [r3, #20]
 800332e:	00db      	lsls	r3, r3, #3
 8003330:	4939      	ldr	r1, [pc, #228]	; (8003418 <HAL_RCC_OscConfig+0x26c>)
 8003332:	4313      	orrs	r3, r2
 8003334:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003336:	e03a      	b.n	80033ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	691b      	ldr	r3, [r3, #16]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d020      	beq.n	8003382 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003340:	4b36      	ldr	r3, [pc, #216]	; (800341c <HAL_RCC_OscConfig+0x270>)
 8003342:	2201      	movs	r2, #1
 8003344:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003346:	f7fe fcbf 	bl	8001cc8 <HAL_GetTick>
 800334a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800334c:	e008      	b.n	8003360 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800334e:	f7fe fcbb 	bl	8001cc8 <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	2b02      	cmp	r3, #2
 800335a:	d901      	bls.n	8003360 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e1a1      	b.n	80036a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003360:	4b2d      	ldr	r3, [pc, #180]	; (8003418 <HAL_RCC_OscConfig+0x26c>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0302 	and.w	r3, r3, #2
 8003368:	2b00      	cmp	r3, #0
 800336a:	d0f0      	beq.n	800334e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800336c:	4b2a      	ldr	r3, [pc, #168]	; (8003418 <HAL_RCC_OscConfig+0x26c>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	695b      	ldr	r3, [r3, #20]
 8003378:	00db      	lsls	r3, r3, #3
 800337a:	4927      	ldr	r1, [pc, #156]	; (8003418 <HAL_RCC_OscConfig+0x26c>)
 800337c:	4313      	orrs	r3, r2
 800337e:	600b      	str	r3, [r1, #0]
 8003380:	e015      	b.n	80033ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003382:	4b26      	ldr	r3, [pc, #152]	; (800341c <HAL_RCC_OscConfig+0x270>)
 8003384:	2200      	movs	r2, #0
 8003386:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003388:	f7fe fc9e 	bl	8001cc8 <HAL_GetTick>
 800338c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800338e:	e008      	b.n	80033a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003390:	f7fe fc9a 	bl	8001cc8 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	2b02      	cmp	r3, #2
 800339c:	d901      	bls.n	80033a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e180      	b.n	80036a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033a2:	4b1d      	ldr	r3, [pc, #116]	; (8003418 <HAL_RCC_OscConfig+0x26c>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0302 	and.w	r3, r3, #2
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d1f0      	bne.n	8003390 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0308 	and.w	r3, r3, #8
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d03a      	beq.n	8003430 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	699b      	ldr	r3, [r3, #24]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d019      	beq.n	80033f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033c2:	4b17      	ldr	r3, [pc, #92]	; (8003420 <HAL_RCC_OscConfig+0x274>)
 80033c4:	2201      	movs	r2, #1
 80033c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033c8:	f7fe fc7e 	bl	8001cc8 <HAL_GetTick>
 80033cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ce:	e008      	b.n	80033e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033d0:	f7fe fc7a 	bl	8001cc8 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e160      	b.n	80036a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033e2:	4b0d      	ldr	r3, [pc, #52]	; (8003418 <HAL_RCC_OscConfig+0x26c>)
 80033e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e6:	f003 0302 	and.w	r3, r3, #2
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d0f0      	beq.n	80033d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80033ee:	2001      	movs	r0, #1
 80033f0:	f000 fad8 	bl	80039a4 <RCC_Delay>
 80033f4:	e01c      	b.n	8003430 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033f6:	4b0a      	ldr	r3, [pc, #40]	; (8003420 <HAL_RCC_OscConfig+0x274>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033fc:	f7fe fc64 	bl	8001cc8 <HAL_GetTick>
 8003400:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003402:	e00f      	b.n	8003424 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003404:	f7fe fc60 	bl	8001cc8 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	2b02      	cmp	r3, #2
 8003410:	d908      	bls.n	8003424 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e146      	b.n	80036a4 <HAL_RCC_OscConfig+0x4f8>
 8003416:	bf00      	nop
 8003418:	40021000 	.word	0x40021000
 800341c:	42420000 	.word	0x42420000
 8003420:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003424:	4b92      	ldr	r3, [pc, #584]	; (8003670 <HAL_RCC_OscConfig+0x4c4>)
 8003426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003428:	f003 0302 	and.w	r3, r3, #2
 800342c:	2b00      	cmp	r3, #0
 800342e:	d1e9      	bne.n	8003404 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0304 	and.w	r3, r3, #4
 8003438:	2b00      	cmp	r3, #0
 800343a:	f000 80a6 	beq.w	800358a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800343e:	2300      	movs	r3, #0
 8003440:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003442:	4b8b      	ldr	r3, [pc, #556]	; (8003670 <HAL_RCC_OscConfig+0x4c4>)
 8003444:	69db      	ldr	r3, [r3, #28]
 8003446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d10d      	bne.n	800346a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800344e:	4b88      	ldr	r3, [pc, #544]	; (8003670 <HAL_RCC_OscConfig+0x4c4>)
 8003450:	69db      	ldr	r3, [r3, #28]
 8003452:	4a87      	ldr	r2, [pc, #540]	; (8003670 <HAL_RCC_OscConfig+0x4c4>)
 8003454:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003458:	61d3      	str	r3, [r2, #28]
 800345a:	4b85      	ldr	r3, [pc, #532]	; (8003670 <HAL_RCC_OscConfig+0x4c4>)
 800345c:	69db      	ldr	r3, [r3, #28]
 800345e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003462:	60bb      	str	r3, [r7, #8]
 8003464:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003466:	2301      	movs	r3, #1
 8003468:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800346a:	4b82      	ldr	r3, [pc, #520]	; (8003674 <HAL_RCC_OscConfig+0x4c8>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003472:	2b00      	cmp	r3, #0
 8003474:	d118      	bne.n	80034a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003476:	4b7f      	ldr	r3, [pc, #508]	; (8003674 <HAL_RCC_OscConfig+0x4c8>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a7e      	ldr	r2, [pc, #504]	; (8003674 <HAL_RCC_OscConfig+0x4c8>)
 800347c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003480:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003482:	f7fe fc21 	bl	8001cc8 <HAL_GetTick>
 8003486:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003488:	e008      	b.n	800349c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800348a:	f7fe fc1d 	bl	8001cc8 <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	2b64      	cmp	r3, #100	; 0x64
 8003496:	d901      	bls.n	800349c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e103      	b.n	80036a4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800349c:	4b75      	ldr	r3, [pc, #468]	; (8003674 <HAL_RCC_OscConfig+0x4c8>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d0f0      	beq.n	800348a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d106      	bne.n	80034be <HAL_RCC_OscConfig+0x312>
 80034b0:	4b6f      	ldr	r3, [pc, #444]	; (8003670 <HAL_RCC_OscConfig+0x4c4>)
 80034b2:	6a1b      	ldr	r3, [r3, #32]
 80034b4:	4a6e      	ldr	r2, [pc, #440]	; (8003670 <HAL_RCC_OscConfig+0x4c4>)
 80034b6:	f043 0301 	orr.w	r3, r3, #1
 80034ba:	6213      	str	r3, [r2, #32]
 80034bc:	e02d      	b.n	800351a <HAL_RCC_OscConfig+0x36e>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d10c      	bne.n	80034e0 <HAL_RCC_OscConfig+0x334>
 80034c6:	4b6a      	ldr	r3, [pc, #424]	; (8003670 <HAL_RCC_OscConfig+0x4c4>)
 80034c8:	6a1b      	ldr	r3, [r3, #32]
 80034ca:	4a69      	ldr	r2, [pc, #420]	; (8003670 <HAL_RCC_OscConfig+0x4c4>)
 80034cc:	f023 0301 	bic.w	r3, r3, #1
 80034d0:	6213      	str	r3, [r2, #32]
 80034d2:	4b67      	ldr	r3, [pc, #412]	; (8003670 <HAL_RCC_OscConfig+0x4c4>)
 80034d4:	6a1b      	ldr	r3, [r3, #32]
 80034d6:	4a66      	ldr	r2, [pc, #408]	; (8003670 <HAL_RCC_OscConfig+0x4c4>)
 80034d8:	f023 0304 	bic.w	r3, r3, #4
 80034dc:	6213      	str	r3, [r2, #32]
 80034de:	e01c      	b.n	800351a <HAL_RCC_OscConfig+0x36e>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	2b05      	cmp	r3, #5
 80034e6:	d10c      	bne.n	8003502 <HAL_RCC_OscConfig+0x356>
 80034e8:	4b61      	ldr	r3, [pc, #388]	; (8003670 <HAL_RCC_OscConfig+0x4c4>)
 80034ea:	6a1b      	ldr	r3, [r3, #32]
 80034ec:	4a60      	ldr	r2, [pc, #384]	; (8003670 <HAL_RCC_OscConfig+0x4c4>)
 80034ee:	f043 0304 	orr.w	r3, r3, #4
 80034f2:	6213      	str	r3, [r2, #32]
 80034f4:	4b5e      	ldr	r3, [pc, #376]	; (8003670 <HAL_RCC_OscConfig+0x4c4>)
 80034f6:	6a1b      	ldr	r3, [r3, #32]
 80034f8:	4a5d      	ldr	r2, [pc, #372]	; (8003670 <HAL_RCC_OscConfig+0x4c4>)
 80034fa:	f043 0301 	orr.w	r3, r3, #1
 80034fe:	6213      	str	r3, [r2, #32]
 8003500:	e00b      	b.n	800351a <HAL_RCC_OscConfig+0x36e>
 8003502:	4b5b      	ldr	r3, [pc, #364]	; (8003670 <HAL_RCC_OscConfig+0x4c4>)
 8003504:	6a1b      	ldr	r3, [r3, #32]
 8003506:	4a5a      	ldr	r2, [pc, #360]	; (8003670 <HAL_RCC_OscConfig+0x4c4>)
 8003508:	f023 0301 	bic.w	r3, r3, #1
 800350c:	6213      	str	r3, [r2, #32]
 800350e:	4b58      	ldr	r3, [pc, #352]	; (8003670 <HAL_RCC_OscConfig+0x4c4>)
 8003510:	6a1b      	ldr	r3, [r3, #32]
 8003512:	4a57      	ldr	r2, [pc, #348]	; (8003670 <HAL_RCC_OscConfig+0x4c4>)
 8003514:	f023 0304 	bic.w	r3, r3, #4
 8003518:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d015      	beq.n	800354e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003522:	f7fe fbd1 	bl	8001cc8 <HAL_GetTick>
 8003526:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003528:	e00a      	b.n	8003540 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800352a:	f7fe fbcd 	bl	8001cc8 <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	f241 3288 	movw	r2, #5000	; 0x1388
 8003538:	4293      	cmp	r3, r2
 800353a:	d901      	bls.n	8003540 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e0b1      	b.n	80036a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003540:	4b4b      	ldr	r3, [pc, #300]	; (8003670 <HAL_RCC_OscConfig+0x4c4>)
 8003542:	6a1b      	ldr	r3, [r3, #32]
 8003544:	f003 0302 	and.w	r3, r3, #2
 8003548:	2b00      	cmp	r3, #0
 800354a:	d0ee      	beq.n	800352a <HAL_RCC_OscConfig+0x37e>
 800354c:	e014      	b.n	8003578 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800354e:	f7fe fbbb 	bl	8001cc8 <HAL_GetTick>
 8003552:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003554:	e00a      	b.n	800356c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003556:	f7fe fbb7 	bl	8001cc8 <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	f241 3288 	movw	r2, #5000	; 0x1388
 8003564:	4293      	cmp	r3, r2
 8003566:	d901      	bls.n	800356c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003568:	2303      	movs	r3, #3
 800356a:	e09b      	b.n	80036a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800356c:	4b40      	ldr	r3, [pc, #256]	; (8003670 <HAL_RCC_OscConfig+0x4c4>)
 800356e:	6a1b      	ldr	r3, [r3, #32]
 8003570:	f003 0302 	and.w	r3, r3, #2
 8003574:	2b00      	cmp	r3, #0
 8003576:	d1ee      	bne.n	8003556 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003578:	7dfb      	ldrb	r3, [r7, #23]
 800357a:	2b01      	cmp	r3, #1
 800357c:	d105      	bne.n	800358a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800357e:	4b3c      	ldr	r3, [pc, #240]	; (8003670 <HAL_RCC_OscConfig+0x4c4>)
 8003580:	69db      	ldr	r3, [r3, #28]
 8003582:	4a3b      	ldr	r2, [pc, #236]	; (8003670 <HAL_RCC_OscConfig+0x4c4>)
 8003584:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003588:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	69db      	ldr	r3, [r3, #28]
 800358e:	2b00      	cmp	r3, #0
 8003590:	f000 8087 	beq.w	80036a2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003594:	4b36      	ldr	r3, [pc, #216]	; (8003670 <HAL_RCC_OscConfig+0x4c4>)
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f003 030c 	and.w	r3, r3, #12
 800359c:	2b08      	cmp	r3, #8
 800359e:	d061      	beq.n	8003664 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	69db      	ldr	r3, [r3, #28]
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d146      	bne.n	8003636 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035a8:	4b33      	ldr	r3, [pc, #204]	; (8003678 <HAL_RCC_OscConfig+0x4cc>)
 80035aa:	2200      	movs	r2, #0
 80035ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ae:	f7fe fb8b 	bl	8001cc8 <HAL_GetTick>
 80035b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035b4:	e008      	b.n	80035c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035b6:	f7fe fb87 	bl	8001cc8 <HAL_GetTick>
 80035ba:	4602      	mov	r2, r0
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	d901      	bls.n	80035c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	e06d      	b.n	80036a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035c8:	4b29      	ldr	r3, [pc, #164]	; (8003670 <HAL_RCC_OscConfig+0x4c4>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d1f0      	bne.n	80035b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6a1b      	ldr	r3, [r3, #32]
 80035d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035dc:	d108      	bne.n	80035f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80035de:	4b24      	ldr	r3, [pc, #144]	; (8003670 <HAL_RCC_OscConfig+0x4c4>)
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	4921      	ldr	r1, [pc, #132]	; (8003670 <HAL_RCC_OscConfig+0x4c4>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035f0:	4b1f      	ldr	r3, [pc, #124]	; (8003670 <HAL_RCC_OscConfig+0x4c4>)
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6a19      	ldr	r1, [r3, #32]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003600:	430b      	orrs	r3, r1
 8003602:	491b      	ldr	r1, [pc, #108]	; (8003670 <HAL_RCC_OscConfig+0x4c4>)
 8003604:	4313      	orrs	r3, r2
 8003606:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003608:	4b1b      	ldr	r3, [pc, #108]	; (8003678 <HAL_RCC_OscConfig+0x4cc>)
 800360a:	2201      	movs	r2, #1
 800360c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800360e:	f7fe fb5b 	bl	8001cc8 <HAL_GetTick>
 8003612:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003614:	e008      	b.n	8003628 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003616:	f7fe fb57 	bl	8001cc8 <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	2b02      	cmp	r3, #2
 8003622:	d901      	bls.n	8003628 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e03d      	b.n	80036a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003628:	4b11      	ldr	r3, [pc, #68]	; (8003670 <HAL_RCC_OscConfig+0x4c4>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d0f0      	beq.n	8003616 <HAL_RCC_OscConfig+0x46a>
 8003634:	e035      	b.n	80036a2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003636:	4b10      	ldr	r3, [pc, #64]	; (8003678 <HAL_RCC_OscConfig+0x4cc>)
 8003638:	2200      	movs	r2, #0
 800363a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800363c:	f7fe fb44 	bl	8001cc8 <HAL_GetTick>
 8003640:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003642:	e008      	b.n	8003656 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003644:	f7fe fb40 	bl	8001cc8 <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	2b02      	cmp	r3, #2
 8003650:	d901      	bls.n	8003656 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e026      	b.n	80036a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003656:	4b06      	ldr	r3, [pc, #24]	; (8003670 <HAL_RCC_OscConfig+0x4c4>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d1f0      	bne.n	8003644 <HAL_RCC_OscConfig+0x498>
 8003662:	e01e      	b.n	80036a2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	69db      	ldr	r3, [r3, #28]
 8003668:	2b01      	cmp	r3, #1
 800366a:	d107      	bne.n	800367c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e019      	b.n	80036a4 <HAL_RCC_OscConfig+0x4f8>
 8003670:	40021000 	.word	0x40021000
 8003674:	40007000 	.word	0x40007000
 8003678:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800367c:	4b0b      	ldr	r3, [pc, #44]	; (80036ac <HAL_RCC_OscConfig+0x500>)
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6a1b      	ldr	r3, [r3, #32]
 800368c:	429a      	cmp	r2, r3
 800368e:	d106      	bne.n	800369e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800369a:	429a      	cmp	r2, r3
 800369c:	d001      	beq.n	80036a2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e000      	b.n	80036a4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80036a2:	2300      	movs	r3, #0
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3718      	adds	r7, #24
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	40021000 	.word	0x40021000

080036b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d101      	bne.n	80036c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e0d0      	b.n	8003866 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036c4:	4b6a      	ldr	r3, [pc, #424]	; (8003870 <HAL_RCC_ClockConfig+0x1c0>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0307 	and.w	r3, r3, #7
 80036cc:	683a      	ldr	r2, [r7, #0]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d910      	bls.n	80036f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036d2:	4b67      	ldr	r3, [pc, #412]	; (8003870 <HAL_RCC_ClockConfig+0x1c0>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f023 0207 	bic.w	r2, r3, #7
 80036da:	4965      	ldr	r1, [pc, #404]	; (8003870 <HAL_RCC_ClockConfig+0x1c0>)
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	4313      	orrs	r3, r2
 80036e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036e2:	4b63      	ldr	r3, [pc, #396]	; (8003870 <HAL_RCC_ClockConfig+0x1c0>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0307 	and.w	r3, r3, #7
 80036ea:	683a      	ldr	r2, [r7, #0]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d001      	beq.n	80036f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e0b8      	b.n	8003866 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0302 	and.w	r3, r3, #2
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d020      	beq.n	8003742 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0304 	and.w	r3, r3, #4
 8003708:	2b00      	cmp	r3, #0
 800370a:	d005      	beq.n	8003718 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800370c:	4b59      	ldr	r3, [pc, #356]	; (8003874 <HAL_RCC_ClockConfig+0x1c4>)
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	4a58      	ldr	r2, [pc, #352]	; (8003874 <HAL_RCC_ClockConfig+0x1c4>)
 8003712:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003716:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0308 	and.w	r3, r3, #8
 8003720:	2b00      	cmp	r3, #0
 8003722:	d005      	beq.n	8003730 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003724:	4b53      	ldr	r3, [pc, #332]	; (8003874 <HAL_RCC_ClockConfig+0x1c4>)
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	4a52      	ldr	r2, [pc, #328]	; (8003874 <HAL_RCC_ClockConfig+0x1c4>)
 800372a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800372e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003730:	4b50      	ldr	r3, [pc, #320]	; (8003874 <HAL_RCC_ClockConfig+0x1c4>)
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	494d      	ldr	r1, [pc, #308]	; (8003874 <HAL_RCC_ClockConfig+0x1c4>)
 800373e:	4313      	orrs	r3, r2
 8003740:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0301 	and.w	r3, r3, #1
 800374a:	2b00      	cmp	r3, #0
 800374c:	d040      	beq.n	80037d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	2b01      	cmp	r3, #1
 8003754:	d107      	bne.n	8003766 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003756:	4b47      	ldr	r3, [pc, #284]	; (8003874 <HAL_RCC_ClockConfig+0x1c4>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d115      	bne.n	800378e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e07f      	b.n	8003866 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	2b02      	cmp	r3, #2
 800376c:	d107      	bne.n	800377e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800376e:	4b41      	ldr	r3, [pc, #260]	; (8003874 <HAL_RCC_ClockConfig+0x1c4>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d109      	bne.n	800378e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e073      	b.n	8003866 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800377e:	4b3d      	ldr	r3, [pc, #244]	; (8003874 <HAL_RCC_ClockConfig+0x1c4>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0302 	and.w	r3, r3, #2
 8003786:	2b00      	cmp	r3, #0
 8003788:	d101      	bne.n	800378e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e06b      	b.n	8003866 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800378e:	4b39      	ldr	r3, [pc, #228]	; (8003874 <HAL_RCC_ClockConfig+0x1c4>)
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f023 0203 	bic.w	r2, r3, #3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	4936      	ldr	r1, [pc, #216]	; (8003874 <HAL_RCC_ClockConfig+0x1c4>)
 800379c:	4313      	orrs	r3, r2
 800379e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037a0:	f7fe fa92 	bl	8001cc8 <HAL_GetTick>
 80037a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037a6:	e00a      	b.n	80037be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037a8:	f7fe fa8e 	bl	8001cc8 <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d901      	bls.n	80037be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e053      	b.n	8003866 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037be:	4b2d      	ldr	r3, [pc, #180]	; (8003874 <HAL_RCC_ClockConfig+0x1c4>)
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	f003 020c 	and.w	r2, r3, #12
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d1eb      	bne.n	80037a8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037d0:	4b27      	ldr	r3, [pc, #156]	; (8003870 <HAL_RCC_ClockConfig+0x1c0>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0307 	and.w	r3, r3, #7
 80037d8:	683a      	ldr	r2, [r7, #0]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d210      	bcs.n	8003800 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037de:	4b24      	ldr	r3, [pc, #144]	; (8003870 <HAL_RCC_ClockConfig+0x1c0>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f023 0207 	bic.w	r2, r3, #7
 80037e6:	4922      	ldr	r1, [pc, #136]	; (8003870 <HAL_RCC_ClockConfig+0x1c0>)
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ee:	4b20      	ldr	r3, [pc, #128]	; (8003870 <HAL_RCC_ClockConfig+0x1c0>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0307 	and.w	r3, r3, #7
 80037f6:	683a      	ldr	r2, [r7, #0]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d001      	beq.n	8003800 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e032      	b.n	8003866 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0304 	and.w	r3, r3, #4
 8003808:	2b00      	cmp	r3, #0
 800380a:	d008      	beq.n	800381e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800380c:	4b19      	ldr	r3, [pc, #100]	; (8003874 <HAL_RCC_ClockConfig+0x1c4>)
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	4916      	ldr	r1, [pc, #88]	; (8003874 <HAL_RCC_ClockConfig+0x1c4>)
 800381a:	4313      	orrs	r3, r2
 800381c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0308 	and.w	r3, r3, #8
 8003826:	2b00      	cmp	r3, #0
 8003828:	d009      	beq.n	800383e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800382a:	4b12      	ldr	r3, [pc, #72]	; (8003874 <HAL_RCC_ClockConfig+0x1c4>)
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	00db      	lsls	r3, r3, #3
 8003838:	490e      	ldr	r1, [pc, #56]	; (8003874 <HAL_RCC_ClockConfig+0x1c4>)
 800383a:	4313      	orrs	r3, r2
 800383c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800383e:	f000 f821 	bl	8003884 <HAL_RCC_GetSysClockFreq>
 8003842:	4602      	mov	r2, r0
 8003844:	4b0b      	ldr	r3, [pc, #44]	; (8003874 <HAL_RCC_ClockConfig+0x1c4>)
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	091b      	lsrs	r3, r3, #4
 800384a:	f003 030f 	and.w	r3, r3, #15
 800384e:	490a      	ldr	r1, [pc, #40]	; (8003878 <HAL_RCC_ClockConfig+0x1c8>)
 8003850:	5ccb      	ldrb	r3, [r1, r3]
 8003852:	fa22 f303 	lsr.w	r3, r2, r3
 8003856:	4a09      	ldr	r2, [pc, #36]	; (800387c <HAL_RCC_ClockConfig+0x1cc>)
 8003858:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800385a:	4b09      	ldr	r3, [pc, #36]	; (8003880 <HAL_RCC_ClockConfig+0x1d0>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4618      	mov	r0, r3
 8003860:	f7fe f9f0 	bl	8001c44 <HAL_InitTick>

  return HAL_OK;
 8003864:	2300      	movs	r3, #0
}
 8003866:	4618      	mov	r0, r3
 8003868:	3710      	adds	r7, #16
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	40022000 	.word	0x40022000
 8003874:	40021000 	.word	0x40021000
 8003878:	08008698 	.word	0x08008698
 800387c:	20000000 	.word	0x20000000
 8003880:	20000004 	.word	0x20000004

08003884 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003884:	b490      	push	{r4, r7}
 8003886:	b08a      	sub	sp, #40	; 0x28
 8003888:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800388a:	4b29      	ldr	r3, [pc, #164]	; (8003930 <HAL_RCC_GetSysClockFreq+0xac>)
 800388c:	1d3c      	adds	r4, r7, #4
 800388e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003890:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003894:	f240 2301 	movw	r3, #513	; 0x201
 8003898:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800389a:	2300      	movs	r3, #0
 800389c:	61fb      	str	r3, [r7, #28]
 800389e:	2300      	movs	r3, #0
 80038a0:	61bb      	str	r3, [r7, #24]
 80038a2:	2300      	movs	r3, #0
 80038a4:	627b      	str	r3, [r7, #36]	; 0x24
 80038a6:	2300      	movs	r3, #0
 80038a8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80038aa:	2300      	movs	r3, #0
 80038ac:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80038ae:	4b21      	ldr	r3, [pc, #132]	; (8003934 <HAL_RCC_GetSysClockFreq+0xb0>)
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	f003 030c 	and.w	r3, r3, #12
 80038ba:	2b04      	cmp	r3, #4
 80038bc:	d002      	beq.n	80038c4 <HAL_RCC_GetSysClockFreq+0x40>
 80038be:	2b08      	cmp	r3, #8
 80038c0:	d003      	beq.n	80038ca <HAL_RCC_GetSysClockFreq+0x46>
 80038c2:	e02b      	b.n	800391c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80038c4:	4b1c      	ldr	r3, [pc, #112]	; (8003938 <HAL_RCC_GetSysClockFreq+0xb4>)
 80038c6:	623b      	str	r3, [r7, #32]
      break;
 80038c8:	e02b      	b.n	8003922 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	0c9b      	lsrs	r3, r3, #18
 80038ce:	f003 030f 	and.w	r3, r3, #15
 80038d2:	3328      	adds	r3, #40	; 0x28
 80038d4:	443b      	add	r3, r7
 80038d6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80038da:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d012      	beq.n	800390c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80038e6:	4b13      	ldr	r3, [pc, #76]	; (8003934 <HAL_RCC_GetSysClockFreq+0xb0>)
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	0c5b      	lsrs	r3, r3, #17
 80038ec:	f003 0301 	and.w	r3, r3, #1
 80038f0:	3328      	adds	r3, #40	; 0x28
 80038f2:	443b      	add	r3, r7
 80038f4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80038f8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	4a0e      	ldr	r2, [pc, #56]	; (8003938 <HAL_RCC_GetSysClockFreq+0xb4>)
 80038fe:	fb03 f202 	mul.w	r2, r3, r2
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	fbb2 f3f3 	udiv	r3, r2, r3
 8003908:	627b      	str	r3, [r7, #36]	; 0x24
 800390a:	e004      	b.n	8003916 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	4a0b      	ldr	r2, [pc, #44]	; (800393c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003910:	fb02 f303 	mul.w	r3, r2, r3
 8003914:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003918:	623b      	str	r3, [r7, #32]
      break;
 800391a:	e002      	b.n	8003922 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800391c:	4b06      	ldr	r3, [pc, #24]	; (8003938 <HAL_RCC_GetSysClockFreq+0xb4>)
 800391e:	623b      	str	r3, [r7, #32]
      break;
 8003920:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003922:	6a3b      	ldr	r3, [r7, #32]
}
 8003924:	4618      	mov	r0, r3
 8003926:	3728      	adds	r7, #40	; 0x28
 8003928:	46bd      	mov	sp, r7
 800392a:	bc90      	pop	{r4, r7}
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop
 8003930:	08008688 	.word	0x08008688
 8003934:	40021000 	.word	0x40021000
 8003938:	007a1200 	.word	0x007a1200
 800393c:	003d0900 	.word	0x003d0900

08003940 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003940:	b480      	push	{r7}
 8003942:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003944:	4b02      	ldr	r3, [pc, #8]	; (8003950 <HAL_RCC_GetHCLKFreq+0x10>)
 8003946:	681b      	ldr	r3, [r3, #0]
}
 8003948:	4618      	mov	r0, r3
 800394a:	46bd      	mov	sp, r7
 800394c:	bc80      	pop	{r7}
 800394e:	4770      	bx	lr
 8003950:	20000000 	.word	0x20000000

08003954 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003958:	f7ff fff2 	bl	8003940 <HAL_RCC_GetHCLKFreq>
 800395c:	4602      	mov	r2, r0
 800395e:	4b05      	ldr	r3, [pc, #20]	; (8003974 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	0a1b      	lsrs	r3, r3, #8
 8003964:	f003 0307 	and.w	r3, r3, #7
 8003968:	4903      	ldr	r1, [pc, #12]	; (8003978 <HAL_RCC_GetPCLK1Freq+0x24>)
 800396a:	5ccb      	ldrb	r3, [r1, r3]
 800396c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003970:	4618      	mov	r0, r3
 8003972:	bd80      	pop	{r7, pc}
 8003974:	40021000 	.word	0x40021000
 8003978:	080086a8 	.word	0x080086a8

0800397c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003980:	f7ff ffde 	bl	8003940 <HAL_RCC_GetHCLKFreq>
 8003984:	4602      	mov	r2, r0
 8003986:	4b05      	ldr	r3, [pc, #20]	; (800399c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	0adb      	lsrs	r3, r3, #11
 800398c:	f003 0307 	and.w	r3, r3, #7
 8003990:	4903      	ldr	r1, [pc, #12]	; (80039a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003992:	5ccb      	ldrb	r3, [r1, r3]
 8003994:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003998:	4618      	mov	r0, r3
 800399a:	bd80      	pop	{r7, pc}
 800399c:	40021000 	.word	0x40021000
 80039a0:	080086a8 	.word	0x080086a8

080039a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b085      	sub	sp, #20
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80039ac:	4b0a      	ldr	r3, [pc, #40]	; (80039d8 <RCC_Delay+0x34>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a0a      	ldr	r2, [pc, #40]	; (80039dc <RCC_Delay+0x38>)
 80039b2:	fba2 2303 	umull	r2, r3, r2, r3
 80039b6:	0a5b      	lsrs	r3, r3, #9
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	fb02 f303 	mul.w	r3, r2, r3
 80039be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80039c0:	bf00      	nop
  }
  while (Delay --);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	1e5a      	subs	r2, r3, #1
 80039c6:	60fa      	str	r2, [r7, #12]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d1f9      	bne.n	80039c0 <RCC_Delay+0x1c>
}
 80039cc:	bf00      	nop
 80039ce:	bf00      	nop
 80039d0:	3714      	adds	r7, #20
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bc80      	pop	{r7}
 80039d6:	4770      	bx	lr
 80039d8:	20000000 	.word	0x20000000
 80039dc:	10624dd3 	.word	0x10624dd3

080039e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d101      	bne.n	80039f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e03f      	b.n	8003a72 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d106      	bne.n	8003a0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f7fd ffa6 	bl	8001958 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2224      	movs	r2, #36	; 0x24
 8003a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	68da      	ldr	r2, [r3, #12]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a22:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f000 f905 	bl	8003c34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	691a      	ldr	r2, [r3, #16]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a38:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	695a      	ldr	r2, [r3, #20]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a48:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68da      	ldr	r2, [r3, #12]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a58:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2220      	movs	r2, #32
 8003a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2220      	movs	r2, #32
 8003a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3708      	adds	r7, #8
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}

08003a7a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a7a:	b580      	push	{r7, lr}
 8003a7c:	b08a      	sub	sp, #40	; 0x28
 8003a7e:	af02      	add	r7, sp, #8
 8003a80:	60f8      	str	r0, [r7, #12]
 8003a82:	60b9      	str	r1, [r7, #8]
 8003a84:	603b      	str	r3, [r7, #0]
 8003a86:	4613      	mov	r3, r2
 8003a88:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	2b20      	cmp	r3, #32
 8003a98:	d17c      	bne.n	8003b94 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d002      	beq.n	8003aa6 <HAL_UART_Transmit+0x2c>
 8003aa0:	88fb      	ldrh	r3, [r7, #6]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d101      	bne.n	8003aaa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e075      	b.n	8003b96 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d101      	bne.n	8003ab8 <HAL_UART_Transmit+0x3e>
 8003ab4:	2302      	movs	r3, #2
 8003ab6:	e06e      	b.n	8003b96 <HAL_UART_Transmit+0x11c>
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2221      	movs	r2, #33	; 0x21
 8003aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ace:	f7fe f8fb 	bl	8001cc8 <HAL_GetTick>
 8003ad2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	88fa      	ldrh	r2, [r7, #6]
 8003ad8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	88fa      	ldrh	r2, [r7, #6]
 8003ade:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ae8:	d108      	bne.n	8003afc <HAL_UART_Transmit+0x82>
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d104      	bne.n	8003afc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003af2:	2300      	movs	r3, #0
 8003af4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	61bb      	str	r3, [r7, #24]
 8003afa:	e003      	b.n	8003b04 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b00:	2300      	movs	r3, #0
 8003b02:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003b0c:	e02a      	b.n	8003b64 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	9300      	str	r3, [sp, #0]
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	2200      	movs	r2, #0
 8003b16:	2180      	movs	r1, #128	; 0x80
 8003b18:	68f8      	ldr	r0, [r7, #12]
 8003b1a:	f000 f840 	bl	8003b9e <UART_WaitOnFlagUntilTimeout>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d001      	beq.n	8003b28 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e036      	b.n	8003b96 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d10b      	bne.n	8003b46 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	881b      	ldrh	r3, [r3, #0]
 8003b32:	461a      	mov	r2, r3
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b3c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003b3e:	69bb      	ldr	r3, [r7, #24]
 8003b40:	3302      	adds	r3, #2
 8003b42:	61bb      	str	r3, [r7, #24]
 8003b44:	e007      	b.n	8003b56 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	781a      	ldrb	r2, [r3, #0]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	3301      	adds	r3, #1
 8003b54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	3b01      	subs	r3, #1
 8003b5e:	b29a      	uxth	r2, r3
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d1cf      	bne.n	8003b0e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	9300      	str	r3, [sp, #0]
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	2200      	movs	r2, #0
 8003b76:	2140      	movs	r1, #64	; 0x40
 8003b78:	68f8      	ldr	r0, [r7, #12]
 8003b7a:	f000 f810 	bl	8003b9e <UART_WaitOnFlagUntilTimeout>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d001      	beq.n	8003b88 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	e006      	b.n	8003b96 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2220      	movs	r2, #32
 8003b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003b90:	2300      	movs	r3, #0
 8003b92:	e000      	b.n	8003b96 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003b94:	2302      	movs	r3, #2
  }
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3720      	adds	r7, #32
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}

08003b9e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003b9e:	b580      	push	{r7, lr}
 8003ba0:	b084      	sub	sp, #16
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	60f8      	str	r0, [r7, #12]
 8003ba6:	60b9      	str	r1, [r7, #8]
 8003ba8:	603b      	str	r3, [r7, #0]
 8003baa:	4613      	mov	r3, r2
 8003bac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bae:	e02c      	b.n	8003c0a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bb6:	d028      	beq.n	8003c0a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d007      	beq.n	8003bce <UART_WaitOnFlagUntilTimeout+0x30>
 8003bbe:	f7fe f883 	bl	8001cc8 <HAL_GetTick>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	69ba      	ldr	r2, [r7, #24]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d21d      	bcs.n	8003c0a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68da      	ldr	r2, [r3, #12]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003bdc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	695a      	ldr	r2, [r3, #20]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f022 0201 	bic.w	r2, r2, #1
 8003bec:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2220      	movs	r2, #32
 8003bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2220      	movs	r2, #32
 8003bfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e00f      	b.n	8003c2a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	4013      	ands	r3, r2
 8003c14:	68ba      	ldr	r2, [r7, #8]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	bf0c      	ite	eq
 8003c1a:	2301      	moveq	r3, #1
 8003c1c:	2300      	movne	r3, #0
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	461a      	mov	r2, r3
 8003c22:	79fb      	ldrb	r3, [r7, #7]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d0c3      	beq.n	8003bb0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3710      	adds	r7, #16
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
	...

08003c34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	68da      	ldr	r2, [r3, #12]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	430a      	orrs	r2, r1
 8003c50:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	689a      	ldr	r2, [r3, #8]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	431a      	orrs	r2, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	695b      	ldr	r3, [r3, #20]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003c6e:	f023 030c 	bic.w	r3, r3, #12
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	6812      	ldr	r2, [r2, #0]
 8003c76:	68b9      	ldr	r1, [r7, #8]
 8003c78:	430b      	orrs	r3, r1
 8003c7a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	695b      	ldr	r3, [r3, #20]
 8003c82:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	699a      	ldr	r2, [r3, #24]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	430a      	orrs	r2, r1
 8003c90:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a2c      	ldr	r2, [pc, #176]	; (8003d48 <UART_SetConfig+0x114>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d103      	bne.n	8003ca4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003c9c:	f7ff fe6e 	bl	800397c <HAL_RCC_GetPCLK2Freq>
 8003ca0:	60f8      	str	r0, [r7, #12]
 8003ca2:	e002      	b.n	8003caa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003ca4:	f7ff fe56 	bl	8003954 <HAL_RCC_GetPCLK1Freq>
 8003ca8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003caa:	68fa      	ldr	r2, [r7, #12]
 8003cac:	4613      	mov	r3, r2
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	4413      	add	r3, r2
 8003cb2:	009a      	lsls	r2, r3, #2
 8003cb4:	441a      	add	r2, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cc0:	4a22      	ldr	r2, [pc, #136]	; (8003d4c <UART_SetConfig+0x118>)
 8003cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc6:	095b      	lsrs	r3, r3, #5
 8003cc8:	0119      	lsls	r1, r3, #4
 8003cca:	68fa      	ldr	r2, [r7, #12]
 8003ccc:	4613      	mov	r3, r2
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	4413      	add	r3, r2
 8003cd2:	009a      	lsls	r2, r3, #2
 8003cd4:	441a      	add	r2, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ce0:	4b1a      	ldr	r3, [pc, #104]	; (8003d4c <UART_SetConfig+0x118>)
 8003ce2:	fba3 0302 	umull	r0, r3, r3, r2
 8003ce6:	095b      	lsrs	r3, r3, #5
 8003ce8:	2064      	movs	r0, #100	; 0x64
 8003cea:	fb00 f303 	mul.w	r3, r0, r3
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	011b      	lsls	r3, r3, #4
 8003cf2:	3332      	adds	r3, #50	; 0x32
 8003cf4:	4a15      	ldr	r2, [pc, #84]	; (8003d4c <UART_SetConfig+0x118>)
 8003cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cfa:	095b      	lsrs	r3, r3, #5
 8003cfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d00:	4419      	add	r1, r3
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	4613      	mov	r3, r2
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	4413      	add	r3, r2
 8003d0a:	009a      	lsls	r2, r3, #2
 8003d0c:	441a      	add	r2, r3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d18:	4b0c      	ldr	r3, [pc, #48]	; (8003d4c <UART_SetConfig+0x118>)
 8003d1a:	fba3 0302 	umull	r0, r3, r3, r2
 8003d1e:	095b      	lsrs	r3, r3, #5
 8003d20:	2064      	movs	r0, #100	; 0x64
 8003d22:	fb00 f303 	mul.w	r3, r0, r3
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	011b      	lsls	r3, r3, #4
 8003d2a:	3332      	adds	r3, #50	; 0x32
 8003d2c:	4a07      	ldr	r2, [pc, #28]	; (8003d4c <UART_SetConfig+0x118>)
 8003d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d32:	095b      	lsrs	r3, r3, #5
 8003d34:	f003 020f 	and.w	r2, r3, #15
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	440a      	add	r2, r1
 8003d3e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003d40:	bf00      	nop
 8003d42:	3710      	adds	r7, #16
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	40013800 	.word	0x40013800
 8003d4c:	51eb851f 	.word	0x51eb851f

08003d50 <__errno>:
 8003d50:	4b01      	ldr	r3, [pc, #4]	; (8003d58 <__errno+0x8>)
 8003d52:	6818      	ldr	r0, [r3, #0]
 8003d54:	4770      	bx	lr
 8003d56:	bf00      	nop
 8003d58:	2000000c 	.word	0x2000000c

08003d5c <__libc_init_array>:
 8003d5c:	b570      	push	{r4, r5, r6, lr}
 8003d5e:	2600      	movs	r6, #0
 8003d60:	4d0c      	ldr	r5, [pc, #48]	; (8003d94 <__libc_init_array+0x38>)
 8003d62:	4c0d      	ldr	r4, [pc, #52]	; (8003d98 <__libc_init_array+0x3c>)
 8003d64:	1b64      	subs	r4, r4, r5
 8003d66:	10a4      	asrs	r4, r4, #2
 8003d68:	42a6      	cmp	r6, r4
 8003d6a:	d109      	bne.n	8003d80 <__libc_init_array+0x24>
 8003d6c:	f004 fc52 	bl	8008614 <_init>
 8003d70:	2600      	movs	r6, #0
 8003d72:	4d0a      	ldr	r5, [pc, #40]	; (8003d9c <__libc_init_array+0x40>)
 8003d74:	4c0a      	ldr	r4, [pc, #40]	; (8003da0 <__libc_init_array+0x44>)
 8003d76:	1b64      	subs	r4, r4, r5
 8003d78:	10a4      	asrs	r4, r4, #2
 8003d7a:	42a6      	cmp	r6, r4
 8003d7c:	d105      	bne.n	8003d8a <__libc_init_array+0x2e>
 8003d7e:	bd70      	pop	{r4, r5, r6, pc}
 8003d80:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d84:	4798      	blx	r3
 8003d86:	3601      	adds	r6, #1
 8003d88:	e7ee      	b.n	8003d68 <__libc_init_array+0xc>
 8003d8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d8e:	4798      	blx	r3
 8003d90:	3601      	adds	r6, #1
 8003d92:	e7f2      	b.n	8003d7a <__libc_init_array+0x1e>
 8003d94:	08008b54 	.word	0x08008b54
 8003d98:	08008b54 	.word	0x08008b54
 8003d9c:	08008b54 	.word	0x08008b54
 8003da0:	08008b58 	.word	0x08008b58

08003da4 <memset>:
 8003da4:	4603      	mov	r3, r0
 8003da6:	4402      	add	r2, r0
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d100      	bne.n	8003dae <memset+0xa>
 8003dac:	4770      	bx	lr
 8003dae:	f803 1b01 	strb.w	r1, [r3], #1
 8003db2:	e7f9      	b.n	8003da8 <memset+0x4>

08003db4 <__cvt>:
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003dba:	461f      	mov	r7, r3
 8003dbc:	bfbb      	ittet	lt
 8003dbe:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003dc2:	461f      	movlt	r7, r3
 8003dc4:	2300      	movge	r3, #0
 8003dc6:	232d      	movlt	r3, #45	; 0x2d
 8003dc8:	b088      	sub	sp, #32
 8003dca:	4614      	mov	r4, r2
 8003dcc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003dce:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003dd0:	7013      	strb	r3, [r2, #0]
 8003dd2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003dd4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003dd8:	f023 0820 	bic.w	r8, r3, #32
 8003ddc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003de0:	d005      	beq.n	8003dee <__cvt+0x3a>
 8003de2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003de6:	d100      	bne.n	8003dea <__cvt+0x36>
 8003de8:	3501      	adds	r5, #1
 8003dea:	2302      	movs	r3, #2
 8003dec:	e000      	b.n	8003df0 <__cvt+0x3c>
 8003dee:	2303      	movs	r3, #3
 8003df0:	aa07      	add	r2, sp, #28
 8003df2:	9204      	str	r2, [sp, #16]
 8003df4:	aa06      	add	r2, sp, #24
 8003df6:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003dfa:	e9cd 3500 	strd	r3, r5, [sp]
 8003dfe:	4622      	mov	r2, r4
 8003e00:	463b      	mov	r3, r7
 8003e02:	f001 fd85 	bl	8005910 <_dtoa_r>
 8003e06:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003e0a:	4606      	mov	r6, r0
 8003e0c:	d102      	bne.n	8003e14 <__cvt+0x60>
 8003e0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003e10:	07db      	lsls	r3, r3, #31
 8003e12:	d522      	bpl.n	8003e5a <__cvt+0xa6>
 8003e14:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003e18:	eb06 0905 	add.w	r9, r6, r5
 8003e1c:	d110      	bne.n	8003e40 <__cvt+0x8c>
 8003e1e:	7833      	ldrb	r3, [r6, #0]
 8003e20:	2b30      	cmp	r3, #48	; 0x30
 8003e22:	d10a      	bne.n	8003e3a <__cvt+0x86>
 8003e24:	2200      	movs	r2, #0
 8003e26:	2300      	movs	r3, #0
 8003e28:	4620      	mov	r0, r4
 8003e2a:	4639      	mov	r1, r7
 8003e2c:	f7fc fdbc 	bl	80009a8 <__aeabi_dcmpeq>
 8003e30:	b918      	cbnz	r0, 8003e3a <__cvt+0x86>
 8003e32:	f1c5 0501 	rsb	r5, r5, #1
 8003e36:	f8ca 5000 	str.w	r5, [sl]
 8003e3a:	f8da 3000 	ldr.w	r3, [sl]
 8003e3e:	4499      	add	r9, r3
 8003e40:	2200      	movs	r2, #0
 8003e42:	2300      	movs	r3, #0
 8003e44:	4620      	mov	r0, r4
 8003e46:	4639      	mov	r1, r7
 8003e48:	f7fc fdae 	bl	80009a8 <__aeabi_dcmpeq>
 8003e4c:	b108      	cbz	r0, 8003e52 <__cvt+0x9e>
 8003e4e:	f8cd 901c 	str.w	r9, [sp, #28]
 8003e52:	2230      	movs	r2, #48	; 0x30
 8003e54:	9b07      	ldr	r3, [sp, #28]
 8003e56:	454b      	cmp	r3, r9
 8003e58:	d307      	bcc.n	8003e6a <__cvt+0xb6>
 8003e5a:	4630      	mov	r0, r6
 8003e5c:	9b07      	ldr	r3, [sp, #28]
 8003e5e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003e60:	1b9b      	subs	r3, r3, r6
 8003e62:	6013      	str	r3, [r2, #0]
 8003e64:	b008      	add	sp, #32
 8003e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e6a:	1c59      	adds	r1, r3, #1
 8003e6c:	9107      	str	r1, [sp, #28]
 8003e6e:	701a      	strb	r2, [r3, #0]
 8003e70:	e7f0      	b.n	8003e54 <__cvt+0xa0>

08003e72 <__exponent>:
 8003e72:	4603      	mov	r3, r0
 8003e74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e76:	2900      	cmp	r1, #0
 8003e78:	f803 2b02 	strb.w	r2, [r3], #2
 8003e7c:	bfb6      	itet	lt
 8003e7e:	222d      	movlt	r2, #45	; 0x2d
 8003e80:	222b      	movge	r2, #43	; 0x2b
 8003e82:	4249      	neglt	r1, r1
 8003e84:	2909      	cmp	r1, #9
 8003e86:	7042      	strb	r2, [r0, #1]
 8003e88:	dd2b      	ble.n	8003ee2 <__exponent+0x70>
 8003e8a:	f10d 0407 	add.w	r4, sp, #7
 8003e8e:	46a4      	mov	ip, r4
 8003e90:	270a      	movs	r7, #10
 8003e92:	fb91 f6f7 	sdiv	r6, r1, r7
 8003e96:	460a      	mov	r2, r1
 8003e98:	46a6      	mov	lr, r4
 8003e9a:	fb07 1516 	mls	r5, r7, r6, r1
 8003e9e:	2a63      	cmp	r2, #99	; 0x63
 8003ea0:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8003ea4:	4631      	mov	r1, r6
 8003ea6:	f104 34ff 	add.w	r4, r4, #4294967295
 8003eaa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003eae:	dcf0      	bgt.n	8003e92 <__exponent+0x20>
 8003eb0:	3130      	adds	r1, #48	; 0x30
 8003eb2:	f1ae 0502 	sub.w	r5, lr, #2
 8003eb6:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003eba:	4629      	mov	r1, r5
 8003ebc:	1c44      	adds	r4, r0, #1
 8003ebe:	4561      	cmp	r1, ip
 8003ec0:	d30a      	bcc.n	8003ed8 <__exponent+0x66>
 8003ec2:	f10d 0209 	add.w	r2, sp, #9
 8003ec6:	eba2 020e 	sub.w	r2, r2, lr
 8003eca:	4565      	cmp	r5, ip
 8003ecc:	bf88      	it	hi
 8003ece:	2200      	movhi	r2, #0
 8003ed0:	4413      	add	r3, r2
 8003ed2:	1a18      	subs	r0, r3, r0
 8003ed4:	b003      	add	sp, #12
 8003ed6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ed8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003edc:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003ee0:	e7ed      	b.n	8003ebe <__exponent+0x4c>
 8003ee2:	2330      	movs	r3, #48	; 0x30
 8003ee4:	3130      	adds	r1, #48	; 0x30
 8003ee6:	7083      	strb	r3, [r0, #2]
 8003ee8:	70c1      	strb	r1, [r0, #3]
 8003eea:	1d03      	adds	r3, r0, #4
 8003eec:	e7f1      	b.n	8003ed2 <__exponent+0x60>
	...

08003ef0 <_printf_float>:
 8003ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ef4:	b091      	sub	sp, #68	; 0x44
 8003ef6:	460c      	mov	r4, r1
 8003ef8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003efc:	4616      	mov	r6, r2
 8003efe:	461f      	mov	r7, r3
 8003f00:	4605      	mov	r5, r0
 8003f02:	f002 fe59 	bl	8006bb8 <_localeconv_r>
 8003f06:	6803      	ldr	r3, [r0, #0]
 8003f08:	4618      	mov	r0, r3
 8003f0a:	9309      	str	r3, [sp, #36]	; 0x24
 8003f0c:	f7fc f920 	bl	8000150 <strlen>
 8003f10:	2300      	movs	r3, #0
 8003f12:	930e      	str	r3, [sp, #56]	; 0x38
 8003f14:	f8d8 3000 	ldr.w	r3, [r8]
 8003f18:	900a      	str	r0, [sp, #40]	; 0x28
 8003f1a:	3307      	adds	r3, #7
 8003f1c:	f023 0307 	bic.w	r3, r3, #7
 8003f20:	f103 0208 	add.w	r2, r3, #8
 8003f24:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003f28:	f8d4 b000 	ldr.w	fp, [r4]
 8003f2c:	f8c8 2000 	str.w	r2, [r8]
 8003f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f34:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003f38:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8003f3c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8003f40:	930b      	str	r3, [sp, #44]	; 0x2c
 8003f42:	f04f 32ff 	mov.w	r2, #4294967295
 8003f46:	4640      	mov	r0, r8
 8003f48:	4b9c      	ldr	r3, [pc, #624]	; (80041bc <_printf_float+0x2cc>)
 8003f4a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003f4c:	f7fc fd5e 	bl	8000a0c <__aeabi_dcmpun>
 8003f50:	bb70      	cbnz	r0, 8003fb0 <_printf_float+0xc0>
 8003f52:	f04f 32ff 	mov.w	r2, #4294967295
 8003f56:	4640      	mov	r0, r8
 8003f58:	4b98      	ldr	r3, [pc, #608]	; (80041bc <_printf_float+0x2cc>)
 8003f5a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003f5c:	f7fc fd38 	bl	80009d0 <__aeabi_dcmple>
 8003f60:	bb30      	cbnz	r0, 8003fb0 <_printf_float+0xc0>
 8003f62:	2200      	movs	r2, #0
 8003f64:	2300      	movs	r3, #0
 8003f66:	4640      	mov	r0, r8
 8003f68:	4651      	mov	r1, sl
 8003f6a:	f7fc fd27 	bl	80009bc <__aeabi_dcmplt>
 8003f6e:	b110      	cbz	r0, 8003f76 <_printf_float+0x86>
 8003f70:	232d      	movs	r3, #45	; 0x2d
 8003f72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f76:	4b92      	ldr	r3, [pc, #584]	; (80041c0 <_printf_float+0x2d0>)
 8003f78:	4892      	ldr	r0, [pc, #584]	; (80041c4 <_printf_float+0x2d4>)
 8003f7a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003f7e:	bf94      	ite	ls
 8003f80:	4698      	movls	r8, r3
 8003f82:	4680      	movhi	r8, r0
 8003f84:	2303      	movs	r3, #3
 8003f86:	f04f 0a00 	mov.w	sl, #0
 8003f8a:	6123      	str	r3, [r4, #16]
 8003f8c:	f02b 0304 	bic.w	r3, fp, #4
 8003f90:	6023      	str	r3, [r4, #0]
 8003f92:	4633      	mov	r3, r6
 8003f94:	4621      	mov	r1, r4
 8003f96:	4628      	mov	r0, r5
 8003f98:	9700      	str	r7, [sp, #0]
 8003f9a:	aa0f      	add	r2, sp, #60	; 0x3c
 8003f9c:	f000 f9d4 	bl	8004348 <_printf_common>
 8003fa0:	3001      	adds	r0, #1
 8003fa2:	f040 8090 	bne.w	80040c6 <_printf_float+0x1d6>
 8003fa6:	f04f 30ff 	mov.w	r0, #4294967295
 8003faa:	b011      	add	sp, #68	; 0x44
 8003fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fb0:	4642      	mov	r2, r8
 8003fb2:	4653      	mov	r3, sl
 8003fb4:	4640      	mov	r0, r8
 8003fb6:	4651      	mov	r1, sl
 8003fb8:	f7fc fd28 	bl	8000a0c <__aeabi_dcmpun>
 8003fbc:	b148      	cbz	r0, 8003fd2 <_printf_float+0xe2>
 8003fbe:	f1ba 0f00 	cmp.w	sl, #0
 8003fc2:	bfb8      	it	lt
 8003fc4:	232d      	movlt	r3, #45	; 0x2d
 8003fc6:	4880      	ldr	r0, [pc, #512]	; (80041c8 <_printf_float+0x2d8>)
 8003fc8:	bfb8      	it	lt
 8003fca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003fce:	4b7f      	ldr	r3, [pc, #508]	; (80041cc <_printf_float+0x2dc>)
 8003fd0:	e7d3      	b.n	8003f7a <_printf_float+0x8a>
 8003fd2:	6863      	ldr	r3, [r4, #4]
 8003fd4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003fd8:	1c5a      	adds	r2, r3, #1
 8003fda:	d142      	bne.n	8004062 <_printf_float+0x172>
 8003fdc:	2306      	movs	r3, #6
 8003fde:	6063      	str	r3, [r4, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	9206      	str	r2, [sp, #24]
 8003fe4:	aa0e      	add	r2, sp, #56	; 0x38
 8003fe6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003fea:	aa0d      	add	r2, sp, #52	; 0x34
 8003fec:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003ff0:	9203      	str	r2, [sp, #12]
 8003ff2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003ff6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003ffa:	6023      	str	r3, [r4, #0]
 8003ffc:	6863      	ldr	r3, [r4, #4]
 8003ffe:	4642      	mov	r2, r8
 8004000:	9300      	str	r3, [sp, #0]
 8004002:	4628      	mov	r0, r5
 8004004:	4653      	mov	r3, sl
 8004006:	910b      	str	r1, [sp, #44]	; 0x2c
 8004008:	f7ff fed4 	bl	8003db4 <__cvt>
 800400c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800400e:	4680      	mov	r8, r0
 8004010:	2947      	cmp	r1, #71	; 0x47
 8004012:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004014:	d108      	bne.n	8004028 <_printf_float+0x138>
 8004016:	1cc8      	adds	r0, r1, #3
 8004018:	db02      	blt.n	8004020 <_printf_float+0x130>
 800401a:	6863      	ldr	r3, [r4, #4]
 800401c:	4299      	cmp	r1, r3
 800401e:	dd40      	ble.n	80040a2 <_printf_float+0x1b2>
 8004020:	f1a9 0902 	sub.w	r9, r9, #2
 8004024:	fa5f f989 	uxtb.w	r9, r9
 8004028:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800402c:	d81f      	bhi.n	800406e <_printf_float+0x17e>
 800402e:	464a      	mov	r2, r9
 8004030:	3901      	subs	r1, #1
 8004032:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004036:	910d      	str	r1, [sp, #52]	; 0x34
 8004038:	f7ff ff1b 	bl	8003e72 <__exponent>
 800403c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800403e:	4682      	mov	sl, r0
 8004040:	1813      	adds	r3, r2, r0
 8004042:	2a01      	cmp	r2, #1
 8004044:	6123      	str	r3, [r4, #16]
 8004046:	dc02      	bgt.n	800404e <_printf_float+0x15e>
 8004048:	6822      	ldr	r2, [r4, #0]
 800404a:	07d2      	lsls	r2, r2, #31
 800404c:	d501      	bpl.n	8004052 <_printf_float+0x162>
 800404e:	3301      	adds	r3, #1
 8004050:	6123      	str	r3, [r4, #16]
 8004052:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004056:	2b00      	cmp	r3, #0
 8004058:	d09b      	beq.n	8003f92 <_printf_float+0xa2>
 800405a:	232d      	movs	r3, #45	; 0x2d
 800405c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004060:	e797      	b.n	8003f92 <_printf_float+0xa2>
 8004062:	2947      	cmp	r1, #71	; 0x47
 8004064:	d1bc      	bne.n	8003fe0 <_printf_float+0xf0>
 8004066:	2b00      	cmp	r3, #0
 8004068:	d1ba      	bne.n	8003fe0 <_printf_float+0xf0>
 800406a:	2301      	movs	r3, #1
 800406c:	e7b7      	b.n	8003fde <_printf_float+0xee>
 800406e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004072:	d118      	bne.n	80040a6 <_printf_float+0x1b6>
 8004074:	2900      	cmp	r1, #0
 8004076:	6863      	ldr	r3, [r4, #4]
 8004078:	dd0b      	ble.n	8004092 <_printf_float+0x1a2>
 800407a:	6121      	str	r1, [r4, #16]
 800407c:	b913      	cbnz	r3, 8004084 <_printf_float+0x194>
 800407e:	6822      	ldr	r2, [r4, #0]
 8004080:	07d0      	lsls	r0, r2, #31
 8004082:	d502      	bpl.n	800408a <_printf_float+0x19a>
 8004084:	3301      	adds	r3, #1
 8004086:	440b      	add	r3, r1
 8004088:	6123      	str	r3, [r4, #16]
 800408a:	f04f 0a00 	mov.w	sl, #0
 800408e:	65a1      	str	r1, [r4, #88]	; 0x58
 8004090:	e7df      	b.n	8004052 <_printf_float+0x162>
 8004092:	b913      	cbnz	r3, 800409a <_printf_float+0x1aa>
 8004094:	6822      	ldr	r2, [r4, #0]
 8004096:	07d2      	lsls	r2, r2, #31
 8004098:	d501      	bpl.n	800409e <_printf_float+0x1ae>
 800409a:	3302      	adds	r3, #2
 800409c:	e7f4      	b.n	8004088 <_printf_float+0x198>
 800409e:	2301      	movs	r3, #1
 80040a0:	e7f2      	b.n	8004088 <_printf_float+0x198>
 80040a2:	f04f 0967 	mov.w	r9, #103	; 0x67
 80040a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80040a8:	4299      	cmp	r1, r3
 80040aa:	db05      	blt.n	80040b8 <_printf_float+0x1c8>
 80040ac:	6823      	ldr	r3, [r4, #0]
 80040ae:	6121      	str	r1, [r4, #16]
 80040b0:	07d8      	lsls	r0, r3, #31
 80040b2:	d5ea      	bpl.n	800408a <_printf_float+0x19a>
 80040b4:	1c4b      	adds	r3, r1, #1
 80040b6:	e7e7      	b.n	8004088 <_printf_float+0x198>
 80040b8:	2900      	cmp	r1, #0
 80040ba:	bfcc      	ite	gt
 80040bc:	2201      	movgt	r2, #1
 80040be:	f1c1 0202 	rsble	r2, r1, #2
 80040c2:	4413      	add	r3, r2
 80040c4:	e7e0      	b.n	8004088 <_printf_float+0x198>
 80040c6:	6823      	ldr	r3, [r4, #0]
 80040c8:	055a      	lsls	r2, r3, #21
 80040ca:	d407      	bmi.n	80040dc <_printf_float+0x1ec>
 80040cc:	6923      	ldr	r3, [r4, #16]
 80040ce:	4642      	mov	r2, r8
 80040d0:	4631      	mov	r1, r6
 80040d2:	4628      	mov	r0, r5
 80040d4:	47b8      	blx	r7
 80040d6:	3001      	adds	r0, #1
 80040d8:	d12b      	bne.n	8004132 <_printf_float+0x242>
 80040da:	e764      	b.n	8003fa6 <_printf_float+0xb6>
 80040dc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80040e0:	f240 80dd 	bls.w	800429e <_printf_float+0x3ae>
 80040e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80040e8:	2200      	movs	r2, #0
 80040ea:	2300      	movs	r3, #0
 80040ec:	f7fc fc5c 	bl	80009a8 <__aeabi_dcmpeq>
 80040f0:	2800      	cmp	r0, #0
 80040f2:	d033      	beq.n	800415c <_printf_float+0x26c>
 80040f4:	2301      	movs	r3, #1
 80040f6:	4631      	mov	r1, r6
 80040f8:	4628      	mov	r0, r5
 80040fa:	4a35      	ldr	r2, [pc, #212]	; (80041d0 <_printf_float+0x2e0>)
 80040fc:	47b8      	blx	r7
 80040fe:	3001      	adds	r0, #1
 8004100:	f43f af51 	beq.w	8003fa6 <_printf_float+0xb6>
 8004104:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004108:	429a      	cmp	r2, r3
 800410a:	db02      	blt.n	8004112 <_printf_float+0x222>
 800410c:	6823      	ldr	r3, [r4, #0]
 800410e:	07d8      	lsls	r0, r3, #31
 8004110:	d50f      	bpl.n	8004132 <_printf_float+0x242>
 8004112:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004116:	4631      	mov	r1, r6
 8004118:	4628      	mov	r0, r5
 800411a:	47b8      	blx	r7
 800411c:	3001      	adds	r0, #1
 800411e:	f43f af42 	beq.w	8003fa6 <_printf_float+0xb6>
 8004122:	f04f 0800 	mov.w	r8, #0
 8004126:	f104 091a 	add.w	r9, r4, #26
 800412a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800412c:	3b01      	subs	r3, #1
 800412e:	4543      	cmp	r3, r8
 8004130:	dc09      	bgt.n	8004146 <_printf_float+0x256>
 8004132:	6823      	ldr	r3, [r4, #0]
 8004134:	079b      	lsls	r3, r3, #30
 8004136:	f100 8102 	bmi.w	800433e <_printf_float+0x44e>
 800413a:	68e0      	ldr	r0, [r4, #12]
 800413c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800413e:	4298      	cmp	r0, r3
 8004140:	bfb8      	it	lt
 8004142:	4618      	movlt	r0, r3
 8004144:	e731      	b.n	8003faa <_printf_float+0xba>
 8004146:	2301      	movs	r3, #1
 8004148:	464a      	mov	r2, r9
 800414a:	4631      	mov	r1, r6
 800414c:	4628      	mov	r0, r5
 800414e:	47b8      	blx	r7
 8004150:	3001      	adds	r0, #1
 8004152:	f43f af28 	beq.w	8003fa6 <_printf_float+0xb6>
 8004156:	f108 0801 	add.w	r8, r8, #1
 800415a:	e7e6      	b.n	800412a <_printf_float+0x23a>
 800415c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800415e:	2b00      	cmp	r3, #0
 8004160:	dc38      	bgt.n	80041d4 <_printf_float+0x2e4>
 8004162:	2301      	movs	r3, #1
 8004164:	4631      	mov	r1, r6
 8004166:	4628      	mov	r0, r5
 8004168:	4a19      	ldr	r2, [pc, #100]	; (80041d0 <_printf_float+0x2e0>)
 800416a:	47b8      	blx	r7
 800416c:	3001      	adds	r0, #1
 800416e:	f43f af1a 	beq.w	8003fa6 <_printf_float+0xb6>
 8004172:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004176:	4313      	orrs	r3, r2
 8004178:	d102      	bne.n	8004180 <_printf_float+0x290>
 800417a:	6823      	ldr	r3, [r4, #0]
 800417c:	07d9      	lsls	r1, r3, #31
 800417e:	d5d8      	bpl.n	8004132 <_printf_float+0x242>
 8004180:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004184:	4631      	mov	r1, r6
 8004186:	4628      	mov	r0, r5
 8004188:	47b8      	blx	r7
 800418a:	3001      	adds	r0, #1
 800418c:	f43f af0b 	beq.w	8003fa6 <_printf_float+0xb6>
 8004190:	f04f 0900 	mov.w	r9, #0
 8004194:	f104 0a1a 	add.w	sl, r4, #26
 8004198:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800419a:	425b      	negs	r3, r3
 800419c:	454b      	cmp	r3, r9
 800419e:	dc01      	bgt.n	80041a4 <_printf_float+0x2b4>
 80041a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80041a2:	e794      	b.n	80040ce <_printf_float+0x1de>
 80041a4:	2301      	movs	r3, #1
 80041a6:	4652      	mov	r2, sl
 80041a8:	4631      	mov	r1, r6
 80041aa:	4628      	mov	r0, r5
 80041ac:	47b8      	blx	r7
 80041ae:	3001      	adds	r0, #1
 80041b0:	f43f aef9 	beq.w	8003fa6 <_printf_float+0xb6>
 80041b4:	f109 0901 	add.w	r9, r9, #1
 80041b8:	e7ee      	b.n	8004198 <_printf_float+0x2a8>
 80041ba:	bf00      	nop
 80041bc:	7fefffff 	.word	0x7fefffff
 80041c0:	080086b4 	.word	0x080086b4
 80041c4:	080086b8 	.word	0x080086b8
 80041c8:	080086c0 	.word	0x080086c0
 80041cc:	080086bc 	.word	0x080086bc
 80041d0:	080086c4 	.word	0x080086c4
 80041d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80041d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80041d8:	429a      	cmp	r2, r3
 80041da:	bfa8      	it	ge
 80041dc:	461a      	movge	r2, r3
 80041de:	2a00      	cmp	r2, #0
 80041e0:	4691      	mov	r9, r2
 80041e2:	dc37      	bgt.n	8004254 <_printf_float+0x364>
 80041e4:	f04f 0b00 	mov.w	fp, #0
 80041e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80041ec:	f104 021a 	add.w	r2, r4, #26
 80041f0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80041f4:	ebaa 0309 	sub.w	r3, sl, r9
 80041f8:	455b      	cmp	r3, fp
 80041fa:	dc33      	bgt.n	8004264 <_printf_float+0x374>
 80041fc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004200:	429a      	cmp	r2, r3
 8004202:	db3b      	blt.n	800427c <_printf_float+0x38c>
 8004204:	6823      	ldr	r3, [r4, #0]
 8004206:	07da      	lsls	r2, r3, #31
 8004208:	d438      	bmi.n	800427c <_printf_float+0x38c>
 800420a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800420c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800420e:	eba3 020a 	sub.w	r2, r3, sl
 8004212:	eba3 0901 	sub.w	r9, r3, r1
 8004216:	4591      	cmp	r9, r2
 8004218:	bfa8      	it	ge
 800421a:	4691      	movge	r9, r2
 800421c:	f1b9 0f00 	cmp.w	r9, #0
 8004220:	dc34      	bgt.n	800428c <_printf_float+0x39c>
 8004222:	f04f 0800 	mov.w	r8, #0
 8004226:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800422a:	f104 0a1a 	add.w	sl, r4, #26
 800422e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004232:	1a9b      	subs	r3, r3, r2
 8004234:	eba3 0309 	sub.w	r3, r3, r9
 8004238:	4543      	cmp	r3, r8
 800423a:	f77f af7a 	ble.w	8004132 <_printf_float+0x242>
 800423e:	2301      	movs	r3, #1
 8004240:	4652      	mov	r2, sl
 8004242:	4631      	mov	r1, r6
 8004244:	4628      	mov	r0, r5
 8004246:	47b8      	blx	r7
 8004248:	3001      	adds	r0, #1
 800424a:	f43f aeac 	beq.w	8003fa6 <_printf_float+0xb6>
 800424e:	f108 0801 	add.w	r8, r8, #1
 8004252:	e7ec      	b.n	800422e <_printf_float+0x33e>
 8004254:	4613      	mov	r3, r2
 8004256:	4631      	mov	r1, r6
 8004258:	4642      	mov	r2, r8
 800425a:	4628      	mov	r0, r5
 800425c:	47b8      	blx	r7
 800425e:	3001      	adds	r0, #1
 8004260:	d1c0      	bne.n	80041e4 <_printf_float+0x2f4>
 8004262:	e6a0      	b.n	8003fa6 <_printf_float+0xb6>
 8004264:	2301      	movs	r3, #1
 8004266:	4631      	mov	r1, r6
 8004268:	4628      	mov	r0, r5
 800426a:	920b      	str	r2, [sp, #44]	; 0x2c
 800426c:	47b8      	blx	r7
 800426e:	3001      	adds	r0, #1
 8004270:	f43f ae99 	beq.w	8003fa6 <_printf_float+0xb6>
 8004274:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004276:	f10b 0b01 	add.w	fp, fp, #1
 800427a:	e7b9      	b.n	80041f0 <_printf_float+0x300>
 800427c:	4631      	mov	r1, r6
 800427e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004282:	4628      	mov	r0, r5
 8004284:	47b8      	blx	r7
 8004286:	3001      	adds	r0, #1
 8004288:	d1bf      	bne.n	800420a <_printf_float+0x31a>
 800428a:	e68c      	b.n	8003fa6 <_printf_float+0xb6>
 800428c:	464b      	mov	r3, r9
 800428e:	4631      	mov	r1, r6
 8004290:	4628      	mov	r0, r5
 8004292:	eb08 020a 	add.w	r2, r8, sl
 8004296:	47b8      	blx	r7
 8004298:	3001      	adds	r0, #1
 800429a:	d1c2      	bne.n	8004222 <_printf_float+0x332>
 800429c:	e683      	b.n	8003fa6 <_printf_float+0xb6>
 800429e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80042a0:	2a01      	cmp	r2, #1
 80042a2:	dc01      	bgt.n	80042a8 <_printf_float+0x3b8>
 80042a4:	07db      	lsls	r3, r3, #31
 80042a6:	d537      	bpl.n	8004318 <_printf_float+0x428>
 80042a8:	2301      	movs	r3, #1
 80042aa:	4642      	mov	r2, r8
 80042ac:	4631      	mov	r1, r6
 80042ae:	4628      	mov	r0, r5
 80042b0:	47b8      	blx	r7
 80042b2:	3001      	adds	r0, #1
 80042b4:	f43f ae77 	beq.w	8003fa6 <_printf_float+0xb6>
 80042b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80042bc:	4631      	mov	r1, r6
 80042be:	4628      	mov	r0, r5
 80042c0:	47b8      	blx	r7
 80042c2:	3001      	adds	r0, #1
 80042c4:	f43f ae6f 	beq.w	8003fa6 <_printf_float+0xb6>
 80042c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80042cc:	2200      	movs	r2, #0
 80042ce:	2300      	movs	r3, #0
 80042d0:	f7fc fb6a 	bl	80009a8 <__aeabi_dcmpeq>
 80042d4:	b9d8      	cbnz	r0, 800430e <_printf_float+0x41e>
 80042d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80042d8:	f108 0201 	add.w	r2, r8, #1
 80042dc:	3b01      	subs	r3, #1
 80042de:	4631      	mov	r1, r6
 80042e0:	4628      	mov	r0, r5
 80042e2:	47b8      	blx	r7
 80042e4:	3001      	adds	r0, #1
 80042e6:	d10e      	bne.n	8004306 <_printf_float+0x416>
 80042e8:	e65d      	b.n	8003fa6 <_printf_float+0xb6>
 80042ea:	2301      	movs	r3, #1
 80042ec:	464a      	mov	r2, r9
 80042ee:	4631      	mov	r1, r6
 80042f0:	4628      	mov	r0, r5
 80042f2:	47b8      	blx	r7
 80042f4:	3001      	adds	r0, #1
 80042f6:	f43f ae56 	beq.w	8003fa6 <_printf_float+0xb6>
 80042fa:	f108 0801 	add.w	r8, r8, #1
 80042fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004300:	3b01      	subs	r3, #1
 8004302:	4543      	cmp	r3, r8
 8004304:	dcf1      	bgt.n	80042ea <_printf_float+0x3fa>
 8004306:	4653      	mov	r3, sl
 8004308:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800430c:	e6e0      	b.n	80040d0 <_printf_float+0x1e0>
 800430e:	f04f 0800 	mov.w	r8, #0
 8004312:	f104 091a 	add.w	r9, r4, #26
 8004316:	e7f2      	b.n	80042fe <_printf_float+0x40e>
 8004318:	2301      	movs	r3, #1
 800431a:	4642      	mov	r2, r8
 800431c:	e7df      	b.n	80042de <_printf_float+0x3ee>
 800431e:	2301      	movs	r3, #1
 8004320:	464a      	mov	r2, r9
 8004322:	4631      	mov	r1, r6
 8004324:	4628      	mov	r0, r5
 8004326:	47b8      	blx	r7
 8004328:	3001      	adds	r0, #1
 800432a:	f43f ae3c 	beq.w	8003fa6 <_printf_float+0xb6>
 800432e:	f108 0801 	add.w	r8, r8, #1
 8004332:	68e3      	ldr	r3, [r4, #12]
 8004334:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004336:	1a5b      	subs	r3, r3, r1
 8004338:	4543      	cmp	r3, r8
 800433a:	dcf0      	bgt.n	800431e <_printf_float+0x42e>
 800433c:	e6fd      	b.n	800413a <_printf_float+0x24a>
 800433e:	f04f 0800 	mov.w	r8, #0
 8004342:	f104 0919 	add.w	r9, r4, #25
 8004346:	e7f4      	b.n	8004332 <_printf_float+0x442>

08004348 <_printf_common>:
 8004348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800434c:	4616      	mov	r6, r2
 800434e:	4699      	mov	r9, r3
 8004350:	688a      	ldr	r2, [r1, #8]
 8004352:	690b      	ldr	r3, [r1, #16]
 8004354:	4607      	mov	r7, r0
 8004356:	4293      	cmp	r3, r2
 8004358:	bfb8      	it	lt
 800435a:	4613      	movlt	r3, r2
 800435c:	6033      	str	r3, [r6, #0]
 800435e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004362:	460c      	mov	r4, r1
 8004364:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004368:	b10a      	cbz	r2, 800436e <_printf_common+0x26>
 800436a:	3301      	adds	r3, #1
 800436c:	6033      	str	r3, [r6, #0]
 800436e:	6823      	ldr	r3, [r4, #0]
 8004370:	0699      	lsls	r1, r3, #26
 8004372:	bf42      	ittt	mi
 8004374:	6833      	ldrmi	r3, [r6, #0]
 8004376:	3302      	addmi	r3, #2
 8004378:	6033      	strmi	r3, [r6, #0]
 800437a:	6825      	ldr	r5, [r4, #0]
 800437c:	f015 0506 	ands.w	r5, r5, #6
 8004380:	d106      	bne.n	8004390 <_printf_common+0x48>
 8004382:	f104 0a19 	add.w	sl, r4, #25
 8004386:	68e3      	ldr	r3, [r4, #12]
 8004388:	6832      	ldr	r2, [r6, #0]
 800438a:	1a9b      	subs	r3, r3, r2
 800438c:	42ab      	cmp	r3, r5
 800438e:	dc28      	bgt.n	80043e2 <_printf_common+0x9a>
 8004390:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004394:	1e13      	subs	r3, r2, #0
 8004396:	6822      	ldr	r2, [r4, #0]
 8004398:	bf18      	it	ne
 800439a:	2301      	movne	r3, #1
 800439c:	0692      	lsls	r2, r2, #26
 800439e:	d42d      	bmi.n	80043fc <_printf_common+0xb4>
 80043a0:	4649      	mov	r1, r9
 80043a2:	4638      	mov	r0, r7
 80043a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80043a8:	47c0      	blx	r8
 80043aa:	3001      	adds	r0, #1
 80043ac:	d020      	beq.n	80043f0 <_printf_common+0xa8>
 80043ae:	6823      	ldr	r3, [r4, #0]
 80043b0:	68e5      	ldr	r5, [r4, #12]
 80043b2:	f003 0306 	and.w	r3, r3, #6
 80043b6:	2b04      	cmp	r3, #4
 80043b8:	bf18      	it	ne
 80043ba:	2500      	movne	r5, #0
 80043bc:	6832      	ldr	r2, [r6, #0]
 80043be:	f04f 0600 	mov.w	r6, #0
 80043c2:	68a3      	ldr	r3, [r4, #8]
 80043c4:	bf08      	it	eq
 80043c6:	1aad      	subeq	r5, r5, r2
 80043c8:	6922      	ldr	r2, [r4, #16]
 80043ca:	bf08      	it	eq
 80043cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043d0:	4293      	cmp	r3, r2
 80043d2:	bfc4      	itt	gt
 80043d4:	1a9b      	subgt	r3, r3, r2
 80043d6:	18ed      	addgt	r5, r5, r3
 80043d8:	341a      	adds	r4, #26
 80043da:	42b5      	cmp	r5, r6
 80043dc:	d11a      	bne.n	8004414 <_printf_common+0xcc>
 80043de:	2000      	movs	r0, #0
 80043e0:	e008      	b.n	80043f4 <_printf_common+0xac>
 80043e2:	2301      	movs	r3, #1
 80043e4:	4652      	mov	r2, sl
 80043e6:	4649      	mov	r1, r9
 80043e8:	4638      	mov	r0, r7
 80043ea:	47c0      	blx	r8
 80043ec:	3001      	adds	r0, #1
 80043ee:	d103      	bne.n	80043f8 <_printf_common+0xb0>
 80043f0:	f04f 30ff 	mov.w	r0, #4294967295
 80043f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043f8:	3501      	adds	r5, #1
 80043fa:	e7c4      	b.n	8004386 <_printf_common+0x3e>
 80043fc:	2030      	movs	r0, #48	; 0x30
 80043fe:	18e1      	adds	r1, r4, r3
 8004400:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004404:	1c5a      	adds	r2, r3, #1
 8004406:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800440a:	4422      	add	r2, r4
 800440c:	3302      	adds	r3, #2
 800440e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004412:	e7c5      	b.n	80043a0 <_printf_common+0x58>
 8004414:	2301      	movs	r3, #1
 8004416:	4622      	mov	r2, r4
 8004418:	4649      	mov	r1, r9
 800441a:	4638      	mov	r0, r7
 800441c:	47c0      	blx	r8
 800441e:	3001      	adds	r0, #1
 8004420:	d0e6      	beq.n	80043f0 <_printf_common+0xa8>
 8004422:	3601      	adds	r6, #1
 8004424:	e7d9      	b.n	80043da <_printf_common+0x92>
	...

08004428 <_printf_i>:
 8004428:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800442c:	7e0f      	ldrb	r7, [r1, #24]
 800442e:	4691      	mov	r9, r2
 8004430:	2f78      	cmp	r7, #120	; 0x78
 8004432:	4680      	mov	r8, r0
 8004434:	460c      	mov	r4, r1
 8004436:	469a      	mov	sl, r3
 8004438:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800443a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800443e:	d807      	bhi.n	8004450 <_printf_i+0x28>
 8004440:	2f62      	cmp	r7, #98	; 0x62
 8004442:	d80a      	bhi.n	800445a <_printf_i+0x32>
 8004444:	2f00      	cmp	r7, #0
 8004446:	f000 80d9 	beq.w	80045fc <_printf_i+0x1d4>
 800444a:	2f58      	cmp	r7, #88	; 0x58
 800444c:	f000 80a4 	beq.w	8004598 <_printf_i+0x170>
 8004450:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004454:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004458:	e03a      	b.n	80044d0 <_printf_i+0xa8>
 800445a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800445e:	2b15      	cmp	r3, #21
 8004460:	d8f6      	bhi.n	8004450 <_printf_i+0x28>
 8004462:	a101      	add	r1, pc, #4	; (adr r1, 8004468 <_printf_i+0x40>)
 8004464:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004468:	080044c1 	.word	0x080044c1
 800446c:	080044d5 	.word	0x080044d5
 8004470:	08004451 	.word	0x08004451
 8004474:	08004451 	.word	0x08004451
 8004478:	08004451 	.word	0x08004451
 800447c:	08004451 	.word	0x08004451
 8004480:	080044d5 	.word	0x080044d5
 8004484:	08004451 	.word	0x08004451
 8004488:	08004451 	.word	0x08004451
 800448c:	08004451 	.word	0x08004451
 8004490:	08004451 	.word	0x08004451
 8004494:	080045e3 	.word	0x080045e3
 8004498:	08004505 	.word	0x08004505
 800449c:	080045c5 	.word	0x080045c5
 80044a0:	08004451 	.word	0x08004451
 80044a4:	08004451 	.word	0x08004451
 80044a8:	08004605 	.word	0x08004605
 80044ac:	08004451 	.word	0x08004451
 80044b0:	08004505 	.word	0x08004505
 80044b4:	08004451 	.word	0x08004451
 80044b8:	08004451 	.word	0x08004451
 80044bc:	080045cd 	.word	0x080045cd
 80044c0:	682b      	ldr	r3, [r5, #0]
 80044c2:	1d1a      	adds	r2, r3, #4
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	602a      	str	r2, [r5, #0]
 80044c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80044d0:	2301      	movs	r3, #1
 80044d2:	e0a4      	b.n	800461e <_printf_i+0x1f6>
 80044d4:	6820      	ldr	r0, [r4, #0]
 80044d6:	6829      	ldr	r1, [r5, #0]
 80044d8:	0606      	lsls	r6, r0, #24
 80044da:	f101 0304 	add.w	r3, r1, #4
 80044de:	d50a      	bpl.n	80044f6 <_printf_i+0xce>
 80044e0:	680e      	ldr	r6, [r1, #0]
 80044e2:	602b      	str	r3, [r5, #0]
 80044e4:	2e00      	cmp	r6, #0
 80044e6:	da03      	bge.n	80044f0 <_printf_i+0xc8>
 80044e8:	232d      	movs	r3, #45	; 0x2d
 80044ea:	4276      	negs	r6, r6
 80044ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044f0:	230a      	movs	r3, #10
 80044f2:	485e      	ldr	r0, [pc, #376]	; (800466c <_printf_i+0x244>)
 80044f4:	e019      	b.n	800452a <_printf_i+0x102>
 80044f6:	680e      	ldr	r6, [r1, #0]
 80044f8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80044fc:	602b      	str	r3, [r5, #0]
 80044fe:	bf18      	it	ne
 8004500:	b236      	sxthne	r6, r6
 8004502:	e7ef      	b.n	80044e4 <_printf_i+0xbc>
 8004504:	682b      	ldr	r3, [r5, #0]
 8004506:	6820      	ldr	r0, [r4, #0]
 8004508:	1d19      	adds	r1, r3, #4
 800450a:	6029      	str	r1, [r5, #0]
 800450c:	0601      	lsls	r1, r0, #24
 800450e:	d501      	bpl.n	8004514 <_printf_i+0xec>
 8004510:	681e      	ldr	r6, [r3, #0]
 8004512:	e002      	b.n	800451a <_printf_i+0xf2>
 8004514:	0646      	lsls	r6, r0, #25
 8004516:	d5fb      	bpl.n	8004510 <_printf_i+0xe8>
 8004518:	881e      	ldrh	r6, [r3, #0]
 800451a:	2f6f      	cmp	r7, #111	; 0x6f
 800451c:	bf0c      	ite	eq
 800451e:	2308      	moveq	r3, #8
 8004520:	230a      	movne	r3, #10
 8004522:	4852      	ldr	r0, [pc, #328]	; (800466c <_printf_i+0x244>)
 8004524:	2100      	movs	r1, #0
 8004526:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800452a:	6865      	ldr	r5, [r4, #4]
 800452c:	2d00      	cmp	r5, #0
 800452e:	bfa8      	it	ge
 8004530:	6821      	ldrge	r1, [r4, #0]
 8004532:	60a5      	str	r5, [r4, #8]
 8004534:	bfa4      	itt	ge
 8004536:	f021 0104 	bicge.w	r1, r1, #4
 800453a:	6021      	strge	r1, [r4, #0]
 800453c:	b90e      	cbnz	r6, 8004542 <_printf_i+0x11a>
 800453e:	2d00      	cmp	r5, #0
 8004540:	d04d      	beq.n	80045de <_printf_i+0x1b6>
 8004542:	4615      	mov	r5, r2
 8004544:	fbb6 f1f3 	udiv	r1, r6, r3
 8004548:	fb03 6711 	mls	r7, r3, r1, r6
 800454c:	5dc7      	ldrb	r7, [r0, r7]
 800454e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004552:	4637      	mov	r7, r6
 8004554:	42bb      	cmp	r3, r7
 8004556:	460e      	mov	r6, r1
 8004558:	d9f4      	bls.n	8004544 <_printf_i+0x11c>
 800455a:	2b08      	cmp	r3, #8
 800455c:	d10b      	bne.n	8004576 <_printf_i+0x14e>
 800455e:	6823      	ldr	r3, [r4, #0]
 8004560:	07de      	lsls	r6, r3, #31
 8004562:	d508      	bpl.n	8004576 <_printf_i+0x14e>
 8004564:	6923      	ldr	r3, [r4, #16]
 8004566:	6861      	ldr	r1, [r4, #4]
 8004568:	4299      	cmp	r1, r3
 800456a:	bfde      	ittt	le
 800456c:	2330      	movle	r3, #48	; 0x30
 800456e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004572:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004576:	1b52      	subs	r2, r2, r5
 8004578:	6122      	str	r2, [r4, #16]
 800457a:	464b      	mov	r3, r9
 800457c:	4621      	mov	r1, r4
 800457e:	4640      	mov	r0, r8
 8004580:	f8cd a000 	str.w	sl, [sp]
 8004584:	aa03      	add	r2, sp, #12
 8004586:	f7ff fedf 	bl	8004348 <_printf_common>
 800458a:	3001      	adds	r0, #1
 800458c:	d14c      	bne.n	8004628 <_printf_i+0x200>
 800458e:	f04f 30ff 	mov.w	r0, #4294967295
 8004592:	b004      	add	sp, #16
 8004594:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004598:	4834      	ldr	r0, [pc, #208]	; (800466c <_printf_i+0x244>)
 800459a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800459e:	6829      	ldr	r1, [r5, #0]
 80045a0:	6823      	ldr	r3, [r4, #0]
 80045a2:	f851 6b04 	ldr.w	r6, [r1], #4
 80045a6:	6029      	str	r1, [r5, #0]
 80045a8:	061d      	lsls	r5, r3, #24
 80045aa:	d514      	bpl.n	80045d6 <_printf_i+0x1ae>
 80045ac:	07df      	lsls	r7, r3, #31
 80045ae:	bf44      	itt	mi
 80045b0:	f043 0320 	orrmi.w	r3, r3, #32
 80045b4:	6023      	strmi	r3, [r4, #0]
 80045b6:	b91e      	cbnz	r6, 80045c0 <_printf_i+0x198>
 80045b8:	6823      	ldr	r3, [r4, #0]
 80045ba:	f023 0320 	bic.w	r3, r3, #32
 80045be:	6023      	str	r3, [r4, #0]
 80045c0:	2310      	movs	r3, #16
 80045c2:	e7af      	b.n	8004524 <_printf_i+0xfc>
 80045c4:	6823      	ldr	r3, [r4, #0]
 80045c6:	f043 0320 	orr.w	r3, r3, #32
 80045ca:	6023      	str	r3, [r4, #0]
 80045cc:	2378      	movs	r3, #120	; 0x78
 80045ce:	4828      	ldr	r0, [pc, #160]	; (8004670 <_printf_i+0x248>)
 80045d0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80045d4:	e7e3      	b.n	800459e <_printf_i+0x176>
 80045d6:	0659      	lsls	r1, r3, #25
 80045d8:	bf48      	it	mi
 80045da:	b2b6      	uxthmi	r6, r6
 80045dc:	e7e6      	b.n	80045ac <_printf_i+0x184>
 80045de:	4615      	mov	r5, r2
 80045e0:	e7bb      	b.n	800455a <_printf_i+0x132>
 80045e2:	682b      	ldr	r3, [r5, #0]
 80045e4:	6826      	ldr	r6, [r4, #0]
 80045e6:	1d18      	adds	r0, r3, #4
 80045e8:	6961      	ldr	r1, [r4, #20]
 80045ea:	6028      	str	r0, [r5, #0]
 80045ec:	0635      	lsls	r5, r6, #24
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	d501      	bpl.n	80045f6 <_printf_i+0x1ce>
 80045f2:	6019      	str	r1, [r3, #0]
 80045f4:	e002      	b.n	80045fc <_printf_i+0x1d4>
 80045f6:	0670      	lsls	r0, r6, #25
 80045f8:	d5fb      	bpl.n	80045f2 <_printf_i+0x1ca>
 80045fa:	8019      	strh	r1, [r3, #0]
 80045fc:	2300      	movs	r3, #0
 80045fe:	4615      	mov	r5, r2
 8004600:	6123      	str	r3, [r4, #16]
 8004602:	e7ba      	b.n	800457a <_printf_i+0x152>
 8004604:	682b      	ldr	r3, [r5, #0]
 8004606:	2100      	movs	r1, #0
 8004608:	1d1a      	adds	r2, r3, #4
 800460a:	602a      	str	r2, [r5, #0]
 800460c:	681d      	ldr	r5, [r3, #0]
 800460e:	6862      	ldr	r2, [r4, #4]
 8004610:	4628      	mov	r0, r5
 8004612:	f002 faef 	bl	8006bf4 <memchr>
 8004616:	b108      	cbz	r0, 800461c <_printf_i+0x1f4>
 8004618:	1b40      	subs	r0, r0, r5
 800461a:	6060      	str	r0, [r4, #4]
 800461c:	6863      	ldr	r3, [r4, #4]
 800461e:	6123      	str	r3, [r4, #16]
 8004620:	2300      	movs	r3, #0
 8004622:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004626:	e7a8      	b.n	800457a <_printf_i+0x152>
 8004628:	462a      	mov	r2, r5
 800462a:	4649      	mov	r1, r9
 800462c:	4640      	mov	r0, r8
 800462e:	6923      	ldr	r3, [r4, #16]
 8004630:	47d0      	blx	sl
 8004632:	3001      	adds	r0, #1
 8004634:	d0ab      	beq.n	800458e <_printf_i+0x166>
 8004636:	6823      	ldr	r3, [r4, #0]
 8004638:	079b      	lsls	r3, r3, #30
 800463a:	d413      	bmi.n	8004664 <_printf_i+0x23c>
 800463c:	68e0      	ldr	r0, [r4, #12]
 800463e:	9b03      	ldr	r3, [sp, #12]
 8004640:	4298      	cmp	r0, r3
 8004642:	bfb8      	it	lt
 8004644:	4618      	movlt	r0, r3
 8004646:	e7a4      	b.n	8004592 <_printf_i+0x16a>
 8004648:	2301      	movs	r3, #1
 800464a:	4632      	mov	r2, r6
 800464c:	4649      	mov	r1, r9
 800464e:	4640      	mov	r0, r8
 8004650:	47d0      	blx	sl
 8004652:	3001      	adds	r0, #1
 8004654:	d09b      	beq.n	800458e <_printf_i+0x166>
 8004656:	3501      	adds	r5, #1
 8004658:	68e3      	ldr	r3, [r4, #12]
 800465a:	9903      	ldr	r1, [sp, #12]
 800465c:	1a5b      	subs	r3, r3, r1
 800465e:	42ab      	cmp	r3, r5
 8004660:	dcf2      	bgt.n	8004648 <_printf_i+0x220>
 8004662:	e7eb      	b.n	800463c <_printf_i+0x214>
 8004664:	2500      	movs	r5, #0
 8004666:	f104 0619 	add.w	r6, r4, #25
 800466a:	e7f5      	b.n	8004658 <_printf_i+0x230>
 800466c:	080086c6 	.word	0x080086c6
 8004670:	080086d7 	.word	0x080086d7

08004674 <_scanf_float>:
 8004674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004678:	b087      	sub	sp, #28
 800467a:	9303      	str	r3, [sp, #12]
 800467c:	688b      	ldr	r3, [r1, #8]
 800467e:	4617      	mov	r7, r2
 8004680:	1e5a      	subs	r2, r3, #1
 8004682:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004686:	bf85      	ittet	hi
 8004688:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800468c:	195b      	addhi	r3, r3, r5
 800468e:	2300      	movls	r3, #0
 8004690:	9302      	strhi	r3, [sp, #8]
 8004692:	bf88      	it	hi
 8004694:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004698:	468b      	mov	fp, r1
 800469a:	f04f 0500 	mov.w	r5, #0
 800469e:	bf8c      	ite	hi
 80046a0:	608b      	strhi	r3, [r1, #8]
 80046a2:	9302      	strls	r3, [sp, #8]
 80046a4:	680b      	ldr	r3, [r1, #0]
 80046a6:	4680      	mov	r8, r0
 80046a8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80046ac:	f84b 3b1c 	str.w	r3, [fp], #28
 80046b0:	460c      	mov	r4, r1
 80046b2:	465e      	mov	r6, fp
 80046b4:	46aa      	mov	sl, r5
 80046b6:	46a9      	mov	r9, r5
 80046b8:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80046bc:	9501      	str	r5, [sp, #4]
 80046be:	68a2      	ldr	r2, [r4, #8]
 80046c0:	b152      	cbz	r2, 80046d8 <_scanf_float+0x64>
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	2b4e      	cmp	r3, #78	; 0x4e
 80046c8:	d864      	bhi.n	8004794 <_scanf_float+0x120>
 80046ca:	2b40      	cmp	r3, #64	; 0x40
 80046cc:	d83c      	bhi.n	8004748 <_scanf_float+0xd4>
 80046ce:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80046d2:	b2c8      	uxtb	r0, r1
 80046d4:	280e      	cmp	r0, #14
 80046d6:	d93a      	bls.n	800474e <_scanf_float+0xda>
 80046d8:	f1b9 0f00 	cmp.w	r9, #0
 80046dc:	d003      	beq.n	80046e6 <_scanf_float+0x72>
 80046de:	6823      	ldr	r3, [r4, #0]
 80046e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046e4:	6023      	str	r3, [r4, #0]
 80046e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80046ea:	f1ba 0f01 	cmp.w	sl, #1
 80046ee:	f200 8113 	bhi.w	8004918 <_scanf_float+0x2a4>
 80046f2:	455e      	cmp	r6, fp
 80046f4:	f200 8105 	bhi.w	8004902 <_scanf_float+0x28e>
 80046f8:	2501      	movs	r5, #1
 80046fa:	4628      	mov	r0, r5
 80046fc:	b007      	add	sp, #28
 80046fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004702:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8004706:	2a0d      	cmp	r2, #13
 8004708:	d8e6      	bhi.n	80046d8 <_scanf_float+0x64>
 800470a:	a101      	add	r1, pc, #4	; (adr r1, 8004710 <_scanf_float+0x9c>)
 800470c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004710:	0800484f 	.word	0x0800484f
 8004714:	080046d9 	.word	0x080046d9
 8004718:	080046d9 	.word	0x080046d9
 800471c:	080046d9 	.word	0x080046d9
 8004720:	080048af 	.word	0x080048af
 8004724:	08004887 	.word	0x08004887
 8004728:	080046d9 	.word	0x080046d9
 800472c:	080046d9 	.word	0x080046d9
 8004730:	0800485d 	.word	0x0800485d
 8004734:	080046d9 	.word	0x080046d9
 8004738:	080046d9 	.word	0x080046d9
 800473c:	080046d9 	.word	0x080046d9
 8004740:	080046d9 	.word	0x080046d9
 8004744:	08004815 	.word	0x08004815
 8004748:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800474c:	e7db      	b.n	8004706 <_scanf_float+0x92>
 800474e:	290e      	cmp	r1, #14
 8004750:	d8c2      	bhi.n	80046d8 <_scanf_float+0x64>
 8004752:	a001      	add	r0, pc, #4	; (adr r0, 8004758 <_scanf_float+0xe4>)
 8004754:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004758:	08004807 	.word	0x08004807
 800475c:	080046d9 	.word	0x080046d9
 8004760:	08004807 	.word	0x08004807
 8004764:	0800489b 	.word	0x0800489b
 8004768:	080046d9 	.word	0x080046d9
 800476c:	080047b5 	.word	0x080047b5
 8004770:	080047f1 	.word	0x080047f1
 8004774:	080047f1 	.word	0x080047f1
 8004778:	080047f1 	.word	0x080047f1
 800477c:	080047f1 	.word	0x080047f1
 8004780:	080047f1 	.word	0x080047f1
 8004784:	080047f1 	.word	0x080047f1
 8004788:	080047f1 	.word	0x080047f1
 800478c:	080047f1 	.word	0x080047f1
 8004790:	080047f1 	.word	0x080047f1
 8004794:	2b6e      	cmp	r3, #110	; 0x6e
 8004796:	d809      	bhi.n	80047ac <_scanf_float+0x138>
 8004798:	2b60      	cmp	r3, #96	; 0x60
 800479a:	d8b2      	bhi.n	8004702 <_scanf_float+0x8e>
 800479c:	2b54      	cmp	r3, #84	; 0x54
 800479e:	d077      	beq.n	8004890 <_scanf_float+0x21c>
 80047a0:	2b59      	cmp	r3, #89	; 0x59
 80047a2:	d199      	bne.n	80046d8 <_scanf_float+0x64>
 80047a4:	2d07      	cmp	r5, #7
 80047a6:	d197      	bne.n	80046d8 <_scanf_float+0x64>
 80047a8:	2508      	movs	r5, #8
 80047aa:	e029      	b.n	8004800 <_scanf_float+0x18c>
 80047ac:	2b74      	cmp	r3, #116	; 0x74
 80047ae:	d06f      	beq.n	8004890 <_scanf_float+0x21c>
 80047b0:	2b79      	cmp	r3, #121	; 0x79
 80047b2:	e7f6      	b.n	80047a2 <_scanf_float+0x12e>
 80047b4:	6821      	ldr	r1, [r4, #0]
 80047b6:	05c8      	lsls	r0, r1, #23
 80047b8:	d51a      	bpl.n	80047f0 <_scanf_float+0x17c>
 80047ba:	9b02      	ldr	r3, [sp, #8]
 80047bc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80047c0:	6021      	str	r1, [r4, #0]
 80047c2:	f109 0901 	add.w	r9, r9, #1
 80047c6:	b11b      	cbz	r3, 80047d0 <_scanf_float+0x15c>
 80047c8:	3b01      	subs	r3, #1
 80047ca:	3201      	adds	r2, #1
 80047cc:	9302      	str	r3, [sp, #8]
 80047ce:	60a2      	str	r2, [r4, #8]
 80047d0:	68a3      	ldr	r3, [r4, #8]
 80047d2:	3b01      	subs	r3, #1
 80047d4:	60a3      	str	r3, [r4, #8]
 80047d6:	6923      	ldr	r3, [r4, #16]
 80047d8:	3301      	adds	r3, #1
 80047da:	6123      	str	r3, [r4, #16]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	3b01      	subs	r3, #1
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	607b      	str	r3, [r7, #4]
 80047e4:	f340 8084 	ble.w	80048f0 <_scanf_float+0x27c>
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	3301      	adds	r3, #1
 80047ec:	603b      	str	r3, [r7, #0]
 80047ee:	e766      	b.n	80046be <_scanf_float+0x4a>
 80047f0:	eb1a 0f05 	cmn.w	sl, r5
 80047f4:	f47f af70 	bne.w	80046d8 <_scanf_float+0x64>
 80047f8:	6822      	ldr	r2, [r4, #0]
 80047fa:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80047fe:	6022      	str	r2, [r4, #0]
 8004800:	f806 3b01 	strb.w	r3, [r6], #1
 8004804:	e7e4      	b.n	80047d0 <_scanf_float+0x15c>
 8004806:	6822      	ldr	r2, [r4, #0]
 8004808:	0610      	lsls	r0, r2, #24
 800480a:	f57f af65 	bpl.w	80046d8 <_scanf_float+0x64>
 800480e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004812:	e7f4      	b.n	80047fe <_scanf_float+0x18a>
 8004814:	f1ba 0f00 	cmp.w	sl, #0
 8004818:	d10e      	bne.n	8004838 <_scanf_float+0x1c4>
 800481a:	f1b9 0f00 	cmp.w	r9, #0
 800481e:	d10e      	bne.n	800483e <_scanf_float+0x1ca>
 8004820:	6822      	ldr	r2, [r4, #0]
 8004822:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004826:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800482a:	d108      	bne.n	800483e <_scanf_float+0x1ca>
 800482c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004830:	f04f 0a01 	mov.w	sl, #1
 8004834:	6022      	str	r2, [r4, #0]
 8004836:	e7e3      	b.n	8004800 <_scanf_float+0x18c>
 8004838:	f1ba 0f02 	cmp.w	sl, #2
 800483c:	d055      	beq.n	80048ea <_scanf_float+0x276>
 800483e:	2d01      	cmp	r5, #1
 8004840:	d002      	beq.n	8004848 <_scanf_float+0x1d4>
 8004842:	2d04      	cmp	r5, #4
 8004844:	f47f af48 	bne.w	80046d8 <_scanf_float+0x64>
 8004848:	3501      	adds	r5, #1
 800484a:	b2ed      	uxtb	r5, r5
 800484c:	e7d8      	b.n	8004800 <_scanf_float+0x18c>
 800484e:	f1ba 0f01 	cmp.w	sl, #1
 8004852:	f47f af41 	bne.w	80046d8 <_scanf_float+0x64>
 8004856:	f04f 0a02 	mov.w	sl, #2
 800485a:	e7d1      	b.n	8004800 <_scanf_float+0x18c>
 800485c:	b97d      	cbnz	r5, 800487e <_scanf_float+0x20a>
 800485e:	f1b9 0f00 	cmp.w	r9, #0
 8004862:	f47f af3c 	bne.w	80046de <_scanf_float+0x6a>
 8004866:	6822      	ldr	r2, [r4, #0]
 8004868:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800486c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004870:	f47f af39 	bne.w	80046e6 <_scanf_float+0x72>
 8004874:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004878:	2501      	movs	r5, #1
 800487a:	6022      	str	r2, [r4, #0]
 800487c:	e7c0      	b.n	8004800 <_scanf_float+0x18c>
 800487e:	2d03      	cmp	r5, #3
 8004880:	d0e2      	beq.n	8004848 <_scanf_float+0x1d4>
 8004882:	2d05      	cmp	r5, #5
 8004884:	e7de      	b.n	8004844 <_scanf_float+0x1d0>
 8004886:	2d02      	cmp	r5, #2
 8004888:	f47f af26 	bne.w	80046d8 <_scanf_float+0x64>
 800488c:	2503      	movs	r5, #3
 800488e:	e7b7      	b.n	8004800 <_scanf_float+0x18c>
 8004890:	2d06      	cmp	r5, #6
 8004892:	f47f af21 	bne.w	80046d8 <_scanf_float+0x64>
 8004896:	2507      	movs	r5, #7
 8004898:	e7b2      	b.n	8004800 <_scanf_float+0x18c>
 800489a:	6822      	ldr	r2, [r4, #0]
 800489c:	0591      	lsls	r1, r2, #22
 800489e:	f57f af1b 	bpl.w	80046d8 <_scanf_float+0x64>
 80048a2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80048a6:	6022      	str	r2, [r4, #0]
 80048a8:	f8cd 9004 	str.w	r9, [sp, #4]
 80048ac:	e7a8      	b.n	8004800 <_scanf_float+0x18c>
 80048ae:	6822      	ldr	r2, [r4, #0]
 80048b0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80048b4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80048b8:	d006      	beq.n	80048c8 <_scanf_float+0x254>
 80048ba:	0550      	lsls	r0, r2, #21
 80048bc:	f57f af0c 	bpl.w	80046d8 <_scanf_float+0x64>
 80048c0:	f1b9 0f00 	cmp.w	r9, #0
 80048c4:	f43f af0f 	beq.w	80046e6 <_scanf_float+0x72>
 80048c8:	0591      	lsls	r1, r2, #22
 80048ca:	bf58      	it	pl
 80048cc:	9901      	ldrpl	r1, [sp, #4]
 80048ce:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80048d2:	bf58      	it	pl
 80048d4:	eba9 0101 	subpl.w	r1, r9, r1
 80048d8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80048dc:	f04f 0900 	mov.w	r9, #0
 80048e0:	bf58      	it	pl
 80048e2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80048e6:	6022      	str	r2, [r4, #0]
 80048e8:	e78a      	b.n	8004800 <_scanf_float+0x18c>
 80048ea:	f04f 0a03 	mov.w	sl, #3
 80048ee:	e787      	b.n	8004800 <_scanf_float+0x18c>
 80048f0:	4639      	mov	r1, r7
 80048f2:	4640      	mov	r0, r8
 80048f4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80048f8:	4798      	blx	r3
 80048fa:	2800      	cmp	r0, #0
 80048fc:	f43f aedf 	beq.w	80046be <_scanf_float+0x4a>
 8004900:	e6ea      	b.n	80046d8 <_scanf_float+0x64>
 8004902:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004906:	463a      	mov	r2, r7
 8004908:	4640      	mov	r0, r8
 800490a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800490e:	4798      	blx	r3
 8004910:	6923      	ldr	r3, [r4, #16]
 8004912:	3b01      	subs	r3, #1
 8004914:	6123      	str	r3, [r4, #16]
 8004916:	e6ec      	b.n	80046f2 <_scanf_float+0x7e>
 8004918:	1e6b      	subs	r3, r5, #1
 800491a:	2b06      	cmp	r3, #6
 800491c:	d825      	bhi.n	800496a <_scanf_float+0x2f6>
 800491e:	2d02      	cmp	r5, #2
 8004920:	d836      	bhi.n	8004990 <_scanf_float+0x31c>
 8004922:	455e      	cmp	r6, fp
 8004924:	f67f aee8 	bls.w	80046f8 <_scanf_float+0x84>
 8004928:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800492c:	463a      	mov	r2, r7
 800492e:	4640      	mov	r0, r8
 8004930:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004934:	4798      	blx	r3
 8004936:	6923      	ldr	r3, [r4, #16]
 8004938:	3b01      	subs	r3, #1
 800493a:	6123      	str	r3, [r4, #16]
 800493c:	e7f1      	b.n	8004922 <_scanf_float+0x2ae>
 800493e:	9802      	ldr	r0, [sp, #8]
 8004940:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004944:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8004948:	463a      	mov	r2, r7
 800494a:	9002      	str	r0, [sp, #8]
 800494c:	4640      	mov	r0, r8
 800494e:	4798      	blx	r3
 8004950:	6923      	ldr	r3, [r4, #16]
 8004952:	3b01      	subs	r3, #1
 8004954:	6123      	str	r3, [r4, #16]
 8004956:	f10a 3aff 	add.w	sl, sl, #4294967295
 800495a:	fa5f fa8a 	uxtb.w	sl, sl
 800495e:	f1ba 0f02 	cmp.w	sl, #2
 8004962:	d1ec      	bne.n	800493e <_scanf_float+0x2ca>
 8004964:	3d03      	subs	r5, #3
 8004966:	b2ed      	uxtb	r5, r5
 8004968:	1b76      	subs	r6, r6, r5
 800496a:	6823      	ldr	r3, [r4, #0]
 800496c:	05da      	lsls	r2, r3, #23
 800496e:	d52f      	bpl.n	80049d0 <_scanf_float+0x35c>
 8004970:	055b      	lsls	r3, r3, #21
 8004972:	d510      	bpl.n	8004996 <_scanf_float+0x322>
 8004974:	455e      	cmp	r6, fp
 8004976:	f67f aebf 	bls.w	80046f8 <_scanf_float+0x84>
 800497a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800497e:	463a      	mov	r2, r7
 8004980:	4640      	mov	r0, r8
 8004982:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004986:	4798      	blx	r3
 8004988:	6923      	ldr	r3, [r4, #16]
 800498a:	3b01      	subs	r3, #1
 800498c:	6123      	str	r3, [r4, #16]
 800498e:	e7f1      	b.n	8004974 <_scanf_float+0x300>
 8004990:	46aa      	mov	sl, r5
 8004992:	9602      	str	r6, [sp, #8]
 8004994:	e7df      	b.n	8004956 <_scanf_float+0x2e2>
 8004996:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800499a:	6923      	ldr	r3, [r4, #16]
 800499c:	2965      	cmp	r1, #101	; 0x65
 800499e:	f103 33ff 	add.w	r3, r3, #4294967295
 80049a2:	f106 35ff 	add.w	r5, r6, #4294967295
 80049a6:	6123      	str	r3, [r4, #16]
 80049a8:	d00c      	beq.n	80049c4 <_scanf_float+0x350>
 80049aa:	2945      	cmp	r1, #69	; 0x45
 80049ac:	d00a      	beq.n	80049c4 <_scanf_float+0x350>
 80049ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80049b2:	463a      	mov	r2, r7
 80049b4:	4640      	mov	r0, r8
 80049b6:	4798      	blx	r3
 80049b8:	6923      	ldr	r3, [r4, #16]
 80049ba:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80049be:	3b01      	subs	r3, #1
 80049c0:	1eb5      	subs	r5, r6, #2
 80049c2:	6123      	str	r3, [r4, #16]
 80049c4:	463a      	mov	r2, r7
 80049c6:	4640      	mov	r0, r8
 80049c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80049cc:	4798      	blx	r3
 80049ce:	462e      	mov	r6, r5
 80049d0:	6825      	ldr	r5, [r4, #0]
 80049d2:	f015 0510 	ands.w	r5, r5, #16
 80049d6:	d155      	bne.n	8004a84 <_scanf_float+0x410>
 80049d8:	7035      	strb	r5, [r6, #0]
 80049da:	6823      	ldr	r3, [r4, #0]
 80049dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80049e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049e4:	d11b      	bne.n	8004a1e <_scanf_float+0x3aa>
 80049e6:	9b01      	ldr	r3, [sp, #4]
 80049e8:	454b      	cmp	r3, r9
 80049ea:	eba3 0209 	sub.w	r2, r3, r9
 80049ee:	d123      	bne.n	8004a38 <_scanf_float+0x3c4>
 80049f0:	2200      	movs	r2, #0
 80049f2:	4659      	mov	r1, fp
 80049f4:	4640      	mov	r0, r8
 80049f6:	f000 fe7b 	bl	80056f0 <_strtod_r>
 80049fa:	6822      	ldr	r2, [r4, #0]
 80049fc:	9b03      	ldr	r3, [sp, #12]
 80049fe:	f012 0f02 	tst.w	r2, #2
 8004a02:	4606      	mov	r6, r0
 8004a04:	460f      	mov	r7, r1
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	d021      	beq.n	8004a4e <_scanf_float+0x3da>
 8004a0a:	1d1a      	adds	r2, r3, #4
 8004a0c:	9903      	ldr	r1, [sp, #12]
 8004a0e:	600a      	str	r2, [r1, #0]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	e9c3 6700 	strd	r6, r7, [r3]
 8004a16:	68e3      	ldr	r3, [r4, #12]
 8004a18:	3301      	adds	r3, #1
 8004a1a:	60e3      	str	r3, [r4, #12]
 8004a1c:	e66d      	b.n	80046fa <_scanf_float+0x86>
 8004a1e:	9b04      	ldr	r3, [sp, #16]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d0e5      	beq.n	80049f0 <_scanf_float+0x37c>
 8004a24:	9905      	ldr	r1, [sp, #20]
 8004a26:	230a      	movs	r3, #10
 8004a28:	462a      	mov	r2, r5
 8004a2a:	4640      	mov	r0, r8
 8004a2c:	3101      	adds	r1, #1
 8004a2e:	f000 fee1 	bl	80057f4 <_strtol_r>
 8004a32:	9b04      	ldr	r3, [sp, #16]
 8004a34:	9e05      	ldr	r6, [sp, #20]
 8004a36:	1ac2      	subs	r2, r0, r3
 8004a38:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004a3c:	429e      	cmp	r6, r3
 8004a3e:	bf28      	it	cs
 8004a40:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8004a44:	4630      	mov	r0, r6
 8004a46:	4910      	ldr	r1, [pc, #64]	; (8004a88 <_scanf_float+0x414>)
 8004a48:	f000 f826 	bl	8004a98 <siprintf>
 8004a4c:	e7d0      	b.n	80049f0 <_scanf_float+0x37c>
 8004a4e:	f012 0f04 	tst.w	r2, #4
 8004a52:	f103 0204 	add.w	r2, r3, #4
 8004a56:	d1d9      	bne.n	8004a0c <_scanf_float+0x398>
 8004a58:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8004a5c:	f8cc 2000 	str.w	r2, [ip]
 8004a60:	f8d3 8000 	ldr.w	r8, [r3]
 8004a64:	4602      	mov	r2, r0
 8004a66:	460b      	mov	r3, r1
 8004a68:	f7fb ffd0 	bl	8000a0c <__aeabi_dcmpun>
 8004a6c:	b128      	cbz	r0, 8004a7a <_scanf_float+0x406>
 8004a6e:	4807      	ldr	r0, [pc, #28]	; (8004a8c <_scanf_float+0x418>)
 8004a70:	f000 f80e 	bl	8004a90 <nanf>
 8004a74:	f8c8 0000 	str.w	r0, [r8]
 8004a78:	e7cd      	b.n	8004a16 <_scanf_float+0x3a2>
 8004a7a:	4630      	mov	r0, r6
 8004a7c:	4639      	mov	r1, r7
 8004a7e:	f7fc f823 	bl	8000ac8 <__aeabi_d2f>
 8004a82:	e7f7      	b.n	8004a74 <_scanf_float+0x400>
 8004a84:	2500      	movs	r5, #0
 8004a86:	e638      	b.n	80046fa <_scanf_float+0x86>
 8004a88:	080086e8 	.word	0x080086e8
 8004a8c:	08008af0 	.word	0x08008af0

08004a90 <nanf>:
 8004a90:	4800      	ldr	r0, [pc, #0]	; (8004a94 <nanf+0x4>)
 8004a92:	4770      	bx	lr
 8004a94:	7fc00000 	.word	0x7fc00000

08004a98 <siprintf>:
 8004a98:	b40e      	push	{r1, r2, r3}
 8004a9a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004a9e:	b500      	push	{lr}
 8004aa0:	b09c      	sub	sp, #112	; 0x70
 8004aa2:	ab1d      	add	r3, sp, #116	; 0x74
 8004aa4:	9002      	str	r0, [sp, #8]
 8004aa6:	9006      	str	r0, [sp, #24]
 8004aa8:	9107      	str	r1, [sp, #28]
 8004aaa:	9104      	str	r1, [sp, #16]
 8004aac:	4808      	ldr	r0, [pc, #32]	; (8004ad0 <siprintf+0x38>)
 8004aae:	4909      	ldr	r1, [pc, #36]	; (8004ad4 <siprintf+0x3c>)
 8004ab0:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ab4:	9105      	str	r1, [sp, #20]
 8004ab6:	6800      	ldr	r0, [r0, #0]
 8004ab8:	a902      	add	r1, sp, #8
 8004aba:	9301      	str	r3, [sp, #4]
 8004abc:	f002 feba 	bl	8007834 <_svfiprintf_r>
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	9b02      	ldr	r3, [sp, #8]
 8004ac4:	701a      	strb	r2, [r3, #0]
 8004ac6:	b01c      	add	sp, #112	; 0x70
 8004ac8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004acc:	b003      	add	sp, #12
 8004ace:	4770      	bx	lr
 8004ad0:	2000000c 	.word	0x2000000c
 8004ad4:	ffff0208 	.word	0xffff0208

08004ad8 <sulp>:
 8004ad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004adc:	460f      	mov	r7, r1
 8004ade:	4690      	mov	r8, r2
 8004ae0:	f002 fc14 	bl	800730c <__ulp>
 8004ae4:	4604      	mov	r4, r0
 8004ae6:	460d      	mov	r5, r1
 8004ae8:	f1b8 0f00 	cmp.w	r8, #0
 8004aec:	d011      	beq.n	8004b12 <sulp+0x3a>
 8004aee:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8004af2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	dd0b      	ble.n	8004b12 <sulp+0x3a>
 8004afa:	2400      	movs	r4, #0
 8004afc:	051b      	lsls	r3, r3, #20
 8004afe:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004b02:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004b06:	4622      	mov	r2, r4
 8004b08:	462b      	mov	r3, r5
 8004b0a:	f7fb fce5 	bl	80004d8 <__aeabi_dmul>
 8004b0e:	4604      	mov	r4, r0
 8004b10:	460d      	mov	r5, r1
 8004b12:	4620      	mov	r0, r4
 8004b14:	4629      	mov	r1, r5
 8004b16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b1a:	0000      	movs	r0, r0
 8004b1c:	0000      	movs	r0, r0
	...

08004b20 <_strtod_l>:
 8004b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b24:	469b      	mov	fp, r3
 8004b26:	2300      	movs	r3, #0
 8004b28:	b09f      	sub	sp, #124	; 0x7c
 8004b2a:	931a      	str	r3, [sp, #104]	; 0x68
 8004b2c:	4b9e      	ldr	r3, [pc, #632]	; (8004da8 <_strtod_l+0x288>)
 8004b2e:	4682      	mov	sl, r0
 8004b30:	681f      	ldr	r7, [r3, #0]
 8004b32:	460e      	mov	r6, r1
 8004b34:	4638      	mov	r0, r7
 8004b36:	9215      	str	r2, [sp, #84]	; 0x54
 8004b38:	f7fb fb0a 	bl	8000150 <strlen>
 8004b3c:	f04f 0800 	mov.w	r8, #0
 8004b40:	4604      	mov	r4, r0
 8004b42:	f04f 0900 	mov.w	r9, #0
 8004b46:	9619      	str	r6, [sp, #100]	; 0x64
 8004b48:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004b4a:	781a      	ldrb	r2, [r3, #0]
 8004b4c:	2a2b      	cmp	r2, #43	; 0x2b
 8004b4e:	d04c      	beq.n	8004bea <_strtod_l+0xca>
 8004b50:	d83a      	bhi.n	8004bc8 <_strtod_l+0xa8>
 8004b52:	2a0d      	cmp	r2, #13
 8004b54:	d833      	bhi.n	8004bbe <_strtod_l+0x9e>
 8004b56:	2a08      	cmp	r2, #8
 8004b58:	d833      	bhi.n	8004bc2 <_strtod_l+0xa2>
 8004b5a:	2a00      	cmp	r2, #0
 8004b5c:	d03d      	beq.n	8004bda <_strtod_l+0xba>
 8004b5e:	2300      	movs	r3, #0
 8004b60:	930a      	str	r3, [sp, #40]	; 0x28
 8004b62:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8004b64:	782b      	ldrb	r3, [r5, #0]
 8004b66:	2b30      	cmp	r3, #48	; 0x30
 8004b68:	f040 80aa 	bne.w	8004cc0 <_strtod_l+0x1a0>
 8004b6c:	786b      	ldrb	r3, [r5, #1]
 8004b6e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004b72:	2b58      	cmp	r3, #88	; 0x58
 8004b74:	d166      	bne.n	8004c44 <_strtod_l+0x124>
 8004b76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b78:	4650      	mov	r0, sl
 8004b7a:	9301      	str	r3, [sp, #4]
 8004b7c:	ab1a      	add	r3, sp, #104	; 0x68
 8004b7e:	9300      	str	r3, [sp, #0]
 8004b80:	4a8a      	ldr	r2, [pc, #552]	; (8004dac <_strtod_l+0x28c>)
 8004b82:	f8cd b008 	str.w	fp, [sp, #8]
 8004b86:	ab1b      	add	r3, sp, #108	; 0x6c
 8004b88:	a919      	add	r1, sp, #100	; 0x64
 8004b8a:	f001 fd17 	bl	80065bc <__gethex>
 8004b8e:	f010 0607 	ands.w	r6, r0, #7
 8004b92:	4604      	mov	r4, r0
 8004b94:	d005      	beq.n	8004ba2 <_strtod_l+0x82>
 8004b96:	2e06      	cmp	r6, #6
 8004b98:	d129      	bne.n	8004bee <_strtod_l+0xce>
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	3501      	adds	r5, #1
 8004b9e:	9519      	str	r5, [sp, #100]	; 0x64
 8004ba0:	930a      	str	r3, [sp, #40]	; 0x28
 8004ba2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	f040 858a 	bne.w	80056be <_strtod_l+0xb9e>
 8004baa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004bac:	b1d3      	cbz	r3, 8004be4 <_strtod_l+0xc4>
 8004bae:	4642      	mov	r2, r8
 8004bb0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004bb4:	4610      	mov	r0, r2
 8004bb6:	4619      	mov	r1, r3
 8004bb8:	b01f      	add	sp, #124	; 0x7c
 8004bba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bbe:	2a20      	cmp	r2, #32
 8004bc0:	d1cd      	bne.n	8004b5e <_strtod_l+0x3e>
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	9319      	str	r3, [sp, #100]	; 0x64
 8004bc6:	e7bf      	b.n	8004b48 <_strtod_l+0x28>
 8004bc8:	2a2d      	cmp	r2, #45	; 0x2d
 8004bca:	d1c8      	bne.n	8004b5e <_strtod_l+0x3e>
 8004bcc:	2201      	movs	r2, #1
 8004bce:	920a      	str	r2, [sp, #40]	; 0x28
 8004bd0:	1c5a      	adds	r2, r3, #1
 8004bd2:	9219      	str	r2, [sp, #100]	; 0x64
 8004bd4:	785b      	ldrb	r3, [r3, #1]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d1c3      	bne.n	8004b62 <_strtod_l+0x42>
 8004bda:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004bdc:	9619      	str	r6, [sp, #100]	; 0x64
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	f040 856b 	bne.w	80056ba <_strtod_l+0xb9a>
 8004be4:	4642      	mov	r2, r8
 8004be6:	464b      	mov	r3, r9
 8004be8:	e7e4      	b.n	8004bb4 <_strtod_l+0x94>
 8004bea:	2200      	movs	r2, #0
 8004bec:	e7ef      	b.n	8004bce <_strtod_l+0xae>
 8004bee:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8004bf0:	b13a      	cbz	r2, 8004c02 <_strtod_l+0xe2>
 8004bf2:	2135      	movs	r1, #53	; 0x35
 8004bf4:	a81c      	add	r0, sp, #112	; 0x70
 8004bf6:	f002 fc8d 	bl	8007514 <__copybits>
 8004bfa:	4650      	mov	r0, sl
 8004bfc:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004bfe:	f002 f855 	bl	8006cac <_Bfree>
 8004c02:	3e01      	subs	r6, #1
 8004c04:	2e04      	cmp	r6, #4
 8004c06:	d806      	bhi.n	8004c16 <_strtod_l+0xf6>
 8004c08:	e8df f006 	tbb	[pc, r6]
 8004c0c:	1714030a 	.word	0x1714030a
 8004c10:	0a          	.byte	0x0a
 8004c11:	00          	.byte	0x00
 8004c12:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8004c16:	0721      	lsls	r1, r4, #28
 8004c18:	d5c3      	bpl.n	8004ba2 <_strtod_l+0x82>
 8004c1a:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8004c1e:	e7c0      	b.n	8004ba2 <_strtod_l+0x82>
 8004c20:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8004c22:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8004c26:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004c2a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004c2e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8004c32:	e7f0      	b.n	8004c16 <_strtod_l+0xf6>
 8004c34:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8004db0 <_strtod_l+0x290>
 8004c38:	e7ed      	b.n	8004c16 <_strtod_l+0xf6>
 8004c3a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8004c3e:	f04f 38ff 	mov.w	r8, #4294967295
 8004c42:	e7e8      	b.n	8004c16 <_strtod_l+0xf6>
 8004c44:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004c46:	1c5a      	adds	r2, r3, #1
 8004c48:	9219      	str	r2, [sp, #100]	; 0x64
 8004c4a:	785b      	ldrb	r3, [r3, #1]
 8004c4c:	2b30      	cmp	r3, #48	; 0x30
 8004c4e:	d0f9      	beq.n	8004c44 <_strtod_l+0x124>
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d0a6      	beq.n	8004ba2 <_strtod_l+0x82>
 8004c54:	2301      	movs	r3, #1
 8004c56:	9307      	str	r3, [sp, #28]
 8004c58:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004c5a:	220a      	movs	r2, #10
 8004c5c:	9308      	str	r3, [sp, #32]
 8004c5e:	2300      	movs	r3, #0
 8004c60:	469b      	mov	fp, r3
 8004c62:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8004c66:	9819      	ldr	r0, [sp, #100]	; 0x64
 8004c68:	7805      	ldrb	r5, [r0, #0]
 8004c6a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8004c6e:	b2d9      	uxtb	r1, r3
 8004c70:	2909      	cmp	r1, #9
 8004c72:	d927      	bls.n	8004cc4 <_strtod_l+0x1a4>
 8004c74:	4622      	mov	r2, r4
 8004c76:	4639      	mov	r1, r7
 8004c78:	f002 fef2 	bl	8007a60 <strncmp>
 8004c7c:	2800      	cmp	r0, #0
 8004c7e:	d033      	beq.n	8004ce8 <_strtod_l+0x1c8>
 8004c80:	2000      	movs	r0, #0
 8004c82:	462a      	mov	r2, r5
 8004c84:	465c      	mov	r4, fp
 8004c86:	4603      	mov	r3, r0
 8004c88:	9004      	str	r0, [sp, #16]
 8004c8a:	2a65      	cmp	r2, #101	; 0x65
 8004c8c:	d001      	beq.n	8004c92 <_strtod_l+0x172>
 8004c8e:	2a45      	cmp	r2, #69	; 0x45
 8004c90:	d114      	bne.n	8004cbc <_strtod_l+0x19c>
 8004c92:	b91c      	cbnz	r4, 8004c9c <_strtod_l+0x17c>
 8004c94:	9a07      	ldr	r2, [sp, #28]
 8004c96:	4302      	orrs	r2, r0
 8004c98:	d09f      	beq.n	8004bda <_strtod_l+0xba>
 8004c9a:	2400      	movs	r4, #0
 8004c9c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8004c9e:	1c72      	adds	r2, r6, #1
 8004ca0:	9219      	str	r2, [sp, #100]	; 0x64
 8004ca2:	7872      	ldrb	r2, [r6, #1]
 8004ca4:	2a2b      	cmp	r2, #43	; 0x2b
 8004ca6:	d079      	beq.n	8004d9c <_strtod_l+0x27c>
 8004ca8:	2a2d      	cmp	r2, #45	; 0x2d
 8004caa:	f000 8083 	beq.w	8004db4 <_strtod_l+0x294>
 8004cae:	2700      	movs	r7, #0
 8004cb0:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004cb4:	2909      	cmp	r1, #9
 8004cb6:	f240 8083 	bls.w	8004dc0 <_strtod_l+0x2a0>
 8004cba:	9619      	str	r6, [sp, #100]	; 0x64
 8004cbc:	2500      	movs	r5, #0
 8004cbe:	e09f      	b.n	8004e00 <_strtod_l+0x2e0>
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	e7c8      	b.n	8004c56 <_strtod_l+0x136>
 8004cc4:	f1bb 0f08 	cmp.w	fp, #8
 8004cc8:	bfd5      	itete	le
 8004cca:	9906      	ldrle	r1, [sp, #24]
 8004ccc:	9905      	ldrgt	r1, [sp, #20]
 8004cce:	fb02 3301 	mlale	r3, r2, r1, r3
 8004cd2:	fb02 3301 	mlagt	r3, r2, r1, r3
 8004cd6:	f100 0001 	add.w	r0, r0, #1
 8004cda:	bfd4      	ite	le
 8004cdc:	9306      	strle	r3, [sp, #24]
 8004cde:	9305      	strgt	r3, [sp, #20]
 8004ce0:	f10b 0b01 	add.w	fp, fp, #1
 8004ce4:	9019      	str	r0, [sp, #100]	; 0x64
 8004ce6:	e7be      	b.n	8004c66 <_strtod_l+0x146>
 8004ce8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004cea:	191a      	adds	r2, r3, r4
 8004cec:	9219      	str	r2, [sp, #100]	; 0x64
 8004cee:	5d1a      	ldrb	r2, [r3, r4]
 8004cf0:	f1bb 0f00 	cmp.w	fp, #0
 8004cf4:	d036      	beq.n	8004d64 <_strtod_l+0x244>
 8004cf6:	465c      	mov	r4, fp
 8004cf8:	9004      	str	r0, [sp, #16]
 8004cfa:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8004cfe:	2b09      	cmp	r3, #9
 8004d00:	d912      	bls.n	8004d28 <_strtod_l+0x208>
 8004d02:	2301      	movs	r3, #1
 8004d04:	e7c1      	b.n	8004c8a <_strtod_l+0x16a>
 8004d06:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004d08:	3001      	adds	r0, #1
 8004d0a:	1c5a      	adds	r2, r3, #1
 8004d0c:	9219      	str	r2, [sp, #100]	; 0x64
 8004d0e:	785a      	ldrb	r2, [r3, #1]
 8004d10:	2a30      	cmp	r2, #48	; 0x30
 8004d12:	d0f8      	beq.n	8004d06 <_strtod_l+0x1e6>
 8004d14:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8004d18:	2b08      	cmp	r3, #8
 8004d1a:	f200 84d5 	bhi.w	80056c8 <_strtod_l+0xba8>
 8004d1e:	9004      	str	r0, [sp, #16]
 8004d20:	2000      	movs	r0, #0
 8004d22:	4604      	mov	r4, r0
 8004d24:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004d26:	9308      	str	r3, [sp, #32]
 8004d28:	3a30      	subs	r2, #48	; 0x30
 8004d2a:	f100 0301 	add.w	r3, r0, #1
 8004d2e:	d013      	beq.n	8004d58 <_strtod_l+0x238>
 8004d30:	9904      	ldr	r1, [sp, #16]
 8004d32:	1905      	adds	r5, r0, r4
 8004d34:	4419      	add	r1, r3
 8004d36:	9104      	str	r1, [sp, #16]
 8004d38:	4623      	mov	r3, r4
 8004d3a:	210a      	movs	r1, #10
 8004d3c:	42ab      	cmp	r3, r5
 8004d3e:	d113      	bne.n	8004d68 <_strtod_l+0x248>
 8004d40:	1823      	adds	r3, r4, r0
 8004d42:	2b08      	cmp	r3, #8
 8004d44:	f104 0401 	add.w	r4, r4, #1
 8004d48:	4404      	add	r4, r0
 8004d4a:	dc1b      	bgt.n	8004d84 <_strtod_l+0x264>
 8004d4c:	230a      	movs	r3, #10
 8004d4e:	9906      	ldr	r1, [sp, #24]
 8004d50:	fb03 2301 	mla	r3, r3, r1, r2
 8004d54:	9306      	str	r3, [sp, #24]
 8004d56:	2300      	movs	r3, #0
 8004d58:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	1c51      	adds	r1, r2, #1
 8004d5e:	9119      	str	r1, [sp, #100]	; 0x64
 8004d60:	7852      	ldrb	r2, [r2, #1]
 8004d62:	e7ca      	b.n	8004cfa <_strtod_l+0x1da>
 8004d64:	4658      	mov	r0, fp
 8004d66:	e7d3      	b.n	8004d10 <_strtod_l+0x1f0>
 8004d68:	2b08      	cmp	r3, #8
 8004d6a:	dc04      	bgt.n	8004d76 <_strtod_l+0x256>
 8004d6c:	9f06      	ldr	r7, [sp, #24]
 8004d6e:	434f      	muls	r7, r1
 8004d70:	9706      	str	r7, [sp, #24]
 8004d72:	3301      	adds	r3, #1
 8004d74:	e7e2      	b.n	8004d3c <_strtod_l+0x21c>
 8004d76:	1c5f      	adds	r7, r3, #1
 8004d78:	2f10      	cmp	r7, #16
 8004d7a:	bfde      	ittt	le
 8004d7c:	9f05      	ldrle	r7, [sp, #20]
 8004d7e:	434f      	mulle	r7, r1
 8004d80:	9705      	strle	r7, [sp, #20]
 8004d82:	e7f6      	b.n	8004d72 <_strtod_l+0x252>
 8004d84:	2c10      	cmp	r4, #16
 8004d86:	bfdf      	itttt	le
 8004d88:	230a      	movle	r3, #10
 8004d8a:	9905      	ldrle	r1, [sp, #20]
 8004d8c:	fb03 2301 	mlale	r3, r3, r1, r2
 8004d90:	9305      	strle	r3, [sp, #20]
 8004d92:	e7e0      	b.n	8004d56 <_strtod_l+0x236>
 8004d94:	2300      	movs	r3, #0
 8004d96:	9304      	str	r3, [sp, #16]
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e77b      	b.n	8004c94 <_strtod_l+0x174>
 8004d9c:	2700      	movs	r7, #0
 8004d9e:	1cb2      	adds	r2, r6, #2
 8004da0:	9219      	str	r2, [sp, #100]	; 0x64
 8004da2:	78b2      	ldrb	r2, [r6, #2]
 8004da4:	e784      	b.n	8004cb0 <_strtod_l+0x190>
 8004da6:	bf00      	nop
 8004da8:	08008938 	.word	0x08008938
 8004dac:	080086f0 	.word	0x080086f0
 8004db0:	7ff00000 	.word	0x7ff00000
 8004db4:	2701      	movs	r7, #1
 8004db6:	e7f2      	b.n	8004d9e <_strtod_l+0x27e>
 8004db8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004dba:	1c51      	adds	r1, r2, #1
 8004dbc:	9119      	str	r1, [sp, #100]	; 0x64
 8004dbe:	7852      	ldrb	r2, [r2, #1]
 8004dc0:	2a30      	cmp	r2, #48	; 0x30
 8004dc2:	d0f9      	beq.n	8004db8 <_strtod_l+0x298>
 8004dc4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8004dc8:	2908      	cmp	r1, #8
 8004dca:	f63f af77 	bhi.w	8004cbc <_strtod_l+0x19c>
 8004dce:	f04f 0e0a 	mov.w	lr, #10
 8004dd2:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8004dd6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004dd8:	9209      	str	r2, [sp, #36]	; 0x24
 8004dda:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004ddc:	1c51      	adds	r1, r2, #1
 8004dde:	9119      	str	r1, [sp, #100]	; 0x64
 8004de0:	7852      	ldrb	r2, [r2, #1]
 8004de2:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8004de6:	2d09      	cmp	r5, #9
 8004de8:	d935      	bls.n	8004e56 <_strtod_l+0x336>
 8004dea:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004dec:	1b49      	subs	r1, r1, r5
 8004dee:	2908      	cmp	r1, #8
 8004df0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8004df4:	dc02      	bgt.n	8004dfc <_strtod_l+0x2dc>
 8004df6:	4565      	cmp	r5, ip
 8004df8:	bfa8      	it	ge
 8004dfa:	4665      	movge	r5, ip
 8004dfc:	b107      	cbz	r7, 8004e00 <_strtod_l+0x2e0>
 8004dfe:	426d      	negs	r5, r5
 8004e00:	2c00      	cmp	r4, #0
 8004e02:	d14c      	bne.n	8004e9e <_strtod_l+0x37e>
 8004e04:	9907      	ldr	r1, [sp, #28]
 8004e06:	4301      	orrs	r1, r0
 8004e08:	f47f aecb 	bne.w	8004ba2 <_strtod_l+0x82>
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	f47f aee4 	bne.w	8004bda <_strtod_l+0xba>
 8004e12:	2a69      	cmp	r2, #105	; 0x69
 8004e14:	d026      	beq.n	8004e64 <_strtod_l+0x344>
 8004e16:	dc23      	bgt.n	8004e60 <_strtod_l+0x340>
 8004e18:	2a49      	cmp	r2, #73	; 0x49
 8004e1a:	d023      	beq.n	8004e64 <_strtod_l+0x344>
 8004e1c:	2a4e      	cmp	r2, #78	; 0x4e
 8004e1e:	f47f aedc 	bne.w	8004bda <_strtod_l+0xba>
 8004e22:	499d      	ldr	r1, [pc, #628]	; (8005098 <_strtod_l+0x578>)
 8004e24:	a819      	add	r0, sp, #100	; 0x64
 8004e26:	f001 fe17 	bl	8006a58 <__match>
 8004e2a:	2800      	cmp	r0, #0
 8004e2c:	f43f aed5 	beq.w	8004bda <_strtod_l+0xba>
 8004e30:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004e32:	781b      	ldrb	r3, [r3, #0]
 8004e34:	2b28      	cmp	r3, #40	; 0x28
 8004e36:	d12c      	bne.n	8004e92 <_strtod_l+0x372>
 8004e38:	4998      	ldr	r1, [pc, #608]	; (800509c <_strtod_l+0x57c>)
 8004e3a:	aa1c      	add	r2, sp, #112	; 0x70
 8004e3c:	a819      	add	r0, sp, #100	; 0x64
 8004e3e:	f001 fe1f 	bl	8006a80 <__hexnan>
 8004e42:	2805      	cmp	r0, #5
 8004e44:	d125      	bne.n	8004e92 <_strtod_l+0x372>
 8004e46:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004e48:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8004e4c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8004e50:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8004e54:	e6a5      	b.n	8004ba2 <_strtod_l+0x82>
 8004e56:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8004e5a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8004e5e:	e7bc      	b.n	8004dda <_strtod_l+0x2ba>
 8004e60:	2a6e      	cmp	r2, #110	; 0x6e
 8004e62:	e7dc      	b.n	8004e1e <_strtod_l+0x2fe>
 8004e64:	498e      	ldr	r1, [pc, #568]	; (80050a0 <_strtod_l+0x580>)
 8004e66:	a819      	add	r0, sp, #100	; 0x64
 8004e68:	f001 fdf6 	bl	8006a58 <__match>
 8004e6c:	2800      	cmp	r0, #0
 8004e6e:	f43f aeb4 	beq.w	8004bda <_strtod_l+0xba>
 8004e72:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004e74:	498b      	ldr	r1, [pc, #556]	; (80050a4 <_strtod_l+0x584>)
 8004e76:	3b01      	subs	r3, #1
 8004e78:	a819      	add	r0, sp, #100	; 0x64
 8004e7a:	9319      	str	r3, [sp, #100]	; 0x64
 8004e7c:	f001 fdec 	bl	8006a58 <__match>
 8004e80:	b910      	cbnz	r0, 8004e88 <_strtod_l+0x368>
 8004e82:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004e84:	3301      	adds	r3, #1
 8004e86:	9319      	str	r3, [sp, #100]	; 0x64
 8004e88:	f04f 0800 	mov.w	r8, #0
 8004e8c:	f8df 9218 	ldr.w	r9, [pc, #536]	; 80050a8 <_strtod_l+0x588>
 8004e90:	e687      	b.n	8004ba2 <_strtod_l+0x82>
 8004e92:	4886      	ldr	r0, [pc, #536]	; (80050ac <_strtod_l+0x58c>)
 8004e94:	f002 fdce 	bl	8007a34 <nan>
 8004e98:	4680      	mov	r8, r0
 8004e9a:	4689      	mov	r9, r1
 8004e9c:	e681      	b.n	8004ba2 <_strtod_l+0x82>
 8004e9e:	9b04      	ldr	r3, [sp, #16]
 8004ea0:	f1bb 0f00 	cmp.w	fp, #0
 8004ea4:	bf08      	it	eq
 8004ea6:	46a3      	moveq	fp, r4
 8004ea8:	1aeb      	subs	r3, r5, r3
 8004eaa:	2c10      	cmp	r4, #16
 8004eac:	9806      	ldr	r0, [sp, #24]
 8004eae:	4626      	mov	r6, r4
 8004eb0:	9307      	str	r3, [sp, #28]
 8004eb2:	bfa8      	it	ge
 8004eb4:	2610      	movge	r6, #16
 8004eb6:	f7fb fa95 	bl	80003e4 <__aeabi_ui2d>
 8004eba:	2c09      	cmp	r4, #9
 8004ebc:	4680      	mov	r8, r0
 8004ebe:	4689      	mov	r9, r1
 8004ec0:	dd13      	ble.n	8004eea <_strtod_l+0x3ca>
 8004ec2:	4b7b      	ldr	r3, [pc, #492]	; (80050b0 <_strtod_l+0x590>)
 8004ec4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004ec8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8004ecc:	f7fb fb04 	bl	80004d8 <__aeabi_dmul>
 8004ed0:	4680      	mov	r8, r0
 8004ed2:	9805      	ldr	r0, [sp, #20]
 8004ed4:	4689      	mov	r9, r1
 8004ed6:	f7fb fa85 	bl	80003e4 <__aeabi_ui2d>
 8004eda:	4602      	mov	r2, r0
 8004edc:	460b      	mov	r3, r1
 8004ede:	4640      	mov	r0, r8
 8004ee0:	4649      	mov	r1, r9
 8004ee2:	f7fb f943 	bl	800016c <__adddf3>
 8004ee6:	4680      	mov	r8, r0
 8004ee8:	4689      	mov	r9, r1
 8004eea:	2c0f      	cmp	r4, #15
 8004eec:	dc36      	bgt.n	8004f5c <_strtod_l+0x43c>
 8004eee:	9b07      	ldr	r3, [sp, #28]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	f43f ae56 	beq.w	8004ba2 <_strtod_l+0x82>
 8004ef6:	dd22      	ble.n	8004f3e <_strtod_l+0x41e>
 8004ef8:	2b16      	cmp	r3, #22
 8004efa:	dc09      	bgt.n	8004f10 <_strtod_l+0x3f0>
 8004efc:	496c      	ldr	r1, [pc, #432]	; (80050b0 <_strtod_l+0x590>)
 8004efe:	4642      	mov	r2, r8
 8004f00:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004f04:	464b      	mov	r3, r9
 8004f06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004f0a:	f7fb fae5 	bl	80004d8 <__aeabi_dmul>
 8004f0e:	e7c3      	b.n	8004e98 <_strtod_l+0x378>
 8004f10:	9a07      	ldr	r2, [sp, #28]
 8004f12:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8004f16:	4293      	cmp	r3, r2
 8004f18:	db20      	blt.n	8004f5c <_strtod_l+0x43c>
 8004f1a:	4d65      	ldr	r5, [pc, #404]	; (80050b0 <_strtod_l+0x590>)
 8004f1c:	f1c4 040f 	rsb	r4, r4, #15
 8004f20:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8004f24:	4642      	mov	r2, r8
 8004f26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004f2a:	464b      	mov	r3, r9
 8004f2c:	f7fb fad4 	bl	80004d8 <__aeabi_dmul>
 8004f30:	9b07      	ldr	r3, [sp, #28]
 8004f32:	1b1c      	subs	r4, r3, r4
 8004f34:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8004f38:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004f3c:	e7e5      	b.n	8004f0a <_strtod_l+0x3ea>
 8004f3e:	9b07      	ldr	r3, [sp, #28]
 8004f40:	3316      	adds	r3, #22
 8004f42:	db0b      	blt.n	8004f5c <_strtod_l+0x43c>
 8004f44:	9b04      	ldr	r3, [sp, #16]
 8004f46:	4640      	mov	r0, r8
 8004f48:	1b5d      	subs	r5, r3, r5
 8004f4a:	4b59      	ldr	r3, [pc, #356]	; (80050b0 <_strtod_l+0x590>)
 8004f4c:	4649      	mov	r1, r9
 8004f4e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8004f52:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004f56:	f7fb fbe9 	bl	800072c <__aeabi_ddiv>
 8004f5a:	e79d      	b.n	8004e98 <_strtod_l+0x378>
 8004f5c:	9b07      	ldr	r3, [sp, #28]
 8004f5e:	1ba6      	subs	r6, r4, r6
 8004f60:	441e      	add	r6, r3
 8004f62:	2e00      	cmp	r6, #0
 8004f64:	dd74      	ble.n	8005050 <_strtod_l+0x530>
 8004f66:	f016 030f 	ands.w	r3, r6, #15
 8004f6a:	d00a      	beq.n	8004f82 <_strtod_l+0x462>
 8004f6c:	4950      	ldr	r1, [pc, #320]	; (80050b0 <_strtod_l+0x590>)
 8004f6e:	4642      	mov	r2, r8
 8004f70:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004f74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004f78:	464b      	mov	r3, r9
 8004f7a:	f7fb faad 	bl	80004d8 <__aeabi_dmul>
 8004f7e:	4680      	mov	r8, r0
 8004f80:	4689      	mov	r9, r1
 8004f82:	f036 060f 	bics.w	r6, r6, #15
 8004f86:	d052      	beq.n	800502e <_strtod_l+0x50e>
 8004f88:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8004f8c:	dd27      	ble.n	8004fde <_strtod_l+0x4be>
 8004f8e:	f04f 0b00 	mov.w	fp, #0
 8004f92:	f8cd b010 	str.w	fp, [sp, #16]
 8004f96:	f8cd b020 	str.w	fp, [sp, #32]
 8004f9a:	f8cd b018 	str.w	fp, [sp, #24]
 8004f9e:	2322      	movs	r3, #34	; 0x22
 8004fa0:	f04f 0800 	mov.w	r8, #0
 8004fa4:	f8df 9100 	ldr.w	r9, [pc, #256]	; 80050a8 <_strtod_l+0x588>
 8004fa8:	f8ca 3000 	str.w	r3, [sl]
 8004fac:	9b08      	ldr	r3, [sp, #32]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	f43f adf7 	beq.w	8004ba2 <_strtod_l+0x82>
 8004fb4:	4650      	mov	r0, sl
 8004fb6:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004fb8:	f001 fe78 	bl	8006cac <_Bfree>
 8004fbc:	4650      	mov	r0, sl
 8004fbe:	9906      	ldr	r1, [sp, #24]
 8004fc0:	f001 fe74 	bl	8006cac <_Bfree>
 8004fc4:	4650      	mov	r0, sl
 8004fc6:	9904      	ldr	r1, [sp, #16]
 8004fc8:	f001 fe70 	bl	8006cac <_Bfree>
 8004fcc:	4650      	mov	r0, sl
 8004fce:	9908      	ldr	r1, [sp, #32]
 8004fd0:	f001 fe6c 	bl	8006cac <_Bfree>
 8004fd4:	4659      	mov	r1, fp
 8004fd6:	4650      	mov	r0, sl
 8004fd8:	f001 fe68 	bl	8006cac <_Bfree>
 8004fdc:	e5e1      	b.n	8004ba2 <_strtod_l+0x82>
 8004fde:	4b35      	ldr	r3, [pc, #212]	; (80050b4 <_strtod_l+0x594>)
 8004fe0:	4640      	mov	r0, r8
 8004fe2:	9305      	str	r3, [sp, #20]
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	4649      	mov	r1, r9
 8004fe8:	461f      	mov	r7, r3
 8004fea:	1136      	asrs	r6, r6, #4
 8004fec:	2e01      	cmp	r6, #1
 8004fee:	dc21      	bgt.n	8005034 <_strtod_l+0x514>
 8004ff0:	b10b      	cbz	r3, 8004ff6 <_strtod_l+0x4d6>
 8004ff2:	4680      	mov	r8, r0
 8004ff4:	4689      	mov	r9, r1
 8004ff6:	4b2f      	ldr	r3, [pc, #188]	; (80050b4 <_strtod_l+0x594>)
 8004ff8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8004ffc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8005000:	4642      	mov	r2, r8
 8005002:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005006:	464b      	mov	r3, r9
 8005008:	f7fb fa66 	bl	80004d8 <__aeabi_dmul>
 800500c:	4b26      	ldr	r3, [pc, #152]	; (80050a8 <_strtod_l+0x588>)
 800500e:	460a      	mov	r2, r1
 8005010:	400b      	ands	r3, r1
 8005012:	4929      	ldr	r1, [pc, #164]	; (80050b8 <_strtod_l+0x598>)
 8005014:	4680      	mov	r8, r0
 8005016:	428b      	cmp	r3, r1
 8005018:	d8b9      	bhi.n	8004f8e <_strtod_l+0x46e>
 800501a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800501e:	428b      	cmp	r3, r1
 8005020:	bf86      	itte	hi
 8005022:	f04f 38ff 	movhi.w	r8, #4294967295
 8005026:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 80050bc <_strtod_l+0x59c>
 800502a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800502e:	2300      	movs	r3, #0
 8005030:	9305      	str	r3, [sp, #20]
 8005032:	e07f      	b.n	8005134 <_strtod_l+0x614>
 8005034:	07f2      	lsls	r2, r6, #31
 8005036:	d505      	bpl.n	8005044 <_strtod_l+0x524>
 8005038:	9b05      	ldr	r3, [sp, #20]
 800503a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800503e:	f7fb fa4b 	bl	80004d8 <__aeabi_dmul>
 8005042:	2301      	movs	r3, #1
 8005044:	9a05      	ldr	r2, [sp, #20]
 8005046:	3701      	adds	r7, #1
 8005048:	3208      	adds	r2, #8
 800504a:	1076      	asrs	r6, r6, #1
 800504c:	9205      	str	r2, [sp, #20]
 800504e:	e7cd      	b.n	8004fec <_strtod_l+0x4cc>
 8005050:	d0ed      	beq.n	800502e <_strtod_l+0x50e>
 8005052:	4276      	negs	r6, r6
 8005054:	f016 020f 	ands.w	r2, r6, #15
 8005058:	d00a      	beq.n	8005070 <_strtod_l+0x550>
 800505a:	4b15      	ldr	r3, [pc, #84]	; (80050b0 <_strtod_l+0x590>)
 800505c:	4640      	mov	r0, r8
 800505e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005062:	4649      	mov	r1, r9
 8005064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005068:	f7fb fb60 	bl	800072c <__aeabi_ddiv>
 800506c:	4680      	mov	r8, r0
 800506e:	4689      	mov	r9, r1
 8005070:	1136      	asrs	r6, r6, #4
 8005072:	d0dc      	beq.n	800502e <_strtod_l+0x50e>
 8005074:	2e1f      	cmp	r6, #31
 8005076:	dd23      	ble.n	80050c0 <_strtod_l+0x5a0>
 8005078:	f04f 0b00 	mov.w	fp, #0
 800507c:	f8cd b010 	str.w	fp, [sp, #16]
 8005080:	f8cd b020 	str.w	fp, [sp, #32]
 8005084:	f8cd b018 	str.w	fp, [sp, #24]
 8005088:	2322      	movs	r3, #34	; 0x22
 800508a:	f04f 0800 	mov.w	r8, #0
 800508e:	f04f 0900 	mov.w	r9, #0
 8005092:	f8ca 3000 	str.w	r3, [sl]
 8005096:	e789      	b.n	8004fac <_strtod_l+0x48c>
 8005098:	080086c1 	.word	0x080086c1
 800509c:	08008704 	.word	0x08008704
 80050a0:	080086b9 	.word	0x080086b9
 80050a4:	08008844 	.word	0x08008844
 80050a8:	7ff00000 	.word	0x7ff00000
 80050ac:	08008af0 	.word	0x08008af0
 80050b0:	080089d0 	.word	0x080089d0
 80050b4:	080089a8 	.word	0x080089a8
 80050b8:	7ca00000 	.word	0x7ca00000
 80050bc:	7fefffff 	.word	0x7fefffff
 80050c0:	f016 0310 	ands.w	r3, r6, #16
 80050c4:	bf18      	it	ne
 80050c6:	236a      	movne	r3, #106	; 0x6a
 80050c8:	4640      	mov	r0, r8
 80050ca:	9305      	str	r3, [sp, #20]
 80050cc:	4649      	mov	r1, r9
 80050ce:	2300      	movs	r3, #0
 80050d0:	4fb0      	ldr	r7, [pc, #704]	; (8005394 <_strtod_l+0x874>)
 80050d2:	07f2      	lsls	r2, r6, #31
 80050d4:	d504      	bpl.n	80050e0 <_strtod_l+0x5c0>
 80050d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050da:	f7fb f9fd 	bl	80004d8 <__aeabi_dmul>
 80050de:	2301      	movs	r3, #1
 80050e0:	1076      	asrs	r6, r6, #1
 80050e2:	f107 0708 	add.w	r7, r7, #8
 80050e6:	d1f4      	bne.n	80050d2 <_strtod_l+0x5b2>
 80050e8:	b10b      	cbz	r3, 80050ee <_strtod_l+0x5ce>
 80050ea:	4680      	mov	r8, r0
 80050ec:	4689      	mov	r9, r1
 80050ee:	9b05      	ldr	r3, [sp, #20]
 80050f0:	b1c3      	cbz	r3, 8005124 <_strtod_l+0x604>
 80050f2:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80050f6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	4649      	mov	r1, r9
 80050fe:	dd11      	ble.n	8005124 <_strtod_l+0x604>
 8005100:	2b1f      	cmp	r3, #31
 8005102:	f340 8127 	ble.w	8005354 <_strtod_l+0x834>
 8005106:	2b34      	cmp	r3, #52	; 0x34
 8005108:	bfd8      	it	le
 800510a:	f04f 33ff 	movle.w	r3, #4294967295
 800510e:	f04f 0800 	mov.w	r8, #0
 8005112:	bfcf      	iteee	gt
 8005114:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8005118:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800511c:	fa03 f202 	lslle.w	r2, r3, r2
 8005120:	ea02 0901 	andle.w	r9, r2, r1
 8005124:	2200      	movs	r2, #0
 8005126:	2300      	movs	r3, #0
 8005128:	4640      	mov	r0, r8
 800512a:	4649      	mov	r1, r9
 800512c:	f7fb fc3c 	bl	80009a8 <__aeabi_dcmpeq>
 8005130:	2800      	cmp	r0, #0
 8005132:	d1a1      	bne.n	8005078 <_strtod_l+0x558>
 8005134:	9b06      	ldr	r3, [sp, #24]
 8005136:	465a      	mov	r2, fp
 8005138:	9300      	str	r3, [sp, #0]
 800513a:	4650      	mov	r0, sl
 800513c:	4623      	mov	r3, r4
 800513e:	9908      	ldr	r1, [sp, #32]
 8005140:	f001 fe1c 	bl	8006d7c <__s2b>
 8005144:	9008      	str	r0, [sp, #32]
 8005146:	2800      	cmp	r0, #0
 8005148:	f43f af21 	beq.w	8004f8e <_strtod_l+0x46e>
 800514c:	9b04      	ldr	r3, [sp, #16]
 800514e:	f04f 0b00 	mov.w	fp, #0
 8005152:	1b5d      	subs	r5, r3, r5
 8005154:	9b07      	ldr	r3, [sp, #28]
 8005156:	f8cd b010 	str.w	fp, [sp, #16]
 800515a:	2b00      	cmp	r3, #0
 800515c:	bfb4      	ite	lt
 800515e:	462b      	movlt	r3, r5
 8005160:	2300      	movge	r3, #0
 8005162:	930e      	str	r3, [sp, #56]	; 0x38
 8005164:	9b07      	ldr	r3, [sp, #28]
 8005166:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800516a:	9314      	str	r3, [sp, #80]	; 0x50
 800516c:	9b08      	ldr	r3, [sp, #32]
 800516e:	4650      	mov	r0, sl
 8005170:	6859      	ldr	r1, [r3, #4]
 8005172:	f001 fd5b 	bl	8006c2c <_Balloc>
 8005176:	9006      	str	r0, [sp, #24]
 8005178:	2800      	cmp	r0, #0
 800517a:	f43f af10 	beq.w	8004f9e <_strtod_l+0x47e>
 800517e:	9b08      	ldr	r3, [sp, #32]
 8005180:	300c      	adds	r0, #12
 8005182:	691a      	ldr	r2, [r3, #16]
 8005184:	f103 010c 	add.w	r1, r3, #12
 8005188:	3202      	adds	r2, #2
 800518a:	0092      	lsls	r2, r2, #2
 800518c:	f001 fd40 	bl	8006c10 <memcpy>
 8005190:	ab1c      	add	r3, sp, #112	; 0x70
 8005192:	9301      	str	r3, [sp, #4]
 8005194:	ab1b      	add	r3, sp, #108	; 0x6c
 8005196:	9300      	str	r3, [sp, #0]
 8005198:	4642      	mov	r2, r8
 800519a:	464b      	mov	r3, r9
 800519c:	4650      	mov	r0, sl
 800519e:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 80051a2:	f002 f92d 	bl	8007400 <__d2b>
 80051a6:	901a      	str	r0, [sp, #104]	; 0x68
 80051a8:	2800      	cmp	r0, #0
 80051aa:	f43f aef8 	beq.w	8004f9e <_strtod_l+0x47e>
 80051ae:	2101      	movs	r1, #1
 80051b0:	4650      	mov	r0, sl
 80051b2:	f001 fe7b 	bl	8006eac <__i2b>
 80051b6:	4603      	mov	r3, r0
 80051b8:	9004      	str	r0, [sp, #16]
 80051ba:	2800      	cmp	r0, #0
 80051bc:	f43f aeef 	beq.w	8004f9e <_strtod_l+0x47e>
 80051c0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80051c2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80051c4:	2d00      	cmp	r5, #0
 80051c6:	bfab      	itete	ge
 80051c8:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80051ca:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 80051cc:	18ee      	addge	r6, r5, r3
 80051ce:	1b5c      	sublt	r4, r3, r5
 80051d0:	9b05      	ldr	r3, [sp, #20]
 80051d2:	bfa8      	it	ge
 80051d4:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 80051d6:	eba5 0503 	sub.w	r5, r5, r3
 80051da:	4415      	add	r5, r2
 80051dc:	4b6e      	ldr	r3, [pc, #440]	; (8005398 <_strtod_l+0x878>)
 80051de:	f105 35ff 	add.w	r5, r5, #4294967295
 80051e2:	bfb8      	it	lt
 80051e4:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80051e6:	429d      	cmp	r5, r3
 80051e8:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80051ec:	f280 80c4 	bge.w	8005378 <_strtod_l+0x858>
 80051f0:	1b5b      	subs	r3, r3, r5
 80051f2:	2b1f      	cmp	r3, #31
 80051f4:	f04f 0701 	mov.w	r7, #1
 80051f8:	eba2 0203 	sub.w	r2, r2, r3
 80051fc:	f300 80b1 	bgt.w	8005362 <_strtod_l+0x842>
 8005200:	2500      	movs	r5, #0
 8005202:	fa07 f303 	lsl.w	r3, r7, r3
 8005206:	930f      	str	r3, [sp, #60]	; 0x3c
 8005208:	18b7      	adds	r7, r6, r2
 800520a:	9b05      	ldr	r3, [sp, #20]
 800520c:	42be      	cmp	r6, r7
 800520e:	4414      	add	r4, r2
 8005210:	441c      	add	r4, r3
 8005212:	4633      	mov	r3, r6
 8005214:	bfa8      	it	ge
 8005216:	463b      	movge	r3, r7
 8005218:	42a3      	cmp	r3, r4
 800521a:	bfa8      	it	ge
 800521c:	4623      	movge	r3, r4
 800521e:	2b00      	cmp	r3, #0
 8005220:	bfc2      	ittt	gt
 8005222:	1aff      	subgt	r7, r7, r3
 8005224:	1ae4      	subgt	r4, r4, r3
 8005226:	1af6      	subgt	r6, r6, r3
 8005228:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800522a:	2b00      	cmp	r3, #0
 800522c:	dd17      	ble.n	800525e <_strtod_l+0x73e>
 800522e:	461a      	mov	r2, r3
 8005230:	4650      	mov	r0, sl
 8005232:	9904      	ldr	r1, [sp, #16]
 8005234:	f001 fef8 	bl	8007028 <__pow5mult>
 8005238:	9004      	str	r0, [sp, #16]
 800523a:	2800      	cmp	r0, #0
 800523c:	f43f aeaf 	beq.w	8004f9e <_strtod_l+0x47e>
 8005240:	4601      	mov	r1, r0
 8005242:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005244:	4650      	mov	r0, sl
 8005246:	f001 fe47 	bl	8006ed8 <__multiply>
 800524a:	9009      	str	r0, [sp, #36]	; 0x24
 800524c:	2800      	cmp	r0, #0
 800524e:	f43f aea6 	beq.w	8004f9e <_strtod_l+0x47e>
 8005252:	4650      	mov	r0, sl
 8005254:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005256:	f001 fd29 	bl	8006cac <_Bfree>
 800525a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800525c:	931a      	str	r3, [sp, #104]	; 0x68
 800525e:	2f00      	cmp	r7, #0
 8005260:	f300 808e 	bgt.w	8005380 <_strtod_l+0x860>
 8005264:	9b07      	ldr	r3, [sp, #28]
 8005266:	2b00      	cmp	r3, #0
 8005268:	dd08      	ble.n	800527c <_strtod_l+0x75c>
 800526a:	4650      	mov	r0, sl
 800526c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800526e:	9906      	ldr	r1, [sp, #24]
 8005270:	f001 feda 	bl	8007028 <__pow5mult>
 8005274:	9006      	str	r0, [sp, #24]
 8005276:	2800      	cmp	r0, #0
 8005278:	f43f ae91 	beq.w	8004f9e <_strtod_l+0x47e>
 800527c:	2c00      	cmp	r4, #0
 800527e:	dd08      	ble.n	8005292 <_strtod_l+0x772>
 8005280:	4622      	mov	r2, r4
 8005282:	4650      	mov	r0, sl
 8005284:	9906      	ldr	r1, [sp, #24]
 8005286:	f001 ff29 	bl	80070dc <__lshift>
 800528a:	9006      	str	r0, [sp, #24]
 800528c:	2800      	cmp	r0, #0
 800528e:	f43f ae86 	beq.w	8004f9e <_strtod_l+0x47e>
 8005292:	2e00      	cmp	r6, #0
 8005294:	dd08      	ble.n	80052a8 <_strtod_l+0x788>
 8005296:	4632      	mov	r2, r6
 8005298:	4650      	mov	r0, sl
 800529a:	9904      	ldr	r1, [sp, #16]
 800529c:	f001 ff1e 	bl	80070dc <__lshift>
 80052a0:	9004      	str	r0, [sp, #16]
 80052a2:	2800      	cmp	r0, #0
 80052a4:	f43f ae7b 	beq.w	8004f9e <_strtod_l+0x47e>
 80052a8:	4650      	mov	r0, sl
 80052aa:	9a06      	ldr	r2, [sp, #24]
 80052ac:	991a      	ldr	r1, [sp, #104]	; 0x68
 80052ae:	f001 ffa1 	bl	80071f4 <__mdiff>
 80052b2:	4683      	mov	fp, r0
 80052b4:	2800      	cmp	r0, #0
 80052b6:	f43f ae72 	beq.w	8004f9e <_strtod_l+0x47e>
 80052ba:	2400      	movs	r4, #0
 80052bc:	68c3      	ldr	r3, [r0, #12]
 80052be:	9904      	ldr	r1, [sp, #16]
 80052c0:	60c4      	str	r4, [r0, #12]
 80052c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80052c4:	f001 ff7a 	bl	80071bc <__mcmp>
 80052c8:	42a0      	cmp	r0, r4
 80052ca:	da6b      	bge.n	80053a4 <_strtod_l+0x884>
 80052cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80052ce:	ea53 0308 	orrs.w	r3, r3, r8
 80052d2:	f040 8091 	bne.w	80053f8 <_strtod_l+0x8d8>
 80052d6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80052da:	2b00      	cmp	r3, #0
 80052dc:	f040 808c 	bne.w	80053f8 <_strtod_l+0x8d8>
 80052e0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80052e4:	0d1b      	lsrs	r3, r3, #20
 80052e6:	051b      	lsls	r3, r3, #20
 80052e8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80052ec:	f240 8084 	bls.w	80053f8 <_strtod_l+0x8d8>
 80052f0:	f8db 3014 	ldr.w	r3, [fp, #20]
 80052f4:	b91b      	cbnz	r3, 80052fe <_strtod_l+0x7de>
 80052f6:	f8db 3010 	ldr.w	r3, [fp, #16]
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	dd7c      	ble.n	80053f8 <_strtod_l+0x8d8>
 80052fe:	4659      	mov	r1, fp
 8005300:	2201      	movs	r2, #1
 8005302:	4650      	mov	r0, sl
 8005304:	f001 feea 	bl	80070dc <__lshift>
 8005308:	9904      	ldr	r1, [sp, #16]
 800530a:	4683      	mov	fp, r0
 800530c:	f001 ff56 	bl	80071bc <__mcmp>
 8005310:	2800      	cmp	r0, #0
 8005312:	dd71      	ble.n	80053f8 <_strtod_l+0x8d8>
 8005314:	9905      	ldr	r1, [sp, #20]
 8005316:	464b      	mov	r3, r9
 8005318:	4a20      	ldr	r2, [pc, #128]	; (800539c <_strtod_l+0x87c>)
 800531a:	2900      	cmp	r1, #0
 800531c:	f000 808c 	beq.w	8005438 <_strtod_l+0x918>
 8005320:	ea02 0109 	and.w	r1, r2, r9
 8005324:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005328:	f300 8086 	bgt.w	8005438 <_strtod_l+0x918>
 800532c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005330:	f77f aeaa 	ble.w	8005088 <_strtod_l+0x568>
 8005334:	4640      	mov	r0, r8
 8005336:	4649      	mov	r1, r9
 8005338:	4b19      	ldr	r3, [pc, #100]	; (80053a0 <_strtod_l+0x880>)
 800533a:	2200      	movs	r2, #0
 800533c:	f7fb f8cc 	bl	80004d8 <__aeabi_dmul>
 8005340:	460b      	mov	r3, r1
 8005342:	4303      	orrs	r3, r0
 8005344:	bf08      	it	eq
 8005346:	2322      	moveq	r3, #34	; 0x22
 8005348:	4680      	mov	r8, r0
 800534a:	4689      	mov	r9, r1
 800534c:	bf08      	it	eq
 800534e:	f8ca 3000 	streq.w	r3, [sl]
 8005352:	e62f      	b.n	8004fb4 <_strtod_l+0x494>
 8005354:	f04f 32ff 	mov.w	r2, #4294967295
 8005358:	fa02 f303 	lsl.w	r3, r2, r3
 800535c:	ea03 0808 	and.w	r8, r3, r8
 8005360:	e6e0      	b.n	8005124 <_strtod_l+0x604>
 8005362:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8005366:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800536a:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800536e:	35e2      	adds	r5, #226	; 0xe2
 8005370:	fa07 f505 	lsl.w	r5, r7, r5
 8005374:	970f      	str	r7, [sp, #60]	; 0x3c
 8005376:	e747      	b.n	8005208 <_strtod_l+0x6e8>
 8005378:	2301      	movs	r3, #1
 800537a:	2500      	movs	r5, #0
 800537c:	930f      	str	r3, [sp, #60]	; 0x3c
 800537e:	e743      	b.n	8005208 <_strtod_l+0x6e8>
 8005380:	463a      	mov	r2, r7
 8005382:	4650      	mov	r0, sl
 8005384:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005386:	f001 fea9 	bl	80070dc <__lshift>
 800538a:	901a      	str	r0, [sp, #104]	; 0x68
 800538c:	2800      	cmp	r0, #0
 800538e:	f47f af69 	bne.w	8005264 <_strtod_l+0x744>
 8005392:	e604      	b.n	8004f9e <_strtod_l+0x47e>
 8005394:	08008718 	.word	0x08008718
 8005398:	fffffc02 	.word	0xfffffc02
 800539c:	7ff00000 	.word	0x7ff00000
 80053a0:	39500000 	.word	0x39500000
 80053a4:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80053a8:	d165      	bne.n	8005476 <_strtod_l+0x956>
 80053aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80053ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80053b0:	b35a      	cbz	r2, 800540a <_strtod_l+0x8ea>
 80053b2:	4a99      	ldr	r2, [pc, #612]	; (8005618 <_strtod_l+0xaf8>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d12b      	bne.n	8005410 <_strtod_l+0x8f0>
 80053b8:	9b05      	ldr	r3, [sp, #20]
 80053ba:	4641      	mov	r1, r8
 80053bc:	b303      	cbz	r3, 8005400 <_strtod_l+0x8e0>
 80053be:	464a      	mov	r2, r9
 80053c0:	4b96      	ldr	r3, [pc, #600]	; (800561c <_strtod_l+0xafc>)
 80053c2:	4013      	ands	r3, r2
 80053c4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80053c8:	f04f 32ff 	mov.w	r2, #4294967295
 80053cc:	d81b      	bhi.n	8005406 <_strtod_l+0x8e6>
 80053ce:	0d1b      	lsrs	r3, r3, #20
 80053d0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80053d4:	fa02 f303 	lsl.w	r3, r2, r3
 80053d8:	4299      	cmp	r1, r3
 80053da:	d119      	bne.n	8005410 <_strtod_l+0x8f0>
 80053dc:	4b90      	ldr	r3, [pc, #576]	; (8005620 <_strtod_l+0xb00>)
 80053de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d102      	bne.n	80053ea <_strtod_l+0x8ca>
 80053e4:	3101      	adds	r1, #1
 80053e6:	f43f adda 	beq.w	8004f9e <_strtod_l+0x47e>
 80053ea:	f04f 0800 	mov.w	r8, #0
 80053ee:	4b8b      	ldr	r3, [pc, #556]	; (800561c <_strtod_l+0xafc>)
 80053f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80053f2:	401a      	ands	r2, r3
 80053f4:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 80053f8:	9b05      	ldr	r3, [sp, #20]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d19a      	bne.n	8005334 <_strtod_l+0x814>
 80053fe:	e5d9      	b.n	8004fb4 <_strtod_l+0x494>
 8005400:	f04f 33ff 	mov.w	r3, #4294967295
 8005404:	e7e8      	b.n	80053d8 <_strtod_l+0x8b8>
 8005406:	4613      	mov	r3, r2
 8005408:	e7e6      	b.n	80053d8 <_strtod_l+0x8b8>
 800540a:	ea53 0308 	orrs.w	r3, r3, r8
 800540e:	d081      	beq.n	8005314 <_strtod_l+0x7f4>
 8005410:	b1e5      	cbz	r5, 800544c <_strtod_l+0x92c>
 8005412:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005414:	421d      	tst	r5, r3
 8005416:	d0ef      	beq.n	80053f8 <_strtod_l+0x8d8>
 8005418:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800541a:	4640      	mov	r0, r8
 800541c:	4649      	mov	r1, r9
 800541e:	9a05      	ldr	r2, [sp, #20]
 8005420:	b1c3      	cbz	r3, 8005454 <_strtod_l+0x934>
 8005422:	f7ff fb59 	bl	8004ad8 <sulp>
 8005426:	4602      	mov	r2, r0
 8005428:	460b      	mov	r3, r1
 800542a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800542e:	f7fa fe9d 	bl	800016c <__adddf3>
 8005432:	4680      	mov	r8, r0
 8005434:	4689      	mov	r9, r1
 8005436:	e7df      	b.n	80053f8 <_strtod_l+0x8d8>
 8005438:	4013      	ands	r3, r2
 800543a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800543e:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8005442:	f04f 38ff 	mov.w	r8, #4294967295
 8005446:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800544a:	e7d5      	b.n	80053f8 <_strtod_l+0x8d8>
 800544c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800544e:	ea13 0f08 	tst.w	r3, r8
 8005452:	e7e0      	b.n	8005416 <_strtod_l+0x8f6>
 8005454:	f7ff fb40 	bl	8004ad8 <sulp>
 8005458:	4602      	mov	r2, r0
 800545a:	460b      	mov	r3, r1
 800545c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005460:	f7fa fe82 	bl	8000168 <__aeabi_dsub>
 8005464:	2200      	movs	r2, #0
 8005466:	2300      	movs	r3, #0
 8005468:	4680      	mov	r8, r0
 800546a:	4689      	mov	r9, r1
 800546c:	f7fb fa9c 	bl	80009a8 <__aeabi_dcmpeq>
 8005470:	2800      	cmp	r0, #0
 8005472:	d0c1      	beq.n	80053f8 <_strtod_l+0x8d8>
 8005474:	e608      	b.n	8005088 <_strtod_l+0x568>
 8005476:	4658      	mov	r0, fp
 8005478:	9904      	ldr	r1, [sp, #16]
 800547a:	f002 f81d 	bl	80074b8 <__ratio>
 800547e:	2200      	movs	r2, #0
 8005480:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005484:	4606      	mov	r6, r0
 8005486:	460f      	mov	r7, r1
 8005488:	f7fb faa2 	bl	80009d0 <__aeabi_dcmple>
 800548c:	2800      	cmp	r0, #0
 800548e:	d070      	beq.n	8005572 <_strtod_l+0xa52>
 8005490:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005492:	2b00      	cmp	r3, #0
 8005494:	d042      	beq.n	800551c <_strtod_l+0x9fc>
 8005496:	2600      	movs	r6, #0
 8005498:	4f62      	ldr	r7, [pc, #392]	; (8005624 <_strtod_l+0xb04>)
 800549a:	4d62      	ldr	r5, [pc, #392]	; (8005624 <_strtod_l+0xb04>)
 800549c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800549e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80054a2:	0d1b      	lsrs	r3, r3, #20
 80054a4:	051b      	lsls	r3, r3, #20
 80054a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80054a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80054aa:	4b5f      	ldr	r3, [pc, #380]	; (8005628 <_strtod_l+0xb08>)
 80054ac:	429a      	cmp	r2, r3
 80054ae:	f040 80c3 	bne.w	8005638 <_strtod_l+0xb18>
 80054b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054b4:	4640      	mov	r0, r8
 80054b6:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 80054ba:	4649      	mov	r1, r9
 80054bc:	f001 ff26 	bl	800730c <__ulp>
 80054c0:	4602      	mov	r2, r0
 80054c2:	460b      	mov	r3, r1
 80054c4:	4630      	mov	r0, r6
 80054c6:	4639      	mov	r1, r7
 80054c8:	f7fb f806 	bl	80004d8 <__aeabi_dmul>
 80054cc:	4642      	mov	r2, r8
 80054ce:	464b      	mov	r3, r9
 80054d0:	f7fa fe4c 	bl	800016c <__adddf3>
 80054d4:	460b      	mov	r3, r1
 80054d6:	4951      	ldr	r1, [pc, #324]	; (800561c <_strtod_l+0xafc>)
 80054d8:	4a54      	ldr	r2, [pc, #336]	; (800562c <_strtod_l+0xb0c>)
 80054da:	4019      	ands	r1, r3
 80054dc:	4291      	cmp	r1, r2
 80054de:	4680      	mov	r8, r0
 80054e0:	d95d      	bls.n	800559e <_strtod_l+0xa7e>
 80054e2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80054e4:	4b4e      	ldr	r3, [pc, #312]	; (8005620 <_strtod_l+0xb00>)
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d103      	bne.n	80054f2 <_strtod_l+0x9d2>
 80054ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80054ec:	3301      	adds	r3, #1
 80054ee:	f43f ad56 	beq.w	8004f9e <_strtod_l+0x47e>
 80054f2:	f04f 38ff 	mov.w	r8, #4294967295
 80054f6:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8005620 <_strtod_l+0xb00>
 80054fa:	4650      	mov	r0, sl
 80054fc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80054fe:	f001 fbd5 	bl	8006cac <_Bfree>
 8005502:	4650      	mov	r0, sl
 8005504:	9906      	ldr	r1, [sp, #24]
 8005506:	f001 fbd1 	bl	8006cac <_Bfree>
 800550a:	4650      	mov	r0, sl
 800550c:	9904      	ldr	r1, [sp, #16]
 800550e:	f001 fbcd 	bl	8006cac <_Bfree>
 8005512:	4659      	mov	r1, fp
 8005514:	4650      	mov	r0, sl
 8005516:	f001 fbc9 	bl	8006cac <_Bfree>
 800551a:	e627      	b.n	800516c <_strtod_l+0x64c>
 800551c:	f1b8 0f00 	cmp.w	r8, #0
 8005520:	d119      	bne.n	8005556 <_strtod_l+0xa36>
 8005522:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005524:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005528:	b9e3      	cbnz	r3, 8005564 <_strtod_l+0xa44>
 800552a:	2200      	movs	r2, #0
 800552c:	4630      	mov	r0, r6
 800552e:	4639      	mov	r1, r7
 8005530:	4b3c      	ldr	r3, [pc, #240]	; (8005624 <_strtod_l+0xb04>)
 8005532:	f7fb fa43 	bl	80009bc <__aeabi_dcmplt>
 8005536:	b9c8      	cbnz	r0, 800556c <_strtod_l+0xa4c>
 8005538:	2200      	movs	r2, #0
 800553a:	4630      	mov	r0, r6
 800553c:	4639      	mov	r1, r7
 800553e:	4b3c      	ldr	r3, [pc, #240]	; (8005630 <_strtod_l+0xb10>)
 8005540:	f7fa ffca 	bl	80004d8 <__aeabi_dmul>
 8005544:	4604      	mov	r4, r0
 8005546:	460d      	mov	r5, r1
 8005548:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800554c:	9416      	str	r4, [sp, #88]	; 0x58
 800554e:	9317      	str	r3, [sp, #92]	; 0x5c
 8005550:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8005554:	e7a2      	b.n	800549c <_strtod_l+0x97c>
 8005556:	f1b8 0f01 	cmp.w	r8, #1
 800555a:	d103      	bne.n	8005564 <_strtod_l+0xa44>
 800555c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800555e:	2b00      	cmp	r3, #0
 8005560:	f43f ad92 	beq.w	8005088 <_strtod_l+0x568>
 8005564:	2600      	movs	r6, #0
 8005566:	2400      	movs	r4, #0
 8005568:	4f32      	ldr	r7, [pc, #200]	; (8005634 <_strtod_l+0xb14>)
 800556a:	e796      	b.n	800549a <_strtod_l+0x97a>
 800556c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800556e:	4d30      	ldr	r5, [pc, #192]	; (8005630 <_strtod_l+0xb10>)
 8005570:	e7ea      	b.n	8005548 <_strtod_l+0xa28>
 8005572:	4b2f      	ldr	r3, [pc, #188]	; (8005630 <_strtod_l+0xb10>)
 8005574:	2200      	movs	r2, #0
 8005576:	4630      	mov	r0, r6
 8005578:	4639      	mov	r1, r7
 800557a:	f7fa ffad 	bl	80004d8 <__aeabi_dmul>
 800557e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005580:	4604      	mov	r4, r0
 8005582:	460d      	mov	r5, r1
 8005584:	b933      	cbnz	r3, 8005594 <_strtod_l+0xa74>
 8005586:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800558a:	9010      	str	r0, [sp, #64]	; 0x40
 800558c:	9311      	str	r3, [sp, #68]	; 0x44
 800558e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005592:	e783      	b.n	800549c <_strtod_l+0x97c>
 8005594:	4602      	mov	r2, r0
 8005596:	460b      	mov	r3, r1
 8005598:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800559c:	e7f7      	b.n	800558e <_strtod_l+0xa6e>
 800559e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80055a2:	9b05      	ldr	r3, [sp, #20]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d1a8      	bne.n	80054fa <_strtod_l+0x9da>
 80055a8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80055ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80055ae:	0d1b      	lsrs	r3, r3, #20
 80055b0:	051b      	lsls	r3, r3, #20
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d1a1      	bne.n	80054fa <_strtod_l+0x9da>
 80055b6:	4620      	mov	r0, r4
 80055b8:	4629      	mov	r1, r5
 80055ba:	f7fb fbe3 	bl	8000d84 <__aeabi_d2lz>
 80055be:	f7fa ff5d 	bl	800047c <__aeabi_l2d>
 80055c2:	4602      	mov	r2, r0
 80055c4:	460b      	mov	r3, r1
 80055c6:	4620      	mov	r0, r4
 80055c8:	4629      	mov	r1, r5
 80055ca:	f7fa fdcd 	bl	8000168 <__aeabi_dsub>
 80055ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80055d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80055d4:	ea43 0308 	orr.w	r3, r3, r8
 80055d8:	4313      	orrs	r3, r2
 80055da:	4604      	mov	r4, r0
 80055dc:	460d      	mov	r5, r1
 80055de:	d066      	beq.n	80056ae <_strtod_l+0xb8e>
 80055e0:	a309      	add	r3, pc, #36	; (adr r3, 8005608 <_strtod_l+0xae8>)
 80055e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e6:	f7fb f9e9 	bl	80009bc <__aeabi_dcmplt>
 80055ea:	2800      	cmp	r0, #0
 80055ec:	f47f ace2 	bne.w	8004fb4 <_strtod_l+0x494>
 80055f0:	a307      	add	r3, pc, #28	; (adr r3, 8005610 <_strtod_l+0xaf0>)
 80055f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f6:	4620      	mov	r0, r4
 80055f8:	4629      	mov	r1, r5
 80055fa:	f7fb f9fd 	bl	80009f8 <__aeabi_dcmpgt>
 80055fe:	2800      	cmp	r0, #0
 8005600:	f43f af7b 	beq.w	80054fa <_strtod_l+0x9da>
 8005604:	e4d6      	b.n	8004fb4 <_strtod_l+0x494>
 8005606:	bf00      	nop
 8005608:	94a03595 	.word	0x94a03595
 800560c:	3fdfffff 	.word	0x3fdfffff
 8005610:	35afe535 	.word	0x35afe535
 8005614:	3fe00000 	.word	0x3fe00000
 8005618:	000fffff 	.word	0x000fffff
 800561c:	7ff00000 	.word	0x7ff00000
 8005620:	7fefffff 	.word	0x7fefffff
 8005624:	3ff00000 	.word	0x3ff00000
 8005628:	7fe00000 	.word	0x7fe00000
 800562c:	7c9fffff 	.word	0x7c9fffff
 8005630:	3fe00000 	.word	0x3fe00000
 8005634:	bff00000 	.word	0xbff00000
 8005638:	9b05      	ldr	r3, [sp, #20]
 800563a:	b313      	cbz	r3, 8005682 <_strtod_l+0xb62>
 800563c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800563e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005642:	d81e      	bhi.n	8005682 <_strtod_l+0xb62>
 8005644:	a326      	add	r3, pc, #152	; (adr r3, 80056e0 <_strtod_l+0xbc0>)
 8005646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800564a:	4620      	mov	r0, r4
 800564c:	4629      	mov	r1, r5
 800564e:	f7fb f9bf 	bl	80009d0 <__aeabi_dcmple>
 8005652:	b190      	cbz	r0, 800567a <_strtod_l+0xb5a>
 8005654:	4629      	mov	r1, r5
 8005656:	4620      	mov	r0, r4
 8005658:	f7fb fa16 	bl	8000a88 <__aeabi_d2uiz>
 800565c:	2801      	cmp	r0, #1
 800565e:	bf38      	it	cc
 8005660:	2001      	movcc	r0, #1
 8005662:	f7fa febf 	bl	80003e4 <__aeabi_ui2d>
 8005666:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005668:	4604      	mov	r4, r0
 800566a:	460d      	mov	r5, r1
 800566c:	b9d3      	cbnz	r3, 80056a4 <_strtod_l+0xb84>
 800566e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005672:	9012      	str	r0, [sp, #72]	; 0x48
 8005674:	9313      	str	r3, [sp, #76]	; 0x4c
 8005676:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800567a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800567c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8005680:	1a9f      	subs	r7, r3, r2
 8005682:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005686:	f001 fe41 	bl	800730c <__ulp>
 800568a:	4602      	mov	r2, r0
 800568c:	460b      	mov	r3, r1
 800568e:	4630      	mov	r0, r6
 8005690:	4639      	mov	r1, r7
 8005692:	f7fa ff21 	bl	80004d8 <__aeabi_dmul>
 8005696:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800569a:	f7fa fd67 	bl	800016c <__adddf3>
 800569e:	4680      	mov	r8, r0
 80056a0:	4689      	mov	r9, r1
 80056a2:	e77e      	b.n	80055a2 <_strtod_l+0xa82>
 80056a4:	4602      	mov	r2, r0
 80056a6:	460b      	mov	r3, r1
 80056a8:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80056ac:	e7e3      	b.n	8005676 <_strtod_l+0xb56>
 80056ae:	a30e      	add	r3, pc, #56	; (adr r3, 80056e8 <_strtod_l+0xbc8>)
 80056b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b4:	f7fb f982 	bl	80009bc <__aeabi_dcmplt>
 80056b8:	e7a1      	b.n	80055fe <_strtod_l+0xade>
 80056ba:	2300      	movs	r3, #0
 80056bc:	930a      	str	r3, [sp, #40]	; 0x28
 80056be:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80056c0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80056c2:	6013      	str	r3, [r2, #0]
 80056c4:	f7ff ba71 	b.w	8004baa <_strtod_l+0x8a>
 80056c8:	2a65      	cmp	r2, #101	; 0x65
 80056ca:	f43f ab63 	beq.w	8004d94 <_strtod_l+0x274>
 80056ce:	2a45      	cmp	r2, #69	; 0x45
 80056d0:	f43f ab60 	beq.w	8004d94 <_strtod_l+0x274>
 80056d4:	2301      	movs	r3, #1
 80056d6:	f7ff bb95 	b.w	8004e04 <_strtod_l+0x2e4>
 80056da:	bf00      	nop
 80056dc:	f3af 8000 	nop.w
 80056e0:	ffc00000 	.word	0xffc00000
 80056e4:	41dfffff 	.word	0x41dfffff
 80056e8:	94a03595 	.word	0x94a03595
 80056ec:	3fcfffff 	.word	0x3fcfffff

080056f0 <_strtod_r>:
 80056f0:	4b01      	ldr	r3, [pc, #4]	; (80056f8 <_strtod_r+0x8>)
 80056f2:	f7ff ba15 	b.w	8004b20 <_strtod_l>
 80056f6:	bf00      	nop
 80056f8:	20000074 	.word	0x20000074

080056fc <_strtol_l.constprop.0>:
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005702:	4680      	mov	r8, r0
 8005704:	d001      	beq.n	800570a <_strtol_l.constprop.0+0xe>
 8005706:	2b24      	cmp	r3, #36	; 0x24
 8005708:	d906      	bls.n	8005718 <_strtol_l.constprop.0+0x1c>
 800570a:	f7fe fb21 	bl	8003d50 <__errno>
 800570e:	2316      	movs	r3, #22
 8005710:	6003      	str	r3, [r0, #0]
 8005712:	2000      	movs	r0, #0
 8005714:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005718:	460d      	mov	r5, r1
 800571a:	4f35      	ldr	r7, [pc, #212]	; (80057f0 <_strtol_l.constprop.0+0xf4>)
 800571c:	4628      	mov	r0, r5
 800571e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005722:	5de6      	ldrb	r6, [r4, r7]
 8005724:	f016 0608 	ands.w	r6, r6, #8
 8005728:	d1f8      	bne.n	800571c <_strtol_l.constprop.0+0x20>
 800572a:	2c2d      	cmp	r4, #45	; 0x2d
 800572c:	d12f      	bne.n	800578e <_strtol_l.constprop.0+0x92>
 800572e:	2601      	movs	r6, #1
 8005730:	782c      	ldrb	r4, [r5, #0]
 8005732:	1c85      	adds	r5, r0, #2
 8005734:	2b00      	cmp	r3, #0
 8005736:	d057      	beq.n	80057e8 <_strtol_l.constprop.0+0xec>
 8005738:	2b10      	cmp	r3, #16
 800573a:	d109      	bne.n	8005750 <_strtol_l.constprop.0+0x54>
 800573c:	2c30      	cmp	r4, #48	; 0x30
 800573e:	d107      	bne.n	8005750 <_strtol_l.constprop.0+0x54>
 8005740:	7828      	ldrb	r0, [r5, #0]
 8005742:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8005746:	2858      	cmp	r0, #88	; 0x58
 8005748:	d149      	bne.n	80057de <_strtol_l.constprop.0+0xe2>
 800574a:	2310      	movs	r3, #16
 800574c:	786c      	ldrb	r4, [r5, #1]
 800574e:	3502      	adds	r5, #2
 8005750:	2700      	movs	r7, #0
 8005752:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8005756:	f10e 3eff 	add.w	lr, lr, #4294967295
 800575a:	fbbe f9f3 	udiv	r9, lr, r3
 800575e:	4638      	mov	r0, r7
 8005760:	fb03 ea19 	mls	sl, r3, r9, lr
 8005764:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005768:	f1bc 0f09 	cmp.w	ip, #9
 800576c:	d814      	bhi.n	8005798 <_strtol_l.constprop.0+0x9c>
 800576e:	4664      	mov	r4, ip
 8005770:	42a3      	cmp	r3, r4
 8005772:	dd22      	ble.n	80057ba <_strtol_l.constprop.0+0xbe>
 8005774:	2f00      	cmp	r7, #0
 8005776:	db1d      	blt.n	80057b4 <_strtol_l.constprop.0+0xb8>
 8005778:	4581      	cmp	r9, r0
 800577a:	d31b      	bcc.n	80057b4 <_strtol_l.constprop.0+0xb8>
 800577c:	d101      	bne.n	8005782 <_strtol_l.constprop.0+0x86>
 800577e:	45a2      	cmp	sl, r4
 8005780:	db18      	blt.n	80057b4 <_strtol_l.constprop.0+0xb8>
 8005782:	2701      	movs	r7, #1
 8005784:	fb00 4003 	mla	r0, r0, r3, r4
 8005788:	f815 4b01 	ldrb.w	r4, [r5], #1
 800578c:	e7ea      	b.n	8005764 <_strtol_l.constprop.0+0x68>
 800578e:	2c2b      	cmp	r4, #43	; 0x2b
 8005790:	bf04      	itt	eq
 8005792:	782c      	ldrbeq	r4, [r5, #0]
 8005794:	1c85      	addeq	r5, r0, #2
 8005796:	e7cd      	b.n	8005734 <_strtol_l.constprop.0+0x38>
 8005798:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800579c:	f1bc 0f19 	cmp.w	ip, #25
 80057a0:	d801      	bhi.n	80057a6 <_strtol_l.constprop.0+0xaa>
 80057a2:	3c37      	subs	r4, #55	; 0x37
 80057a4:	e7e4      	b.n	8005770 <_strtol_l.constprop.0+0x74>
 80057a6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80057aa:	f1bc 0f19 	cmp.w	ip, #25
 80057ae:	d804      	bhi.n	80057ba <_strtol_l.constprop.0+0xbe>
 80057b0:	3c57      	subs	r4, #87	; 0x57
 80057b2:	e7dd      	b.n	8005770 <_strtol_l.constprop.0+0x74>
 80057b4:	f04f 37ff 	mov.w	r7, #4294967295
 80057b8:	e7e6      	b.n	8005788 <_strtol_l.constprop.0+0x8c>
 80057ba:	2f00      	cmp	r7, #0
 80057bc:	da07      	bge.n	80057ce <_strtol_l.constprop.0+0xd2>
 80057be:	2322      	movs	r3, #34	; 0x22
 80057c0:	4670      	mov	r0, lr
 80057c2:	f8c8 3000 	str.w	r3, [r8]
 80057c6:	2a00      	cmp	r2, #0
 80057c8:	d0a4      	beq.n	8005714 <_strtol_l.constprop.0+0x18>
 80057ca:	1e69      	subs	r1, r5, #1
 80057cc:	e005      	b.n	80057da <_strtol_l.constprop.0+0xde>
 80057ce:	b106      	cbz	r6, 80057d2 <_strtol_l.constprop.0+0xd6>
 80057d0:	4240      	negs	r0, r0
 80057d2:	2a00      	cmp	r2, #0
 80057d4:	d09e      	beq.n	8005714 <_strtol_l.constprop.0+0x18>
 80057d6:	2f00      	cmp	r7, #0
 80057d8:	d1f7      	bne.n	80057ca <_strtol_l.constprop.0+0xce>
 80057da:	6011      	str	r1, [r2, #0]
 80057dc:	e79a      	b.n	8005714 <_strtol_l.constprop.0+0x18>
 80057de:	2430      	movs	r4, #48	; 0x30
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d1b5      	bne.n	8005750 <_strtol_l.constprop.0+0x54>
 80057e4:	2308      	movs	r3, #8
 80057e6:	e7b3      	b.n	8005750 <_strtol_l.constprop.0+0x54>
 80057e8:	2c30      	cmp	r4, #48	; 0x30
 80057ea:	d0a9      	beq.n	8005740 <_strtol_l.constprop.0+0x44>
 80057ec:	230a      	movs	r3, #10
 80057ee:	e7af      	b.n	8005750 <_strtol_l.constprop.0+0x54>
 80057f0:	08008741 	.word	0x08008741

080057f4 <_strtol_r>:
 80057f4:	f7ff bf82 	b.w	80056fc <_strtol_l.constprop.0>

080057f8 <quorem>:
 80057f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057fc:	6903      	ldr	r3, [r0, #16]
 80057fe:	690c      	ldr	r4, [r1, #16]
 8005800:	4607      	mov	r7, r0
 8005802:	42a3      	cmp	r3, r4
 8005804:	f2c0 8082 	blt.w	800590c <quorem+0x114>
 8005808:	3c01      	subs	r4, #1
 800580a:	f100 0514 	add.w	r5, r0, #20
 800580e:	f101 0814 	add.w	r8, r1, #20
 8005812:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005816:	9301      	str	r3, [sp, #4]
 8005818:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800581c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005820:	3301      	adds	r3, #1
 8005822:	429a      	cmp	r2, r3
 8005824:	fbb2 f6f3 	udiv	r6, r2, r3
 8005828:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800582c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005830:	d331      	bcc.n	8005896 <quorem+0x9e>
 8005832:	f04f 0e00 	mov.w	lr, #0
 8005836:	4640      	mov	r0, r8
 8005838:	46ac      	mov	ip, r5
 800583a:	46f2      	mov	sl, lr
 800583c:	f850 2b04 	ldr.w	r2, [r0], #4
 8005840:	b293      	uxth	r3, r2
 8005842:	fb06 e303 	mla	r3, r6, r3, lr
 8005846:	0c12      	lsrs	r2, r2, #16
 8005848:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800584c:	b29b      	uxth	r3, r3
 800584e:	fb06 e202 	mla	r2, r6, r2, lr
 8005852:	ebaa 0303 	sub.w	r3, sl, r3
 8005856:	f8dc a000 	ldr.w	sl, [ip]
 800585a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800585e:	fa1f fa8a 	uxth.w	sl, sl
 8005862:	4453      	add	r3, sl
 8005864:	f8dc a000 	ldr.w	sl, [ip]
 8005868:	b292      	uxth	r2, r2
 800586a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800586e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005872:	b29b      	uxth	r3, r3
 8005874:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005878:	4581      	cmp	r9, r0
 800587a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800587e:	f84c 3b04 	str.w	r3, [ip], #4
 8005882:	d2db      	bcs.n	800583c <quorem+0x44>
 8005884:	f855 300b 	ldr.w	r3, [r5, fp]
 8005888:	b92b      	cbnz	r3, 8005896 <quorem+0x9e>
 800588a:	9b01      	ldr	r3, [sp, #4]
 800588c:	3b04      	subs	r3, #4
 800588e:	429d      	cmp	r5, r3
 8005890:	461a      	mov	r2, r3
 8005892:	d32f      	bcc.n	80058f4 <quorem+0xfc>
 8005894:	613c      	str	r4, [r7, #16]
 8005896:	4638      	mov	r0, r7
 8005898:	f001 fc90 	bl	80071bc <__mcmp>
 800589c:	2800      	cmp	r0, #0
 800589e:	db25      	blt.n	80058ec <quorem+0xf4>
 80058a0:	4628      	mov	r0, r5
 80058a2:	f04f 0c00 	mov.w	ip, #0
 80058a6:	3601      	adds	r6, #1
 80058a8:	f858 1b04 	ldr.w	r1, [r8], #4
 80058ac:	f8d0 e000 	ldr.w	lr, [r0]
 80058b0:	b28b      	uxth	r3, r1
 80058b2:	ebac 0303 	sub.w	r3, ip, r3
 80058b6:	fa1f f28e 	uxth.w	r2, lr
 80058ba:	4413      	add	r3, r2
 80058bc:	0c0a      	lsrs	r2, r1, #16
 80058be:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80058c2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80058cc:	45c1      	cmp	r9, r8
 80058ce:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80058d2:	f840 3b04 	str.w	r3, [r0], #4
 80058d6:	d2e7      	bcs.n	80058a8 <quorem+0xb0>
 80058d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80058dc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80058e0:	b922      	cbnz	r2, 80058ec <quorem+0xf4>
 80058e2:	3b04      	subs	r3, #4
 80058e4:	429d      	cmp	r5, r3
 80058e6:	461a      	mov	r2, r3
 80058e8:	d30a      	bcc.n	8005900 <quorem+0x108>
 80058ea:	613c      	str	r4, [r7, #16]
 80058ec:	4630      	mov	r0, r6
 80058ee:	b003      	add	sp, #12
 80058f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058f4:	6812      	ldr	r2, [r2, #0]
 80058f6:	3b04      	subs	r3, #4
 80058f8:	2a00      	cmp	r2, #0
 80058fa:	d1cb      	bne.n	8005894 <quorem+0x9c>
 80058fc:	3c01      	subs	r4, #1
 80058fe:	e7c6      	b.n	800588e <quorem+0x96>
 8005900:	6812      	ldr	r2, [r2, #0]
 8005902:	3b04      	subs	r3, #4
 8005904:	2a00      	cmp	r2, #0
 8005906:	d1f0      	bne.n	80058ea <quorem+0xf2>
 8005908:	3c01      	subs	r4, #1
 800590a:	e7eb      	b.n	80058e4 <quorem+0xec>
 800590c:	2000      	movs	r0, #0
 800590e:	e7ee      	b.n	80058ee <quorem+0xf6>

08005910 <_dtoa_r>:
 8005910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005914:	4616      	mov	r6, r2
 8005916:	461f      	mov	r7, r3
 8005918:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800591a:	b099      	sub	sp, #100	; 0x64
 800591c:	4605      	mov	r5, r0
 800591e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005922:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005926:	b974      	cbnz	r4, 8005946 <_dtoa_r+0x36>
 8005928:	2010      	movs	r0, #16
 800592a:	f001 f949 	bl	8006bc0 <malloc>
 800592e:	4602      	mov	r2, r0
 8005930:	6268      	str	r0, [r5, #36]	; 0x24
 8005932:	b920      	cbnz	r0, 800593e <_dtoa_r+0x2e>
 8005934:	21ea      	movs	r1, #234	; 0xea
 8005936:	4ba8      	ldr	r3, [pc, #672]	; (8005bd8 <_dtoa_r+0x2c8>)
 8005938:	48a8      	ldr	r0, [pc, #672]	; (8005bdc <_dtoa_r+0x2cc>)
 800593a:	f002 f8b3 	bl	8007aa4 <__assert_func>
 800593e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005942:	6004      	str	r4, [r0, #0]
 8005944:	60c4      	str	r4, [r0, #12]
 8005946:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005948:	6819      	ldr	r1, [r3, #0]
 800594a:	b151      	cbz	r1, 8005962 <_dtoa_r+0x52>
 800594c:	685a      	ldr	r2, [r3, #4]
 800594e:	2301      	movs	r3, #1
 8005950:	4093      	lsls	r3, r2
 8005952:	604a      	str	r2, [r1, #4]
 8005954:	608b      	str	r3, [r1, #8]
 8005956:	4628      	mov	r0, r5
 8005958:	f001 f9a8 	bl	8006cac <_Bfree>
 800595c:	2200      	movs	r2, #0
 800595e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005960:	601a      	str	r2, [r3, #0]
 8005962:	1e3b      	subs	r3, r7, #0
 8005964:	bfaf      	iteee	ge
 8005966:	2300      	movge	r3, #0
 8005968:	2201      	movlt	r2, #1
 800596a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800596e:	9305      	strlt	r3, [sp, #20]
 8005970:	bfa8      	it	ge
 8005972:	f8c8 3000 	strge.w	r3, [r8]
 8005976:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800597a:	4b99      	ldr	r3, [pc, #612]	; (8005be0 <_dtoa_r+0x2d0>)
 800597c:	bfb8      	it	lt
 800597e:	f8c8 2000 	strlt.w	r2, [r8]
 8005982:	ea33 0309 	bics.w	r3, r3, r9
 8005986:	d119      	bne.n	80059bc <_dtoa_r+0xac>
 8005988:	f242 730f 	movw	r3, #9999	; 0x270f
 800598c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800598e:	6013      	str	r3, [r2, #0]
 8005990:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005994:	4333      	orrs	r3, r6
 8005996:	f000 857f 	beq.w	8006498 <_dtoa_r+0xb88>
 800599a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800599c:	b953      	cbnz	r3, 80059b4 <_dtoa_r+0xa4>
 800599e:	4b91      	ldr	r3, [pc, #580]	; (8005be4 <_dtoa_r+0x2d4>)
 80059a0:	e022      	b.n	80059e8 <_dtoa_r+0xd8>
 80059a2:	4b91      	ldr	r3, [pc, #580]	; (8005be8 <_dtoa_r+0x2d8>)
 80059a4:	9303      	str	r3, [sp, #12]
 80059a6:	3308      	adds	r3, #8
 80059a8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80059aa:	6013      	str	r3, [r2, #0]
 80059ac:	9803      	ldr	r0, [sp, #12]
 80059ae:	b019      	add	sp, #100	; 0x64
 80059b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059b4:	4b8b      	ldr	r3, [pc, #556]	; (8005be4 <_dtoa_r+0x2d4>)
 80059b6:	9303      	str	r3, [sp, #12]
 80059b8:	3303      	adds	r3, #3
 80059ba:	e7f5      	b.n	80059a8 <_dtoa_r+0x98>
 80059bc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80059c0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80059c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80059c8:	2200      	movs	r2, #0
 80059ca:	2300      	movs	r3, #0
 80059cc:	f7fa ffec 	bl	80009a8 <__aeabi_dcmpeq>
 80059d0:	4680      	mov	r8, r0
 80059d2:	b158      	cbz	r0, 80059ec <_dtoa_r+0xdc>
 80059d4:	2301      	movs	r3, #1
 80059d6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80059d8:	6013      	str	r3, [r2, #0]
 80059da:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80059dc:	2b00      	cmp	r3, #0
 80059de:	f000 8558 	beq.w	8006492 <_dtoa_r+0xb82>
 80059e2:	4882      	ldr	r0, [pc, #520]	; (8005bec <_dtoa_r+0x2dc>)
 80059e4:	6018      	str	r0, [r3, #0]
 80059e6:	1e43      	subs	r3, r0, #1
 80059e8:	9303      	str	r3, [sp, #12]
 80059ea:	e7df      	b.n	80059ac <_dtoa_r+0x9c>
 80059ec:	ab16      	add	r3, sp, #88	; 0x58
 80059ee:	9301      	str	r3, [sp, #4]
 80059f0:	ab17      	add	r3, sp, #92	; 0x5c
 80059f2:	9300      	str	r3, [sp, #0]
 80059f4:	4628      	mov	r0, r5
 80059f6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80059fa:	f001 fd01 	bl	8007400 <__d2b>
 80059fe:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005a02:	4683      	mov	fp, r0
 8005a04:	2c00      	cmp	r4, #0
 8005a06:	d07f      	beq.n	8005b08 <_dtoa_r+0x1f8>
 8005a08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005a0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a0e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005a12:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a16:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005a1a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005a1e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005a22:	2200      	movs	r2, #0
 8005a24:	4b72      	ldr	r3, [pc, #456]	; (8005bf0 <_dtoa_r+0x2e0>)
 8005a26:	f7fa fb9f 	bl	8000168 <__aeabi_dsub>
 8005a2a:	a365      	add	r3, pc, #404	; (adr r3, 8005bc0 <_dtoa_r+0x2b0>)
 8005a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a30:	f7fa fd52 	bl	80004d8 <__aeabi_dmul>
 8005a34:	a364      	add	r3, pc, #400	; (adr r3, 8005bc8 <_dtoa_r+0x2b8>)
 8005a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a3a:	f7fa fb97 	bl	800016c <__adddf3>
 8005a3e:	4606      	mov	r6, r0
 8005a40:	4620      	mov	r0, r4
 8005a42:	460f      	mov	r7, r1
 8005a44:	f7fa fcde 	bl	8000404 <__aeabi_i2d>
 8005a48:	a361      	add	r3, pc, #388	; (adr r3, 8005bd0 <_dtoa_r+0x2c0>)
 8005a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a4e:	f7fa fd43 	bl	80004d8 <__aeabi_dmul>
 8005a52:	4602      	mov	r2, r0
 8005a54:	460b      	mov	r3, r1
 8005a56:	4630      	mov	r0, r6
 8005a58:	4639      	mov	r1, r7
 8005a5a:	f7fa fb87 	bl	800016c <__adddf3>
 8005a5e:	4606      	mov	r6, r0
 8005a60:	460f      	mov	r7, r1
 8005a62:	f7fa ffe9 	bl	8000a38 <__aeabi_d2iz>
 8005a66:	2200      	movs	r2, #0
 8005a68:	4682      	mov	sl, r0
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	4630      	mov	r0, r6
 8005a6e:	4639      	mov	r1, r7
 8005a70:	f7fa ffa4 	bl	80009bc <__aeabi_dcmplt>
 8005a74:	b148      	cbz	r0, 8005a8a <_dtoa_r+0x17a>
 8005a76:	4650      	mov	r0, sl
 8005a78:	f7fa fcc4 	bl	8000404 <__aeabi_i2d>
 8005a7c:	4632      	mov	r2, r6
 8005a7e:	463b      	mov	r3, r7
 8005a80:	f7fa ff92 	bl	80009a8 <__aeabi_dcmpeq>
 8005a84:	b908      	cbnz	r0, 8005a8a <_dtoa_r+0x17a>
 8005a86:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005a8a:	f1ba 0f16 	cmp.w	sl, #22
 8005a8e:	d858      	bhi.n	8005b42 <_dtoa_r+0x232>
 8005a90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005a94:	4b57      	ldr	r3, [pc, #348]	; (8005bf4 <_dtoa_r+0x2e4>)
 8005a96:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a9e:	f7fa ff8d 	bl	80009bc <__aeabi_dcmplt>
 8005aa2:	2800      	cmp	r0, #0
 8005aa4:	d04f      	beq.n	8005b46 <_dtoa_r+0x236>
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005aac:	930f      	str	r3, [sp, #60]	; 0x3c
 8005aae:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005ab0:	1b1c      	subs	r4, r3, r4
 8005ab2:	1e63      	subs	r3, r4, #1
 8005ab4:	9309      	str	r3, [sp, #36]	; 0x24
 8005ab6:	bf49      	itett	mi
 8005ab8:	f1c4 0301 	rsbmi	r3, r4, #1
 8005abc:	2300      	movpl	r3, #0
 8005abe:	9306      	strmi	r3, [sp, #24]
 8005ac0:	2300      	movmi	r3, #0
 8005ac2:	bf54      	ite	pl
 8005ac4:	9306      	strpl	r3, [sp, #24]
 8005ac6:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005ac8:	f1ba 0f00 	cmp.w	sl, #0
 8005acc:	db3d      	blt.n	8005b4a <_dtoa_r+0x23a>
 8005ace:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ad0:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8005ad4:	4453      	add	r3, sl
 8005ad6:	9309      	str	r3, [sp, #36]	; 0x24
 8005ad8:	2300      	movs	r3, #0
 8005ada:	930a      	str	r3, [sp, #40]	; 0x28
 8005adc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005ade:	2b09      	cmp	r3, #9
 8005ae0:	f200 808c 	bhi.w	8005bfc <_dtoa_r+0x2ec>
 8005ae4:	2b05      	cmp	r3, #5
 8005ae6:	bfc4      	itt	gt
 8005ae8:	3b04      	subgt	r3, #4
 8005aea:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005aec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005aee:	bfc8      	it	gt
 8005af0:	2400      	movgt	r4, #0
 8005af2:	f1a3 0302 	sub.w	r3, r3, #2
 8005af6:	bfd8      	it	le
 8005af8:	2401      	movle	r4, #1
 8005afa:	2b03      	cmp	r3, #3
 8005afc:	f200 808a 	bhi.w	8005c14 <_dtoa_r+0x304>
 8005b00:	e8df f003 	tbb	[pc, r3]
 8005b04:	5b4d4f2d 	.word	0x5b4d4f2d
 8005b08:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005b0c:	441c      	add	r4, r3
 8005b0e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005b12:	2b20      	cmp	r3, #32
 8005b14:	bfc3      	ittte	gt
 8005b16:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005b1a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8005b1e:	fa09 f303 	lslgt.w	r3, r9, r3
 8005b22:	f1c3 0320 	rsble	r3, r3, #32
 8005b26:	bfc6      	itte	gt
 8005b28:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005b2c:	4318      	orrgt	r0, r3
 8005b2e:	fa06 f003 	lslle.w	r0, r6, r3
 8005b32:	f7fa fc57 	bl	80003e4 <__aeabi_ui2d>
 8005b36:	2301      	movs	r3, #1
 8005b38:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005b3c:	3c01      	subs	r4, #1
 8005b3e:	9313      	str	r3, [sp, #76]	; 0x4c
 8005b40:	e76f      	b.n	8005a22 <_dtoa_r+0x112>
 8005b42:	2301      	movs	r3, #1
 8005b44:	e7b2      	b.n	8005aac <_dtoa_r+0x19c>
 8005b46:	900f      	str	r0, [sp, #60]	; 0x3c
 8005b48:	e7b1      	b.n	8005aae <_dtoa_r+0x19e>
 8005b4a:	9b06      	ldr	r3, [sp, #24]
 8005b4c:	eba3 030a 	sub.w	r3, r3, sl
 8005b50:	9306      	str	r3, [sp, #24]
 8005b52:	f1ca 0300 	rsb	r3, sl, #0
 8005b56:	930a      	str	r3, [sp, #40]	; 0x28
 8005b58:	2300      	movs	r3, #0
 8005b5a:	930e      	str	r3, [sp, #56]	; 0x38
 8005b5c:	e7be      	b.n	8005adc <_dtoa_r+0x1cc>
 8005b5e:	2300      	movs	r3, #0
 8005b60:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b62:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	dc58      	bgt.n	8005c1a <_dtoa_r+0x30a>
 8005b68:	f04f 0901 	mov.w	r9, #1
 8005b6c:	464b      	mov	r3, r9
 8005b6e:	f8cd 9020 	str.w	r9, [sp, #32]
 8005b72:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8005b76:	2200      	movs	r2, #0
 8005b78:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005b7a:	6042      	str	r2, [r0, #4]
 8005b7c:	2204      	movs	r2, #4
 8005b7e:	f102 0614 	add.w	r6, r2, #20
 8005b82:	429e      	cmp	r6, r3
 8005b84:	6841      	ldr	r1, [r0, #4]
 8005b86:	d94e      	bls.n	8005c26 <_dtoa_r+0x316>
 8005b88:	4628      	mov	r0, r5
 8005b8a:	f001 f84f 	bl	8006c2c <_Balloc>
 8005b8e:	9003      	str	r0, [sp, #12]
 8005b90:	2800      	cmp	r0, #0
 8005b92:	d14c      	bne.n	8005c2e <_dtoa_r+0x31e>
 8005b94:	4602      	mov	r2, r0
 8005b96:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005b9a:	4b17      	ldr	r3, [pc, #92]	; (8005bf8 <_dtoa_r+0x2e8>)
 8005b9c:	e6cc      	b.n	8005938 <_dtoa_r+0x28>
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	e7de      	b.n	8005b60 <_dtoa_r+0x250>
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ba6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005ba8:	eb0a 0903 	add.w	r9, sl, r3
 8005bac:	f109 0301 	add.w	r3, r9, #1
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	9308      	str	r3, [sp, #32]
 8005bb4:	bfb8      	it	lt
 8005bb6:	2301      	movlt	r3, #1
 8005bb8:	e7dd      	b.n	8005b76 <_dtoa_r+0x266>
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e7f2      	b.n	8005ba4 <_dtoa_r+0x294>
 8005bbe:	bf00      	nop
 8005bc0:	636f4361 	.word	0x636f4361
 8005bc4:	3fd287a7 	.word	0x3fd287a7
 8005bc8:	8b60c8b3 	.word	0x8b60c8b3
 8005bcc:	3fc68a28 	.word	0x3fc68a28
 8005bd0:	509f79fb 	.word	0x509f79fb
 8005bd4:	3fd34413 	.word	0x3fd34413
 8005bd8:	0800884e 	.word	0x0800884e
 8005bdc:	08008865 	.word	0x08008865
 8005be0:	7ff00000 	.word	0x7ff00000
 8005be4:	0800884a 	.word	0x0800884a
 8005be8:	08008841 	.word	0x08008841
 8005bec:	080086c5 	.word	0x080086c5
 8005bf0:	3ff80000 	.word	0x3ff80000
 8005bf4:	080089d0 	.word	0x080089d0
 8005bf8:	080088c0 	.word	0x080088c0
 8005bfc:	2401      	movs	r4, #1
 8005bfe:	2300      	movs	r3, #0
 8005c00:	940b      	str	r4, [sp, #44]	; 0x2c
 8005c02:	9322      	str	r3, [sp, #136]	; 0x88
 8005c04:	f04f 39ff 	mov.w	r9, #4294967295
 8005c08:	2200      	movs	r2, #0
 8005c0a:	2312      	movs	r3, #18
 8005c0c:	f8cd 9020 	str.w	r9, [sp, #32]
 8005c10:	9223      	str	r2, [sp, #140]	; 0x8c
 8005c12:	e7b0      	b.n	8005b76 <_dtoa_r+0x266>
 8005c14:	2301      	movs	r3, #1
 8005c16:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c18:	e7f4      	b.n	8005c04 <_dtoa_r+0x2f4>
 8005c1a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8005c1e:	464b      	mov	r3, r9
 8005c20:	f8cd 9020 	str.w	r9, [sp, #32]
 8005c24:	e7a7      	b.n	8005b76 <_dtoa_r+0x266>
 8005c26:	3101      	adds	r1, #1
 8005c28:	6041      	str	r1, [r0, #4]
 8005c2a:	0052      	lsls	r2, r2, #1
 8005c2c:	e7a7      	b.n	8005b7e <_dtoa_r+0x26e>
 8005c2e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005c30:	9a03      	ldr	r2, [sp, #12]
 8005c32:	601a      	str	r2, [r3, #0]
 8005c34:	9b08      	ldr	r3, [sp, #32]
 8005c36:	2b0e      	cmp	r3, #14
 8005c38:	f200 80a8 	bhi.w	8005d8c <_dtoa_r+0x47c>
 8005c3c:	2c00      	cmp	r4, #0
 8005c3e:	f000 80a5 	beq.w	8005d8c <_dtoa_r+0x47c>
 8005c42:	f1ba 0f00 	cmp.w	sl, #0
 8005c46:	dd34      	ble.n	8005cb2 <_dtoa_r+0x3a2>
 8005c48:	4a9a      	ldr	r2, [pc, #616]	; (8005eb4 <_dtoa_r+0x5a4>)
 8005c4a:	f00a 030f 	and.w	r3, sl, #15
 8005c4e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005c52:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005c56:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005c5a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005c5e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8005c62:	d016      	beq.n	8005c92 <_dtoa_r+0x382>
 8005c64:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005c68:	4b93      	ldr	r3, [pc, #588]	; (8005eb8 <_dtoa_r+0x5a8>)
 8005c6a:	2703      	movs	r7, #3
 8005c6c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005c70:	f7fa fd5c 	bl	800072c <__aeabi_ddiv>
 8005c74:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005c78:	f004 040f 	and.w	r4, r4, #15
 8005c7c:	4e8e      	ldr	r6, [pc, #568]	; (8005eb8 <_dtoa_r+0x5a8>)
 8005c7e:	b954      	cbnz	r4, 8005c96 <_dtoa_r+0x386>
 8005c80:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005c84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c88:	f7fa fd50 	bl	800072c <__aeabi_ddiv>
 8005c8c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005c90:	e029      	b.n	8005ce6 <_dtoa_r+0x3d6>
 8005c92:	2702      	movs	r7, #2
 8005c94:	e7f2      	b.n	8005c7c <_dtoa_r+0x36c>
 8005c96:	07e1      	lsls	r1, r4, #31
 8005c98:	d508      	bpl.n	8005cac <_dtoa_r+0x39c>
 8005c9a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005c9e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005ca2:	f7fa fc19 	bl	80004d8 <__aeabi_dmul>
 8005ca6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005caa:	3701      	adds	r7, #1
 8005cac:	1064      	asrs	r4, r4, #1
 8005cae:	3608      	adds	r6, #8
 8005cb0:	e7e5      	b.n	8005c7e <_dtoa_r+0x36e>
 8005cb2:	f000 80a5 	beq.w	8005e00 <_dtoa_r+0x4f0>
 8005cb6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005cba:	f1ca 0400 	rsb	r4, sl, #0
 8005cbe:	4b7d      	ldr	r3, [pc, #500]	; (8005eb4 <_dtoa_r+0x5a4>)
 8005cc0:	f004 020f 	and.w	r2, r4, #15
 8005cc4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ccc:	f7fa fc04 	bl	80004d8 <__aeabi_dmul>
 8005cd0:	2702      	movs	r7, #2
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005cd8:	4e77      	ldr	r6, [pc, #476]	; (8005eb8 <_dtoa_r+0x5a8>)
 8005cda:	1124      	asrs	r4, r4, #4
 8005cdc:	2c00      	cmp	r4, #0
 8005cde:	f040 8084 	bne.w	8005dea <_dtoa_r+0x4da>
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d1d2      	bne.n	8005c8c <_dtoa_r+0x37c>
 8005ce6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	f000 808b 	beq.w	8005e04 <_dtoa_r+0x4f4>
 8005cee:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005cf2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005cf6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	4b6f      	ldr	r3, [pc, #444]	; (8005ebc <_dtoa_r+0x5ac>)
 8005cfe:	f7fa fe5d 	bl	80009bc <__aeabi_dcmplt>
 8005d02:	2800      	cmp	r0, #0
 8005d04:	d07e      	beq.n	8005e04 <_dtoa_r+0x4f4>
 8005d06:	9b08      	ldr	r3, [sp, #32]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d07b      	beq.n	8005e04 <_dtoa_r+0x4f4>
 8005d0c:	f1b9 0f00 	cmp.w	r9, #0
 8005d10:	dd38      	ble.n	8005d84 <_dtoa_r+0x474>
 8005d12:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005d16:	2200      	movs	r2, #0
 8005d18:	4b69      	ldr	r3, [pc, #420]	; (8005ec0 <_dtoa_r+0x5b0>)
 8005d1a:	f7fa fbdd 	bl	80004d8 <__aeabi_dmul>
 8005d1e:	464c      	mov	r4, r9
 8005d20:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005d24:	f10a 38ff 	add.w	r8, sl, #4294967295
 8005d28:	3701      	adds	r7, #1
 8005d2a:	4638      	mov	r0, r7
 8005d2c:	f7fa fb6a 	bl	8000404 <__aeabi_i2d>
 8005d30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d34:	f7fa fbd0 	bl	80004d8 <__aeabi_dmul>
 8005d38:	2200      	movs	r2, #0
 8005d3a:	4b62      	ldr	r3, [pc, #392]	; (8005ec4 <_dtoa_r+0x5b4>)
 8005d3c:	f7fa fa16 	bl	800016c <__adddf3>
 8005d40:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005d44:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005d48:	9611      	str	r6, [sp, #68]	; 0x44
 8005d4a:	2c00      	cmp	r4, #0
 8005d4c:	d15d      	bne.n	8005e0a <_dtoa_r+0x4fa>
 8005d4e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d52:	2200      	movs	r2, #0
 8005d54:	4b5c      	ldr	r3, [pc, #368]	; (8005ec8 <_dtoa_r+0x5b8>)
 8005d56:	f7fa fa07 	bl	8000168 <__aeabi_dsub>
 8005d5a:	4602      	mov	r2, r0
 8005d5c:	460b      	mov	r3, r1
 8005d5e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005d62:	4633      	mov	r3, r6
 8005d64:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005d66:	f7fa fe47 	bl	80009f8 <__aeabi_dcmpgt>
 8005d6a:	2800      	cmp	r0, #0
 8005d6c:	f040 829c 	bne.w	80062a8 <_dtoa_r+0x998>
 8005d70:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d74:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005d76:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005d7a:	f7fa fe1f 	bl	80009bc <__aeabi_dcmplt>
 8005d7e:	2800      	cmp	r0, #0
 8005d80:	f040 8290 	bne.w	80062a4 <_dtoa_r+0x994>
 8005d84:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005d88:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005d8c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	f2c0 8152 	blt.w	8006038 <_dtoa_r+0x728>
 8005d94:	f1ba 0f0e 	cmp.w	sl, #14
 8005d98:	f300 814e 	bgt.w	8006038 <_dtoa_r+0x728>
 8005d9c:	4b45      	ldr	r3, [pc, #276]	; (8005eb4 <_dtoa_r+0x5a4>)
 8005d9e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005da2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005da6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005daa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	f280 80db 	bge.w	8005f68 <_dtoa_r+0x658>
 8005db2:	9b08      	ldr	r3, [sp, #32]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	f300 80d7 	bgt.w	8005f68 <_dtoa_r+0x658>
 8005dba:	f040 8272 	bne.w	80062a2 <_dtoa_r+0x992>
 8005dbe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	4b40      	ldr	r3, [pc, #256]	; (8005ec8 <_dtoa_r+0x5b8>)
 8005dc6:	f7fa fb87 	bl	80004d8 <__aeabi_dmul>
 8005dca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005dce:	f7fa fe09 	bl	80009e4 <__aeabi_dcmpge>
 8005dd2:	9c08      	ldr	r4, [sp, #32]
 8005dd4:	4626      	mov	r6, r4
 8005dd6:	2800      	cmp	r0, #0
 8005dd8:	f040 8248 	bne.w	800626c <_dtoa_r+0x95c>
 8005ddc:	2331      	movs	r3, #49	; 0x31
 8005dde:	9f03      	ldr	r7, [sp, #12]
 8005de0:	f10a 0a01 	add.w	sl, sl, #1
 8005de4:	f807 3b01 	strb.w	r3, [r7], #1
 8005de8:	e244      	b.n	8006274 <_dtoa_r+0x964>
 8005dea:	07e2      	lsls	r2, r4, #31
 8005dec:	d505      	bpl.n	8005dfa <_dtoa_r+0x4ea>
 8005dee:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005df2:	f7fa fb71 	bl	80004d8 <__aeabi_dmul>
 8005df6:	2301      	movs	r3, #1
 8005df8:	3701      	adds	r7, #1
 8005dfa:	1064      	asrs	r4, r4, #1
 8005dfc:	3608      	adds	r6, #8
 8005dfe:	e76d      	b.n	8005cdc <_dtoa_r+0x3cc>
 8005e00:	2702      	movs	r7, #2
 8005e02:	e770      	b.n	8005ce6 <_dtoa_r+0x3d6>
 8005e04:	46d0      	mov	r8, sl
 8005e06:	9c08      	ldr	r4, [sp, #32]
 8005e08:	e78f      	b.n	8005d2a <_dtoa_r+0x41a>
 8005e0a:	9903      	ldr	r1, [sp, #12]
 8005e0c:	4b29      	ldr	r3, [pc, #164]	; (8005eb4 <_dtoa_r+0x5a4>)
 8005e0e:	4421      	add	r1, r4
 8005e10:	9112      	str	r1, [sp, #72]	; 0x48
 8005e12:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005e14:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005e18:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005e1c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005e20:	2900      	cmp	r1, #0
 8005e22:	d055      	beq.n	8005ed0 <_dtoa_r+0x5c0>
 8005e24:	2000      	movs	r0, #0
 8005e26:	4929      	ldr	r1, [pc, #164]	; (8005ecc <_dtoa_r+0x5bc>)
 8005e28:	f7fa fc80 	bl	800072c <__aeabi_ddiv>
 8005e2c:	463b      	mov	r3, r7
 8005e2e:	4632      	mov	r2, r6
 8005e30:	f7fa f99a 	bl	8000168 <__aeabi_dsub>
 8005e34:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005e38:	9f03      	ldr	r7, [sp, #12]
 8005e3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e3e:	f7fa fdfb 	bl	8000a38 <__aeabi_d2iz>
 8005e42:	4604      	mov	r4, r0
 8005e44:	f7fa fade 	bl	8000404 <__aeabi_i2d>
 8005e48:	4602      	mov	r2, r0
 8005e4a:	460b      	mov	r3, r1
 8005e4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e50:	f7fa f98a 	bl	8000168 <__aeabi_dsub>
 8005e54:	4602      	mov	r2, r0
 8005e56:	460b      	mov	r3, r1
 8005e58:	3430      	adds	r4, #48	; 0x30
 8005e5a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005e5e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005e62:	f807 4b01 	strb.w	r4, [r7], #1
 8005e66:	f7fa fda9 	bl	80009bc <__aeabi_dcmplt>
 8005e6a:	2800      	cmp	r0, #0
 8005e6c:	d174      	bne.n	8005f58 <_dtoa_r+0x648>
 8005e6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e72:	2000      	movs	r0, #0
 8005e74:	4911      	ldr	r1, [pc, #68]	; (8005ebc <_dtoa_r+0x5ac>)
 8005e76:	f7fa f977 	bl	8000168 <__aeabi_dsub>
 8005e7a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005e7e:	f7fa fd9d 	bl	80009bc <__aeabi_dcmplt>
 8005e82:	2800      	cmp	r0, #0
 8005e84:	f040 80b7 	bne.w	8005ff6 <_dtoa_r+0x6e6>
 8005e88:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005e8a:	429f      	cmp	r7, r3
 8005e8c:	f43f af7a 	beq.w	8005d84 <_dtoa_r+0x474>
 8005e90:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005e94:	2200      	movs	r2, #0
 8005e96:	4b0a      	ldr	r3, [pc, #40]	; (8005ec0 <_dtoa_r+0x5b0>)
 8005e98:	f7fa fb1e 	bl	80004d8 <__aeabi_dmul>
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005ea2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ea6:	4b06      	ldr	r3, [pc, #24]	; (8005ec0 <_dtoa_r+0x5b0>)
 8005ea8:	f7fa fb16 	bl	80004d8 <__aeabi_dmul>
 8005eac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005eb0:	e7c3      	b.n	8005e3a <_dtoa_r+0x52a>
 8005eb2:	bf00      	nop
 8005eb4:	080089d0 	.word	0x080089d0
 8005eb8:	080089a8 	.word	0x080089a8
 8005ebc:	3ff00000 	.word	0x3ff00000
 8005ec0:	40240000 	.word	0x40240000
 8005ec4:	401c0000 	.word	0x401c0000
 8005ec8:	40140000 	.word	0x40140000
 8005ecc:	3fe00000 	.word	0x3fe00000
 8005ed0:	4630      	mov	r0, r6
 8005ed2:	4639      	mov	r1, r7
 8005ed4:	f7fa fb00 	bl	80004d8 <__aeabi_dmul>
 8005ed8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005eda:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005ede:	9c03      	ldr	r4, [sp, #12]
 8005ee0:	9314      	str	r3, [sp, #80]	; 0x50
 8005ee2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ee6:	f7fa fda7 	bl	8000a38 <__aeabi_d2iz>
 8005eea:	9015      	str	r0, [sp, #84]	; 0x54
 8005eec:	f7fa fa8a 	bl	8000404 <__aeabi_i2d>
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	460b      	mov	r3, r1
 8005ef4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ef8:	f7fa f936 	bl	8000168 <__aeabi_dsub>
 8005efc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005efe:	4606      	mov	r6, r0
 8005f00:	3330      	adds	r3, #48	; 0x30
 8005f02:	f804 3b01 	strb.w	r3, [r4], #1
 8005f06:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005f08:	460f      	mov	r7, r1
 8005f0a:	429c      	cmp	r4, r3
 8005f0c:	f04f 0200 	mov.w	r2, #0
 8005f10:	d124      	bne.n	8005f5c <_dtoa_r+0x64c>
 8005f12:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005f16:	4bb0      	ldr	r3, [pc, #704]	; (80061d8 <_dtoa_r+0x8c8>)
 8005f18:	f7fa f928 	bl	800016c <__adddf3>
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	460b      	mov	r3, r1
 8005f20:	4630      	mov	r0, r6
 8005f22:	4639      	mov	r1, r7
 8005f24:	f7fa fd68 	bl	80009f8 <__aeabi_dcmpgt>
 8005f28:	2800      	cmp	r0, #0
 8005f2a:	d163      	bne.n	8005ff4 <_dtoa_r+0x6e4>
 8005f2c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005f30:	2000      	movs	r0, #0
 8005f32:	49a9      	ldr	r1, [pc, #676]	; (80061d8 <_dtoa_r+0x8c8>)
 8005f34:	f7fa f918 	bl	8000168 <__aeabi_dsub>
 8005f38:	4602      	mov	r2, r0
 8005f3a:	460b      	mov	r3, r1
 8005f3c:	4630      	mov	r0, r6
 8005f3e:	4639      	mov	r1, r7
 8005f40:	f7fa fd3c 	bl	80009bc <__aeabi_dcmplt>
 8005f44:	2800      	cmp	r0, #0
 8005f46:	f43f af1d 	beq.w	8005d84 <_dtoa_r+0x474>
 8005f4a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005f4c:	1e7b      	subs	r3, r7, #1
 8005f4e:	9314      	str	r3, [sp, #80]	; 0x50
 8005f50:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005f54:	2b30      	cmp	r3, #48	; 0x30
 8005f56:	d0f8      	beq.n	8005f4a <_dtoa_r+0x63a>
 8005f58:	46c2      	mov	sl, r8
 8005f5a:	e03b      	b.n	8005fd4 <_dtoa_r+0x6c4>
 8005f5c:	4b9f      	ldr	r3, [pc, #636]	; (80061dc <_dtoa_r+0x8cc>)
 8005f5e:	f7fa fabb 	bl	80004d8 <__aeabi_dmul>
 8005f62:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005f66:	e7bc      	b.n	8005ee2 <_dtoa_r+0x5d2>
 8005f68:	9f03      	ldr	r7, [sp, #12]
 8005f6a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005f6e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005f72:	4640      	mov	r0, r8
 8005f74:	4649      	mov	r1, r9
 8005f76:	f7fa fbd9 	bl	800072c <__aeabi_ddiv>
 8005f7a:	f7fa fd5d 	bl	8000a38 <__aeabi_d2iz>
 8005f7e:	4604      	mov	r4, r0
 8005f80:	f7fa fa40 	bl	8000404 <__aeabi_i2d>
 8005f84:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005f88:	f7fa faa6 	bl	80004d8 <__aeabi_dmul>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	460b      	mov	r3, r1
 8005f90:	4640      	mov	r0, r8
 8005f92:	4649      	mov	r1, r9
 8005f94:	f7fa f8e8 	bl	8000168 <__aeabi_dsub>
 8005f98:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005f9c:	f807 6b01 	strb.w	r6, [r7], #1
 8005fa0:	9e03      	ldr	r6, [sp, #12]
 8005fa2:	f8dd c020 	ldr.w	ip, [sp, #32]
 8005fa6:	1bbe      	subs	r6, r7, r6
 8005fa8:	45b4      	cmp	ip, r6
 8005faa:	4602      	mov	r2, r0
 8005fac:	460b      	mov	r3, r1
 8005fae:	d136      	bne.n	800601e <_dtoa_r+0x70e>
 8005fb0:	f7fa f8dc 	bl	800016c <__adddf3>
 8005fb4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005fb8:	4680      	mov	r8, r0
 8005fba:	4689      	mov	r9, r1
 8005fbc:	f7fa fd1c 	bl	80009f8 <__aeabi_dcmpgt>
 8005fc0:	bb58      	cbnz	r0, 800601a <_dtoa_r+0x70a>
 8005fc2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005fc6:	4640      	mov	r0, r8
 8005fc8:	4649      	mov	r1, r9
 8005fca:	f7fa fced 	bl	80009a8 <__aeabi_dcmpeq>
 8005fce:	b108      	cbz	r0, 8005fd4 <_dtoa_r+0x6c4>
 8005fd0:	07e1      	lsls	r1, r4, #31
 8005fd2:	d422      	bmi.n	800601a <_dtoa_r+0x70a>
 8005fd4:	4628      	mov	r0, r5
 8005fd6:	4659      	mov	r1, fp
 8005fd8:	f000 fe68 	bl	8006cac <_Bfree>
 8005fdc:	2300      	movs	r3, #0
 8005fde:	703b      	strb	r3, [r7, #0]
 8005fe0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005fe2:	f10a 0001 	add.w	r0, sl, #1
 8005fe6:	6018      	str	r0, [r3, #0]
 8005fe8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	f43f acde 	beq.w	80059ac <_dtoa_r+0x9c>
 8005ff0:	601f      	str	r7, [r3, #0]
 8005ff2:	e4db      	b.n	80059ac <_dtoa_r+0x9c>
 8005ff4:	4627      	mov	r7, r4
 8005ff6:	463b      	mov	r3, r7
 8005ff8:	461f      	mov	r7, r3
 8005ffa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005ffe:	2a39      	cmp	r2, #57	; 0x39
 8006000:	d107      	bne.n	8006012 <_dtoa_r+0x702>
 8006002:	9a03      	ldr	r2, [sp, #12]
 8006004:	429a      	cmp	r2, r3
 8006006:	d1f7      	bne.n	8005ff8 <_dtoa_r+0x6e8>
 8006008:	2230      	movs	r2, #48	; 0x30
 800600a:	9903      	ldr	r1, [sp, #12]
 800600c:	f108 0801 	add.w	r8, r8, #1
 8006010:	700a      	strb	r2, [r1, #0]
 8006012:	781a      	ldrb	r2, [r3, #0]
 8006014:	3201      	adds	r2, #1
 8006016:	701a      	strb	r2, [r3, #0]
 8006018:	e79e      	b.n	8005f58 <_dtoa_r+0x648>
 800601a:	46d0      	mov	r8, sl
 800601c:	e7eb      	b.n	8005ff6 <_dtoa_r+0x6e6>
 800601e:	2200      	movs	r2, #0
 8006020:	4b6e      	ldr	r3, [pc, #440]	; (80061dc <_dtoa_r+0x8cc>)
 8006022:	f7fa fa59 	bl	80004d8 <__aeabi_dmul>
 8006026:	2200      	movs	r2, #0
 8006028:	2300      	movs	r3, #0
 800602a:	4680      	mov	r8, r0
 800602c:	4689      	mov	r9, r1
 800602e:	f7fa fcbb 	bl	80009a8 <__aeabi_dcmpeq>
 8006032:	2800      	cmp	r0, #0
 8006034:	d09b      	beq.n	8005f6e <_dtoa_r+0x65e>
 8006036:	e7cd      	b.n	8005fd4 <_dtoa_r+0x6c4>
 8006038:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800603a:	2a00      	cmp	r2, #0
 800603c:	f000 80d0 	beq.w	80061e0 <_dtoa_r+0x8d0>
 8006040:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006042:	2a01      	cmp	r2, #1
 8006044:	f300 80ae 	bgt.w	80061a4 <_dtoa_r+0x894>
 8006048:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800604a:	2a00      	cmp	r2, #0
 800604c:	f000 80a6 	beq.w	800619c <_dtoa_r+0x88c>
 8006050:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006054:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006056:	9f06      	ldr	r7, [sp, #24]
 8006058:	9a06      	ldr	r2, [sp, #24]
 800605a:	2101      	movs	r1, #1
 800605c:	441a      	add	r2, r3
 800605e:	9206      	str	r2, [sp, #24]
 8006060:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006062:	4628      	mov	r0, r5
 8006064:	441a      	add	r2, r3
 8006066:	9209      	str	r2, [sp, #36]	; 0x24
 8006068:	f000 ff20 	bl	8006eac <__i2b>
 800606c:	4606      	mov	r6, r0
 800606e:	2f00      	cmp	r7, #0
 8006070:	dd0c      	ble.n	800608c <_dtoa_r+0x77c>
 8006072:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006074:	2b00      	cmp	r3, #0
 8006076:	dd09      	ble.n	800608c <_dtoa_r+0x77c>
 8006078:	42bb      	cmp	r3, r7
 800607a:	bfa8      	it	ge
 800607c:	463b      	movge	r3, r7
 800607e:	9a06      	ldr	r2, [sp, #24]
 8006080:	1aff      	subs	r7, r7, r3
 8006082:	1ad2      	subs	r2, r2, r3
 8006084:	9206      	str	r2, [sp, #24]
 8006086:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006088:	1ad3      	subs	r3, r2, r3
 800608a:	9309      	str	r3, [sp, #36]	; 0x24
 800608c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800608e:	b1f3      	cbz	r3, 80060ce <_dtoa_r+0x7be>
 8006090:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006092:	2b00      	cmp	r3, #0
 8006094:	f000 80a8 	beq.w	80061e8 <_dtoa_r+0x8d8>
 8006098:	2c00      	cmp	r4, #0
 800609a:	dd10      	ble.n	80060be <_dtoa_r+0x7ae>
 800609c:	4631      	mov	r1, r6
 800609e:	4622      	mov	r2, r4
 80060a0:	4628      	mov	r0, r5
 80060a2:	f000 ffc1 	bl	8007028 <__pow5mult>
 80060a6:	465a      	mov	r2, fp
 80060a8:	4601      	mov	r1, r0
 80060aa:	4606      	mov	r6, r0
 80060ac:	4628      	mov	r0, r5
 80060ae:	f000 ff13 	bl	8006ed8 <__multiply>
 80060b2:	4680      	mov	r8, r0
 80060b4:	4659      	mov	r1, fp
 80060b6:	4628      	mov	r0, r5
 80060b8:	f000 fdf8 	bl	8006cac <_Bfree>
 80060bc:	46c3      	mov	fp, r8
 80060be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060c0:	1b1a      	subs	r2, r3, r4
 80060c2:	d004      	beq.n	80060ce <_dtoa_r+0x7be>
 80060c4:	4659      	mov	r1, fp
 80060c6:	4628      	mov	r0, r5
 80060c8:	f000 ffae 	bl	8007028 <__pow5mult>
 80060cc:	4683      	mov	fp, r0
 80060ce:	2101      	movs	r1, #1
 80060d0:	4628      	mov	r0, r5
 80060d2:	f000 feeb 	bl	8006eac <__i2b>
 80060d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80060d8:	4604      	mov	r4, r0
 80060da:	2b00      	cmp	r3, #0
 80060dc:	f340 8086 	ble.w	80061ec <_dtoa_r+0x8dc>
 80060e0:	461a      	mov	r2, r3
 80060e2:	4601      	mov	r1, r0
 80060e4:	4628      	mov	r0, r5
 80060e6:	f000 ff9f 	bl	8007028 <__pow5mult>
 80060ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80060ec:	4604      	mov	r4, r0
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	dd7f      	ble.n	80061f2 <_dtoa_r+0x8e2>
 80060f2:	f04f 0800 	mov.w	r8, #0
 80060f6:	6923      	ldr	r3, [r4, #16]
 80060f8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80060fc:	6918      	ldr	r0, [r3, #16]
 80060fe:	f000 fe87 	bl	8006e10 <__hi0bits>
 8006102:	f1c0 0020 	rsb	r0, r0, #32
 8006106:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006108:	4418      	add	r0, r3
 800610a:	f010 001f 	ands.w	r0, r0, #31
 800610e:	f000 8092 	beq.w	8006236 <_dtoa_r+0x926>
 8006112:	f1c0 0320 	rsb	r3, r0, #32
 8006116:	2b04      	cmp	r3, #4
 8006118:	f340 808a 	ble.w	8006230 <_dtoa_r+0x920>
 800611c:	f1c0 001c 	rsb	r0, r0, #28
 8006120:	9b06      	ldr	r3, [sp, #24]
 8006122:	4407      	add	r7, r0
 8006124:	4403      	add	r3, r0
 8006126:	9306      	str	r3, [sp, #24]
 8006128:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800612a:	4403      	add	r3, r0
 800612c:	9309      	str	r3, [sp, #36]	; 0x24
 800612e:	9b06      	ldr	r3, [sp, #24]
 8006130:	2b00      	cmp	r3, #0
 8006132:	dd05      	ble.n	8006140 <_dtoa_r+0x830>
 8006134:	4659      	mov	r1, fp
 8006136:	461a      	mov	r2, r3
 8006138:	4628      	mov	r0, r5
 800613a:	f000 ffcf 	bl	80070dc <__lshift>
 800613e:	4683      	mov	fp, r0
 8006140:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006142:	2b00      	cmp	r3, #0
 8006144:	dd05      	ble.n	8006152 <_dtoa_r+0x842>
 8006146:	4621      	mov	r1, r4
 8006148:	461a      	mov	r2, r3
 800614a:	4628      	mov	r0, r5
 800614c:	f000 ffc6 	bl	80070dc <__lshift>
 8006150:	4604      	mov	r4, r0
 8006152:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006154:	2b00      	cmp	r3, #0
 8006156:	d070      	beq.n	800623a <_dtoa_r+0x92a>
 8006158:	4621      	mov	r1, r4
 800615a:	4658      	mov	r0, fp
 800615c:	f001 f82e 	bl	80071bc <__mcmp>
 8006160:	2800      	cmp	r0, #0
 8006162:	da6a      	bge.n	800623a <_dtoa_r+0x92a>
 8006164:	2300      	movs	r3, #0
 8006166:	4659      	mov	r1, fp
 8006168:	220a      	movs	r2, #10
 800616a:	4628      	mov	r0, r5
 800616c:	f000 fdc0 	bl	8006cf0 <__multadd>
 8006170:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006172:	4683      	mov	fp, r0
 8006174:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006178:	2b00      	cmp	r3, #0
 800617a:	f000 8194 	beq.w	80064a6 <_dtoa_r+0xb96>
 800617e:	4631      	mov	r1, r6
 8006180:	2300      	movs	r3, #0
 8006182:	220a      	movs	r2, #10
 8006184:	4628      	mov	r0, r5
 8006186:	f000 fdb3 	bl	8006cf0 <__multadd>
 800618a:	f1b9 0f00 	cmp.w	r9, #0
 800618e:	4606      	mov	r6, r0
 8006190:	f300 8093 	bgt.w	80062ba <_dtoa_r+0x9aa>
 8006194:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006196:	2b02      	cmp	r3, #2
 8006198:	dc57      	bgt.n	800624a <_dtoa_r+0x93a>
 800619a:	e08e      	b.n	80062ba <_dtoa_r+0x9aa>
 800619c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800619e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80061a2:	e757      	b.n	8006054 <_dtoa_r+0x744>
 80061a4:	9b08      	ldr	r3, [sp, #32]
 80061a6:	1e5c      	subs	r4, r3, #1
 80061a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061aa:	42a3      	cmp	r3, r4
 80061ac:	bfb7      	itett	lt
 80061ae:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80061b0:	1b1c      	subge	r4, r3, r4
 80061b2:	1ae2      	sublt	r2, r4, r3
 80061b4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80061b6:	bfbe      	ittt	lt
 80061b8:	940a      	strlt	r4, [sp, #40]	; 0x28
 80061ba:	189b      	addlt	r3, r3, r2
 80061bc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80061be:	9b08      	ldr	r3, [sp, #32]
 80061c0:	bfb8      	it	lt
 80061c2:	2400      	movlt	r4, #0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	bfbb      	ittet	lt
 80061c8:	9b06      	ldrlt	r3, [sp, #24]
 80061ca:	9a08      	ldrlt	r2, [sp, #32]
 80061cc:	9f06      	ldrge	r7, [sp, #24]
 80061ce:	1a9f      	sublt	r7, r3, r2
 80061d0:	bfac      	ite	ge
 80061d2:	9b08      	ldrge	r3, [sp, #32]
 80061d4:	2300      	movlt	r3, #0
 80061d6:	e73f      	b.n	8006058 <_dtoa_r+0x748>
 80061d8:	3fe00000 	.word	0x3fe00000
 80061dc:	40240000 	.word	0x40240000
 80061e0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80061e2:	9f06      	ldr	r7, [sp, #24]
 80061e4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80061e6:	e742      	b.n	800606e <_dtoa_r+0x75e>
 80061e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80061ea:	e76b      	b.n	80060c4 <_dtoa_r+0x7b4>
 80061ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	dc19      	bgt.n	8006226 <_dtoa_r+0x916>
 80061f2:	9b04      	ldr	r3, [sp, #16]
 80061f4:	b9bb      	cbnz	r3, 8006226 <_dtoa_r+0x916>
 80061f6:	9b05      	ldr	r3, [sp, #20]
 80061f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80061fc:	b99b      	cbnz	r3, 8006226 <_dtoa_r+0x916>
 80061fe:	9b05      	ldr	r3, [sp, #20]
 8006200:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006204:	0d1b      	lsrs	r3, r3, #20
 8006206:	051b      	lsls	r3, r3, #20
 8006208:	b183      	cbz	r3, 800622c <_dtoa_r+0x91c>
 800620a:	f04f 0801 	mov.w	r8, #1
 800620e:	9b06      	ldr	r3, [sp, #24]
 8006210:	3301      	adds	r3, #1
 8006212:	9306      	str	r3, [sp, #24]
 8006214:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006216:	3301      	adds	r3, #1
 8006218:	9309      	str	r3, [sp, #36]	; 0x24
 800621a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800621c:	2b00      	cmp	r3, #0
 800621e:	f47f af6a 	bne.w	80060f6 <_dtoa_r+0x7e6>
 8006222:	2001      	movs	r0, #1
 8006224:	e76f      	b.n	8006106 <_dtoa_r+0x7f6>
 8006226:	f04f 0800 	mov.w	r8, #0
 800622a:	e7f6      	b.n	800621a <_dtoa_r+0x90a>
 800622c:	4698      	mov	r8, r3
 800622e:	e7f4      	b.n	800621a <_dtoa_r+0x90a>
 8006230:	f43f af7d 	beq.w	800612e <_dtoa_r+0x81e>
 8006234:	4618      	mov	r0, r3
 8006236:	301c      	adds	r0, #28
 8006238:	e772      	b.n	8006120 <_dtoa_r+0x810>
 800623a:	9b08      	ldr	r3, [sp, #32]
 800623c:	2b00      	cmp	r3, #0
 800623e:	dc36      	bgt.n	80062ae <_dtoa_r+0x99e>
 8006240:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006242:	2b02      	cmp	r3, #2
 8006244:	dd33      	ble.n	80062ae <_dtoa_r+0x99e>
 8006246:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800624a:	f1b9 0f00 	cmp.w	r9, #0
 800624e:	d10d      	bne.n	800626c <_dtoa_r+0x95c>
 8006250:	4621      	mov	r1, r4
 8006252:	464b      	mov	r3, r9
 8006254:	2205      	movs	r2, #5
 8006256:	4628      	mov	r0, r5
 8006258:	f000 fd4a 	bl	8006cf0 <__multadd>
 800625c:	4601      	mov	r1, r0
 800625e:	4604      	mov	r4, r0
 8006260:	4658      	mov	r0, fp
 8006262:	f000 ffab 	bl	80071bc <__mcmp>
 8006266:	2800      	cmp	r0, #0
 8006268:	f73f adb8 	bgt.w	8005ddc <_dtoa_r+0x4cc>
 800626c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800626e:	9f03      	ldr	r7, [sp, #12]
 8006270:	ea6f 0a03 	mvn.w	sl, r3
 8006274:	f04f 0800 	mov.w	r8, #0
 8006278:	4621      	mov	r1, r4
 800627a:	4628      	mov	r0, r5
 800627c:	f000 fd16 	bl	8006cac <_Bfree>
 8006280:	2e00      	cmp	r6, #0
 8006282:	f43f aea7 	beq.w	8005fd4 <_dtoa_r+0x6c4>
 8006286:	f1b8 0f00 	cmp.w	r8, #0
 800628a:	d005      	beq.n	8006298 <_dtoa_r+0x988>
 800628c:	45b0      	cmp	r8, r6
 800628e:	d003      	beq.n	8006298 <_dtoa_r+0x988>
 8006290:	4641      	mov	r1, r8
 8006292:	4628      	mov	r0, r5
 8006294:	f000 fd0a 	bl	8006cac <_Bfree>
 8006298:	4631      	mov	r1, r6
 800629a:	4628      	mov	r0, r5
 800629c:	f000 fd06 	bl	8006cac <_Bfree>
 80062a0:	e698      	b.n	8005fd4 <_dtoa_r+0x6c4>
 80062a2:	2400      	movs	r4, #0
 80062a4:	4626      	mov	r6, r4
 80062a6:	e7e1      	b.n	800626c <_dtoa_r+0x95c>
 80062a8:	46c2      	mov	sl, r8
 80062aa:	4626      	mov	r6, r4
 80062ac:	e596      	b.n	8005ddc <_dtoa_r+0x4cc>
 80062ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	f000 80fd 	beq.w	80064b4 <_dtoa_r+0xba4>
 80062ba:	2f00      	cmp	r7, #0
 80062bc:	dd05      	ble.n	80062ca <_dtoa_r+0x9ba>
 80062be:	4631      	mov	r1, r6
 80062c0:	463a      	mov	r2, r7
 80062c2:	4628      	mov	r0, r5
 80062c4:	f000 ff0a 	bl	80070dc <__lshift>
 80062c8:	4606      	mov	r6, r0
 80062ca:	f1b8 0f00 	cmp.w	r8, #0
 80062ce:	d05c      	beq.n	800638a <_dtoa_r+0xa7a>
 80062d0:	4628      	mov	r0, r5
 80062d2:	6871      	ldr	r1, [r6, #4]
 80062d4:	f000 fcaa 	bl	8006c2c <_Balloc>
 80062d8:	4607      	mov	r7, r0
 80062da:	b928      	cbnz	r0, 80062e8 <_dtoa_r+0x9d8>
 80062dc:	4602      	mov	r2, r0
 80062de:	f240 21ea 	movw	r1, #746	; 0x2ea
 80062e2:	4b7f      	ldr	r3, [pc, #508]	; (80064e0 <_dtoa_r+0xbd0>)
 80062e4:	f7ff bb28 	b.w	8005938 <_dtoa_r+0x28>
 80062e8:	6932      	ldr	r2, [r6, #16]
 80062ea:	f106 010c 	add.w	r1, r6, #12
 80062ee:	3202      	adds	r2, #2
 80062f0:	0092      	lsls	r2, r2, #2
 80062f2:	300c      	adds	r0, #12
 80062f4:	f000 fc8c 	bl	8006c10 <memcpy>
 80062f8:	2201      	movs	r2, #1
 80062fa:	4639      	mov	r1, r7
 80062fc:	4628      	mov	r0, r5
 80062fe:	f000 feed 	bl	80070dc <__lshift>
 8006302:	46b0      	mov	r8, r6
 8006304:	4606      	mov	r6, r0
 8006306:	9b03      	ldr	r3, [sp, #12]
 8006308:	3301      	adds	r3, #1
 800630a:	9308      	str	r3, [sp, #32]
 800630c:	9b03      	ldr	r3, [sp, #12]
 800630e:	444b      	add	r3, r9
 8006310:	930a      	str	r3, [sp, #40]	; 0x28
 8006312:	9b04      	ldr	r3, [sp, #16]
 8006314:	f003 0301 	and.w	r3, r3, #1
 8006318:	9309      	str	r3, [sp, #36]	; 0x24
 800631a:	9b08      	ldr	r3, [sp, #32]
 800631c:	4621      	mov	r1, r4
 800631e:	3b01      	subs	r3, #1
 8006320:	4658      	mov	r0, fp
 8006322:	9304      	str	r3, [sp, #16]
 8006324:	f7ff fa68 	bl	80057f8 <quorem>
 8006328:	4603      	mov	r3, r0
 800632a:	4641      	mov	r1, r8
 800632c:	3330      	adds	r3, #48	; 0x30
 800632e:	9006      	str	r0, [sp, #24]
 8006330:	4658      	mov	r0, fp
 8006332:	930b      	str	r3, [sp, #44]	; 0x2c
 8006334:	f000 ff42 	bl	80071bc <__mcmp>
 8006338:	4632      	mov	r2, r6
 800633a:	4681      	mov	r9, r0
 800633c:	4621      	mov	r1, r4
 800633e:	4628      	mov	r0, r5
 8006340:	f000 ff58 	bl	80071f4 <__mdiff>
 8006344:	68c2      	ldr	r2, [r0, #12]
 8006346:	4607      	mov	r7, r0
 8006348:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800634a:	bb02      	cbnz	r2, 800638e <_dtoa_r+0xa7e>
 800634c:	4601      	mov	r1, r0
 800634e:	4658      	mov	r0, fp
 8006350:	f000 ff34 	bl	80071bc <__mcmp>
 8006354:	4602      	mov	r2, r0
 8006356:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006358:	4639      	mov	r1, r7
 800635a:	4628      	mov	r0, r5
 800635c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006360:	f000 fca4 	bl	8006cac <_Bfree>
 8006364:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006366:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006368:	9f08      	ldr	r7, [sp, #32]
 800636a:	ea43 0102 	orr.w	r1, r3, r2
 800636e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006370:	430b      	orrs	r3, r1
 8006372:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006374:	d10d      	bne.n	8006392 <_dtoa_r+0xa82>
 8006376:	2b39      	cmp	r3, #57	; 0x39
 8006378:	d029      	beq.n	80063ce <_dtoa_r+0xabe>
 800637a:	f1b9 0f00 	cmp.w	r9, #0
 800637e:	dd01      	ble.n	8006384 <_dtoa_r+0xa74>
 8006380:	9b06      	ldr	r3, [sp, #24]
 8006382:	3331      	adds	r3, #49	; 0x31
 8006384:	9a04      	ldr	r2, [sp, #16]
 8006386:	7013      	strb	r3, [r2, #0]
 8006388:	e776      	b.n	8006278 <_dtoa_r+0x968>
 800638a:	4630      	mov	r0, r6
 800638c:	e7b9      	b.n	8006302 <_dtoa_r+0x9f2>
 800638e:	2201      	movs	r2, #1
 8006390:	e7e2      	b.n	8006358 <_dtoa_r+0xa48>
 8006392:	f1b9 0f00 	cmp.w	r9, #0
 8006396:	db06      	blt.n	80063a6 <_dtoa_r+0xa96>
 8006398:	9922      	ldr	r1, [sp, #136]	; 0x88
 800639a:	ea41 0909 	orr.w	r9, r1, r9
 800639e:	9909      	ldr	r1, [sp, #36]	; 0x24
 80063a0:	ea59 0101 	orrs.w	r1, r9, r1
 80063a4:	d120      	bne.n	80063e8 <_dtoa_r+0xad8>
 80063a6:	2a00      	cmp	r2, #0
 80063a8:	ddec      	ble.n	8006384 <_dtoa_r+0xa74>
 80063aa:	4659      	mov	r1, fp
 80063ac:	2201      	movs	r2, #1
 80063ae:	4628      	mov	r0, r5
 80063b0:	9308      	str	r3, [sp, #32]
 80063b2:	f000 fe93 	bl	80070dc <__lshift>
 80063b6:	4621      	mov	r1, r4
 80063b8:	4683      	mov	fp, r0
 80063ba:	f000 feff 	bl	80071bc <__mcmp>
 80063be:	2800      	cmp	r0, #0
 80063c0:	9b08      	ldr	r3, [sp, #32]
 80063c2:	dc02      	bgt.n	80063ca <_dtoa_r+0xaba>
 80063c4:	d1de      	bne.n	8006384 <_dtoa_r+0xa74>
 80063c6:	07da      	lsls	r2, r3, #31
 80063c8:	d5dc      	bpl.n	8006384 <_dtoa_r+0xa74>
 80063ca:	2b39      	cmp	r3, #57	; 0x39
 80063cc:	d1d8      	bne.n	8006380 <_dtoa_r+0xa70>
 80063ce:	2339      	movs	r3, #57	; 0x39
 80063d0:	9a04      	ldr	r2, [sp, #16]
 80063d2:	7013      	strb	r3, [r2, #0]
 80063d4:	463b      	mov	r3, r7
 80063d6:	461f      	mov	r7, r3
 80063d8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80063dc:	3b01      	subs	r3, #1
 80063de:	2a39      	cmp	r2, #57	; 0x39
 80063e0:	d050      	beq.n	8006484 <_dtoa_r+0xb74>
 80063e2:	3201      	adds	r2, #1
 80063e4:	701a      	strb	r2, [r3, #0]
 80063e6:	e747      	b.n	8006278 <_dtoa_r+0x968>
 80063e8:	2a00      	cmp	r2, #0
 80063ea:	dd03      	ble.n	80063f4 <_dtoa_r+0xae4>
 80063ec:	2b39      	cmp	r3, #57	; 0x39
 80063ee:	d0ee      	beq.n	80063ce <_dtoa_r+0xabe>
 80063f0:	3301      	adds	r3, #1
 80063f2:	e7c7      	b.n	8006384 <_dtoa_r+0xa74>
 80063f4:	9a08      	ldr	r2, [sp, #32]
 80063f6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80063f8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80063fc:	428a      	cmp	r2, r1
 80063fe:	d02a      	beq.n	8006456 <_dtoa_r+0xb46>
 8006400:	4659      	mov	r1, fp
 8006402:	2300      	movs	r3, #0
 8006404:	220a      	movs	r2, #10
 8006406:	4628      	mov	r0, r5
 8006408:	f000 fc72 	bl	8006cf0 <__multadd>
 800640c:	45b0      	cmp	r8, r6
 800640e:	4683      	mov	fp, r0
 8006410:	f04f 0300 	mov.w	r3, #0
 8006414:	f04f 020a 	mov.w	r2, #10
 8006418:	4641      	mov	r1, r8
 800641a:	4628      	mov	r0, r5
 800641c:	d107      	bne.n	800642e <_dtoa_r+0xb1e>
 800641e:	f000 fc67 	bl	8006cf0 <__multadd>
 8006422:	4680      	mov	r8, r0
 8006424:	4606      	mov	r6, r0
 8006426:	9b08      	ldr	r3, [sp, #32]
 8006428:	3301      	adds	r3, #1
 800642a:	9308      	str	r3, [sp, #32]
 800642c:	e775      	b.n	800631a <_dtoa_r+0xa0a>
 800642e:	f000 fc5f 	bl	8006cf0 <__multadd>
 8006432:	4631      	mov	r1, r6
 8006434:	4680      	mov	r8, r0
 8006436:	2300      	movs	r3, #0
 8006438:	220a      	movs	r2, #10
 800643a:	4628      	mov	r0, r5
 800643c:	f000 fc58 	bl	8006cf0 <__multadd>
 8006440:	4606      	mov	r6, r0
 8006442:	e7f0      	b.n	8006426 <_dtoa_r+0xb16>
 8006444:	f1b9 0f00 	cmp.w	r9, #0
 8006448:	bfcc      	ite	gt
 800644a:	464f      	movgt	r7, r9
 800644c:	2701      	movle	r7, #1
 800644e:	f04f 0800 	mov.w	r8, #0
 8006452:	9a03      	ldr	r2, [sp, #12]
 8006454:	4417      	add	r7, r2
 8006456:	4659      	mov	r1, fp
 8006458:	2201      	movs	r2, #1
 800645a:	4628      	mov	r0, r5
 800645c:	9308      	str	r3, [sp, #32]
 800645e:	f000 fe3d 	bl	80070dc <__lshift>
 8006462:	4621      	mov	r1, r4
 8006464:	4683      	mov	fp, r0
 8006466:	f000 fea9 	bl	80071bc <__mcmp>
 800646a:	2800      	cmp	r0, #0
 800646c:	dcb2      	bgt.n	80063d4 <_dtoa_r+0xac4>
 800646e:	d102      	bne.n	8006476 <_dtoa_r+0xb66>
 8006470:	9b08      	ldr	r3, [sp, #32]
 8006472:	07db      	lsls	r3, r3, #31
 8006474:	d4ae      	bmi.n	80063d4 <_dtoa_r+0xac4>
 8006476:	463b      	mov	r3, r7
 8006478:	461f      	mov	r7, r3
 800647a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800647e:	2a30      	cmp	r2, #48	; 0x30
 8006480:	d0fa      	beq.n	8006478 <_dtoa_r+0xb68>
 8006482:	e6f9      	b.n	8006278 <_dtoa_r+0x968>
 8006484:	9a03      	ldr	r2, [sp, #12]
 8006486:	429a      	cmp	r2, r3
 8006488:	d1a5      	bne.n	80063d6 <_dtoa_r+0xac6>
 800648a:	2331      	movs	r3, #49	; 0x31
 800648c:	f10a 0a01 	add.w	sl, sl, #1
 8006490:	e779      	b.n	8006386 <_dtoa_r+0xa76>
 8006492:	4b14      	ldr	r3, [pc, #80]	; (80064e4 <_dtoa_r+0xbd4>)
 8006494:	f7ff baa8 	b.w	80059e8 <_dtoa_r+0xd8>
 8006498:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800649a:	2b00      	cmp	r3, #0
 800649c:	f47f aa81 	bne.w	80059a2 <_dtoa_r+0x92>
 80064a0:	4b11      	ldr	r3, [pc, #68]	; (80064e8 <_dtoa_r+0xbd8>)
 80064a2:	f7ff baa1 	b.w	80059e8 <_dtoa_r+0xd8>
 80064a6:	f1b9 0f00 	cmp.w	r9, #0
 80064aa:	dc03      	bgt.n	80064b4 <_dtoa_r+0xba4>
 80064ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80064ae:	2b02      	cmp	r3, #2
 80064b0:	f73f aecb 	bgt.w	800624a <_dtoa_r+0x93a>
 80064b4:	9f03      	ldr	r7, [sp, #12]
 80064b6:	4621      	mov	r1, r4
 80064b8:	4658      	mov	r0, fp
 80064ba:	f7ff f99d 	bl	80057f8 <quorem>
 80064be:	9a03      	ldr	r2, [sp, #12]
 80064c0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80064c4:	f807 3b01 	strb.w	r3, [r7], #1
 80064c8:	1aba      	subs	r2, r7, r2
 80064ca:	4591      	cmp	r9, r2
 80064cc:	ddba      	ble.n	8006444 <_dtoa_r+0xb34>
 80064ce:	4659      	mov	r1, fp
 80064d0:	2300      	movs	r3, #0
 80064d2:	220a      	movs	r2, #10
 80064d4:	4628      	mov	r0, r5
 80064d6:	f000 fc0b 	bl	8006cf0 <__multadd>
 80064da:	4683      	mov	fp, r0
 80064dc:	e7eb      	b.n	80064b6 <_dtoa_r+0xba6>
 80064de:	bf00      	nop
 80064e0:	080088c0 	.word	0x080088c0
 80064e4:	080086c4 	.word	0x080086c4
 80064e8:	08008841 	.word	0x08008841

080064ec <rshift>:
 80064ec:	6903      	ldr	r3, [r0, #16]
 80064ee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80064f2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80064f6:	f100 0414 	add.w	r4, r0, #20
 80064fa:	ea4f 1261 	mov.w	r2, r1, asr #5
 80064fe:	dd46      	ble.n	800658e <rshift+0xa2>
 8006500:	f011 011f 	ands.w	r1, r1, #31
 8006504:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006508:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800650c:	d10c      	bne.n	8006528 <rshift+0x3c>
 800650e:	4629      	mov	r1, r5
 8006510:	f100 0710 	add.w	r7, r0, #16
 8006514:	42b1      	cmp	r1, r6
 8006516:	d335      	bcc.n	8006584 <rshift+0x98>
 8006518:	1a9b      	subs	r3, r3, r2
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	1eea      	subs	r2, r5, #3
 800651e:	4296      	cmp	r6, r2
 8006520:	bf38      	it	cc
 8006522:	2300      	movcc	r3, #0
 8006524:	4423      	add	r3, r4
 8006526:	e015      	b.n	8006554 <rshift+0x68>
 8006528:	46a1      	mov	r9, r4
 800652a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800652e:	f1c1 0820 	rsb	r8, r1, #32
 8006532:	40cf      	lsrs	r7, r1
 8006534:	f105 0e04 	add.w	lr, r5, #4
 8006538:	4576      	cmp	r6, lr
 800653a:	46f4      	mov	ip, lr
 800653c:	d816      	bhi.n	800656c <rshift+0x80>
 800653e:	1a9a      	subs	r2, r3, r2
 8006540:	0092      	lsls	r2, r2, #2
 8006542:	3a04      	subs	r2, #4
 8006544:	3501      	adds	r5, #1
 8006546:	42ae      	cmp	r6, r5
 8006548:	bf38      	it	cc
 800654a:	2200      	movcc	r2, #0
 800654c:	18a3      	adds	r3, r4, r2
 800654e:	50a7      	str	r7, [r4, r2]
 8006550:	b107      	cbz	r7, 8006554 <rshift+0x68>
 8006552:	3304      	adds	r3, #4
 8006554:	42a3      	cmp	r3, r4
 8006556:	eba3 0204 	sub.w	r2, r3, r4
 800655a:	bf08      	it	eq
 800655c:	2300      	moveq	r3, #0
 800655e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006562:	6102      	str	r2, [r0, #16]
 8006564:	bf08      	it	eq
 8006566:	6143      	streq	r3, [r0, #20]
 8006568:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800656c:	f8dc c000 	ldr.w	ip, [ip]
 8006570:	fa0c fc08 	lsl.w	ip, ip, r8
 8006574:	ea4c 0707 	orr.w	r7, ip, r7
 8006578:	f849 7b04 	str.w	r7, [r9], #4
 800657c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006580:	40cf      	lsrs	r7, r1
 8006582:	e7d9      	b.n	8006538 <rshift+0x4c>
 8006584:	f851 cb04 	ldr.w	ip, [r1], #4
 8006588:	f847 cf04 	str.w	ip, [r7, #4]!
 800658c:	e7c2      	b.n	8006514 <rshift+0x28>
 800658e:	4623      	mov	r3, r4
 8006590:	e7e0      	b.n	8006554 <rshift+0x68>

08006592 <__hexdig_fun>:
 8006592:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006596:	2b09      	cmp	r3, #9
 8006598:	d802      	bhi.n	80065a0 <__hexdig_fun+0xe>
 800659a:	3820      	subs	r0, #32
 800659c:	b2c0      	uxtb	r0, r0
 800659e:	4770      	bx	lr
 80065a0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80065a4:	2b05      	cmp	r3, #5
 80065a6:	d801      	bhi.n	80065ac <__hexdig_fun+0x1a>
 80065a8:	3847      	subs	r0, #71	; 0x47
 80065aa:	e7f7      	b.n	800659c <__hexdig_fun+0xa>
 80065ac:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80065b0:	2b05      	cmp	r3, #5
 80065b2:	d801      	bhi.n	80065b8 <__hexdig_fun+0x26>
 80065b4:	3827      	subs	r0, #39	; 0x27
 80065b6:	e7f1      	b.n	800659c <__hexdig_fun+0xa>
 80065b8:	2000      	movs	r0, #0
 80065ba:	4770      	bx	lr

080065bc <__gethex>:
 80065bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065c0:	b08b      	sub	sp, #44	; 0x2c
 80065c2:	9305      	str	r3, [sp, #20]
 80065c4:	4bb2      	ldr	r3, [pc, #712]	; (8006890 <__gethex+0x2d4>)
 80065c6:	9002      	str	r0, [sp, #8]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	468b      	mov	fp, r1
 80065cc:	4618      	mov	r0, r3
 80065ce:	4690      	mov	r8, r2
 80065d0:	9303      	str	r3, [sp, #12]
 80065d2:	f7f9 fdbd 	bl	8000150 <strlen>
 80065d6:	4682      	mov	sl, r0
 80065d8:	9b03      	ldr	r3, [sp, #12]
 80065da:	f8db 2000 	ldr.w	r2, [fp]
 80065de:	4403      	add	r3, r0
 80065e0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80065e4:	9306      	str	r3, [sp, #24]
 80065e6:	1c93      	adds	r3, r2, #2
 80065e8:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80065ec:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80065f0:	32fe      	adds	r2, #254	; 0xfe
 80065f2:	18d1      	adds	r1, r2, r3
 80065f4:	461f      	mov	r7, r3
 80065f6:	f813 0b01 	ldrb.w	r0, [r3], #1
 80065fa:	9101      	str	r1, [sp, #4]
 80065fc:	2830      	cmp	r0, #48	; 0x30
 80065fe:	d0f8      	beq.n	80065f2 <__gethex+0x36>
 8006600:	f7ff ffc7 	bl	8006592 <__hexdig_fun>
 8006604:	4604      	mov	r4, r0
 8006606:	2800      	cmp	r0, #0
 8006608:	d13a      	bne.n	8006680 <__gethex+0xc4>
 800660a:	4652      	mov	r2, sl
 800660c:	4638      	mov	r0, r7
 800660e:	9903      	ldr	r1, [sp, #12]
 8006610:	f001 fa26 	bl	8007a60 <strncmp>
 8006614:	4605      	mov	r5, r0
 8006616:	2800      	cmp	r0, #0
 8006618:	d166      	bne.n	80066e8 <__gethex+0x12c>
 800661a:	f817 000a 	ldrb.w	r0, [r7, sl]
 800661e:	eb07 060a 	add.w	r6, r7, sl
 8006622:	f7ff ffb6 	bl	8006592 <__hexdig_fun>
 8006626:	2800      	cmp	r0, #0
 8006628:	d060      	beq.n	80066ec <__gethex+0x130>
 800662a:	4633      	mov	r3, r6
 800662c:	7818      	ldrb	r0, [r3, #0]
 800662e:	461f      	mov	r7, r3
 8006630:	2830      	cmp	r0, #48	; 0x30
 8006632:	f103 0301 	add.w	r3, r3, #1
 8006636:	d0f9      	beq.n	800662c <__gethex+0x70>
 8006638:	f7ff ffab 	bl	8006592 <__hexdig_fun>
 800663c:	2301      	movs	r3, #1
 800663e:	fab0 f480 	clz	r4, r0
 8006642:	4635      	mov	r5, r6
 8006644:	0964      	lsrs	r4, r4, #5
 8006646:	9301      	str	r3, [sp, #4]
 8006648:	463a      	mov	r2, r7
 800664a:	4616      	mov	r6, r2
 800664c:	7830      	ldrb	r0, [r6, #0]
 800664e:	3201      	adds	r2, #1
 8006650:	f7ff ff9f 	bl	8006592 <__hexdig_fun>
 8006654:	2800      	cmp	r0, #0
 8006656:	d1f8      	bne.n	800664a <__gethex+0x8e>
 8006658:	4652      	mov	r2, sl
 800665a:	4630      	mov	r0, r6
 800665c:	9903      	ldr	r1, [sp, #12]
 800665e:	f001 f9ff 	bl	8007a60 <strncmp>
 8006662:	b980      	cbnz	r0, 8006686 <__gethex+0xca>
 8006664:	b94d      	cbnz	r5, 800667a <__gethex+0xbe>
 8006666:	eb06 050a 	add.w	r5, r6, sl
 800666a:	462a      	mov	r2, r5
 800666c:	4616      	mov	r6, r2
 800666e:	7830      	ldrb	r0, [r6, #0]
 8006670:	3201      	adds	r2, #1
 8006672:	f7ff ff8e 	bl	8006592 <__hexdig_fun>
 8006676:	2800      	cmp	r0, #0
 8006678:	d1f8      	bne.n	800666c <__gethex+0xb0>
 800667a:	1bad      	subs	r5, r5, r6
 800667c:	00ad      	lsls	r5, r5, #2
 800667e:	e004      	b.n	800668a <__gethex+0xce>
 8006680:	2400      	movs	r4, #0
 8006682:	4625      	mov	r5, r4
 8006684:	e7e0      	b.n	8006648 <__gethex+0x8c>
 8006686:	2d00      	cmp	r5, #0
 8006688:	d1f7      	bne.n	800667a <__gethex+0xbe>
 800668a:	7833      	ldrb	r3, [r6, #0]
 800668c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006690:	2b50      	cmp	r3, #80	; 0x50
 8006692:	d139      	bne.n	8006708 <__gethex+0x14c>
 8006694:	7873      	ldrb	r3, [r6, #1]
 8006696:	2b2b      	cmp	r3, #43	; 0x2b
 8006698:	d02a      	beq.n	80066f0 <__gethex+0x134>
 800669a:	2b2d      	cmp	r3, #45	; 0x2d
 800669c:	d02c      	beq.n	80066f8 <__gethex+0x13c>
 800669e:	f04f 0900 	mov.w	r9, #0
 80066a2:	1c71      	adds	r1, r6, #1
 80066a4:	7808      	ldrb	r0, [r1, #0]
 80066a6:	f7ff ff74 	bl	8006592 <__hexdig_fun>
 80066aa:	1e43      	subs	r3, r0, #1
 80066ac:	b2db      	uxtb	r3, r3
 80066ae:	2b18      	cmp	r3, #24
 80066b0:	d82a      	bhi.n	8006708 <__gethex+0x14c>
 80066b2:	f1a0 0210 	sub.w	r2, r0, #16
 80066b6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80066ba:	f7ff ff6a 	bl	8006592 <__hexdig_fun>
 80066be:	1e43      	subs	r3, r0, #1
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	2b18      	cmp	r3, #24
 80066c4:	d91b      	bls.n	80066fe <__gethex+0x142>
 80066c6:	f1b9 0f00 	cmp.w	r9, #0
 80066ca:	d000      	beq.n	80066ce <__gethex+0x112>
 80066cc:	4252      	negs	r2, r2
 80066ce:	4415      	add	r5, r2
 80066d0:	f8cb 1000 	str.w	r1, [fp]
 80066d4:	b1d4      	cbz	r4, 800670c <__gethex+0x150>
 80066d6:	9b01      	ldr	r3, [sp, #4]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	bf14      	ite	ne
 80066dc:	2700      	movne	r7, #0
 80066de:	2706      	moveq	r7, #6
 80066e0:	4638      	mov	r0, r7
 80066e2:	b00b      	add	sp, #44	; 0x2c
 80066e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066e8:	463e      	mov	r6, r7
 80066ea:	4625      	mov	r5, r4
 80066ec:	2401      	movs	r4, #1
 80066ee:	e7cc      	b.n	800668a <__gethex+0xce>
 80066f0:	f04f 0900 	mov.w	r9, #0
 80066f4:	1cb1      	adds	r1, r6, #2
 80066f6:	e7d5      	b.n	80066a4 <__gethex+0xe8>
 80066f8:	f04f 0901 	mov.w	r9, #1
 80066fc:	e7fa      	b.n	80066f4 <__gethex+0x138>
 80066fe:	230a      	movs	r3, #10
 8006700:	fb03 0202 	mla	r2, r3, r2, r0
 8006704:	3a10      	subs	r2, #16
 8006706:	e7d6      	b.n	80066b6 <__gethex+0xfa>
 8006708:	4631      	mov	r1, r6
 800670a:	e7e1      	b.n	80066d0 <__gethex+0x114>
 800670c:	4621      	mov	r1, r4
 800670e:	1bf3      	subs	r3, r6, r7
 8006710:	3b01      	subs	r3, #1
 8006712:	2b07      	cmp	r3, #7
 8006714:	dc0a      	bgt.n	800672c <__gethex+0x170>
 8006716:	9802      	ldr	r0, [sp, #8]
 8006718:	f000 fa88 	bl	8006c2c <_Balloc>
 800671c:	4604      	mov	r4, r0
 800671e:	b940      	cbnz	r0, 8006732 <__gethex+0x176>
 8006720:	4602      	mov	r2, r0
 8006722:	21de      	movs	r1, #222	; 0xde
 8006724:	4b5b      	ldr	r3, [pc, #364]	; (8006894 <__gethex+0x2d8>)
 8006726:	485c      	ldr	r0, [pc, #368]	; (8006898 <__gethex+0x2dc>)
 8006728:	f001 f9bc 	bl	8007aa4 <__assert_func>
 800672c:	3101      	adds	r1, #1
 800672e:	105b      	asrs	r3, r3, #1
 8006730:	e7ef      	b.n	8006712 <__gethex+0x156>
 8006732:	f04f 0b00 	mov.w	fp, #0
 8006736:	f100 0914 	add.w	r9, r0, #20
 800673a:	f1ca 0301 	rsb	r3, sl, #1
 800673e:	f8cd 9010 	str.w	r9, [sp, #16]
 8006742:	f8cd b004 	str.w	fp, [sp, #4]
 8006746:	9308      	str	r3, [sp, #32]
 8006748:	42b7      	cmp	r7, r6
 800674a:	d33f      	bcc.n	80067cc <__gethex+0x210>
 800674c:	9f04      	ldr	r7, [sp, #16]
 800674e:	9b01      	ldr	r3, [sp, #4]
 8006750:	f847 3b04 	str.w	r3, [r7], #4
 8006754:	eba7 0709 	sub.w	r7, r7, r9
 8006758:	10bf      	asrs	r7, r7, #2
 800675a:	6127      	str	r7, [r4, #16]
 800675c:	4618      	mov	r0, r3
 800675e:	f000 fb57 	bl	8006e10 <__hi0bits>
 8006762:	017f      	lsls	r7, r7, #5
 8006764:	f8d8 6000 	ldr.w	r6, [r8]
 8006768:	1a3f      	subs	r7, r7, r0
 800676a:	42b7      	cmp	r7, r6
 800676c:	dd62      	ble.n	8006834 <__gethex+0x278>
 800676e:	1bbf      	subs	r7, r7, r6
 8006770:	4639      	mov	r1, r7
 8006772:	4620      	mov	r0, r4
 8006774:	f000 fef1 	bl	800755a <__any_on>
 8006778:	4682      	mov	sl, r0
 800677a:	b1a8      	cbz	r0, 80067a8 <__gethex+0x1ec>
 800677c:	f04f 0a01 	mov.w	sl, #1
 8006780:	1e7b      	subs	r3, r7, #1
 8006782:	1159      	asrs	r1, r3, #5
 8006784:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006788:	f003 021f 	and.w	r2, r3, #31
 800678c:	fa0a f202 	lsl.w	r2, sl, r2
 8006790:	420a      	tst	r2, r1
 8006792:	d009      	beq.n	80067a8 <__gethex+0x1ec>
 8006794:	4553      	cmp	r3, sl
 8006796:	dd05      	ble.n	80067a4 <__gethex+0x1e8>
 8006798:	4620      	mov	r0, r4
 800679a:	1eb9      	subs	r1, r7, #2
 800679c:	f000 fedd 	bl	800755a <__any_on>
 80067a0:	2800      	cmp	r0, #0
 80067a2:	d144      	bne.n	800682e <__gethex+0x272>
 80067a4:	f04f 0a02 	mov.w	sl, #2
 80067a8:	4639      	mov	r1, r7
 80067aa:	4620      	mov	r0, r4
 80067ac:	f7ff fe9e 	bl	80064ec <rshift>
 80067b0:	443d      	add	r5, r7
 80067b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80067b6:	42ab      	cmp	r3, r5
 80067b8:	da4a      	bge.n	8006850 <__gethex+0x294>
 80067ba:	4621      	mov	r1, r4
 80067bc:	9802      	ldr	r0, [sp, #8]
 80067be:	f000 fa75 	bl	8006cac <_Bfree>
 80067c2:	2300      	movs	r3, #0
 80067c4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80067c6:	27a3      	movs	r7, #163	; 0xa3
 80067c8:	6013      	str	r3, [r2, #0]
 80067ca:	e789      	b.n	80066e0 <__gethex+0x124>
 80067cc:	1e73      	subs	r3, r6, #1
 80067ce:	9a06      	ldr	r2, [sp, #24]
 80067d0:	9307      	str	r3, [sp, #28]
 80067d2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d019      	beq.n	800680e <__gethex+0x252>
 80067da:	f1bb 0f20 	cmp.w	fp, #32
 80067de:	d107      	bne.n	80067f0 <__gethex+0x234>
 80067e0:	9b04      	ldr	r3, [sp, #16]
 80067e2:	9a01      	ldr	r2, [sp, #4]
 80067e4:	f843 2b04 	str.w	r2, [r3], #4
 80067e8:	9304      	str	r3, [sp, #16]
 80067ea:	2300      	movs	r3, #0
 80067ec:	469b      	mov	fp, r3
 80067ee:	9301      	str	r3, [sp, #4]
 80067f0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80067f4:	f7ff fecd 	bl	8006592 <__hexdig_fun>
 80067f8:	9b01      	ldr	r3, [sp, #4]
 80067fa:	f000 000f 	and.w	r0, r0, #15
 80067fe:	fa00 f00b 	lsl.w	r0, r0, fp
 8006802:	4303      	orrs	r3, r0
 8006804:	9301      	str	r3, [sp, #4]
 8006806:	f10b 0b04 	add.w	fp, fp, #4
 800680a:	9b07      	ldr	r3, [sp, #28]
 800680c:	e00d      	b.n	800682a <__gethex+0x26e>
 800680e:	9a08      	ldr	r2, [sp, #32]
 8006810:	1e73      	subs	r3, r6, #1
 8006812:	4413      	add	r3, r2
 8006814:	42bb      	cmp	r3, r7
 8006816:	d3e0      	bcc.n	80067da <__gethex+0x21e>
 8006818:	4618      	mov	r0, r3
 800681a:	4652      	mov	r2, sl
 800681c:	9903      	ldr	r1, [sp, #12]
 800681e:	9309      	str	r3, [sp, #36]	; 0x24
 8006820:	f001 f91e 	bl	8007a60 <strncmp>
 8006824:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006826:	2800      	cmp	r0, #0
 8006828:	d1d7      	bne.n	80067da <__gethex+0x21e>
 800682a:	461e      	mov	r6, r3
 800682c:	e78c      	b.n	8006748 <__gethex+0x18c>
 800682e:	f04f 0a03 	mov.w	sl, #3
 8006832:	e7b9      	b.n	80067a8 <__gethex+0x1ec>
 8006834:	da09      	bge.n	800684a <__gethex+0x28e>
 8006836:	1bf7      	subs	r7, r6, r7
 8006838:	4621      	mov	r1, r4
 800683a:	463a      	mov	r2, r7
 800683c:	9802      	ldr	r0, [sp, #8]
 800683e:	f000 fc4d 	bl	80070dc <__lshift>
 8006842:	4604      	mov	r4, r0
 8006844:	1bed      	subs	r5, r5, r7
 8006846:	f100 0914 	add.w	r9, r0, #20
 800684a:	f04f 0a00 	mov.w	sl, #0
 800684e:	e7b0      	b.n	80067b2 <__gethex+0x1f6>
 8006850:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006854:	42a8      	cmp	r0, r5
 8006856:	dd72      	ble.n	800693e <__gethex+0x382>
 8006858:	1b45      	subs	r5, r0, r5
 800685a:	42ae      	cmp	r6, r5
 800685c:	dc35      	bgt.n	80068ca <__gethex+0x30e>
 800685e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006862:	2b02      	cmp	r3, #2
 8006864:	d029      	beq.n	80068ba <__gethex+0x2fe>
 8006866:	2b03      	cmp	r3, #3
 8006868:	d02b      	beq.n	80068c2 <__gethex+0x306>
 800686a:	2b01      	cmp	r3, #1
 800686c:	d11c      	bne.n	80068a8 <__gethex+0x2ec>
 800686e:	42ae      	cmp	r6, r5
 8006870:	d11a      	bne.n	80068a8 <__gethex+0x2ec>
 8006872:	2e01      	cmp	r6, #1
 8006874:	d112      	bne.n	800689c <__gethex+0x2e0>
 8006876:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800687a:	9a05      	ldr	r2, [sp, #20]
 800687c:	2762      	movs	r7, #98	; 0x62
 800687e:	6013      	str	r3, [r2, #0]
 8006880:	2301      	movs	r3, #1
 8006882:	6123      	str	r3, [r4, #16]
 8006884:	f8c9 3000 	str.w	r3, [r9]
 8006888:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800688a:	601c      	str	r4, [r3, #0]
 800688c:	e728      	b.n	80066e0 <__gethex+0x124>
 800688e:	bf00      	nop
 8006890:	08008938 	.word	0x08008938
 8006894:	080088c0 	.word	0x080088c0
 8006898:	080088d1 	.word	0x080088d1
 800689c:	4620      	mov	r0, r4
 800689e:	1e71      	subs	r1, r6, #1
 80068a0:	f000 fe5b 	bl	800755a <__any_on>
 80068a4:	2800      	cmp	r0, #0
 80068a6:	d1e6      	bne.n	8006876 <__gethex+0x2ba>
 80068a8:	4621      	mov	r1, r4
 80068aa:	9802      	ldr	r0, [sp, #8]
 80068ac:	f000 f9fe 	bl	8006cac <_Bfree>
 80068b0:	2300      	movs	r3, #0
 80068b2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80068b4:	2750      	movs	r7, #80	; 0x50
 80068b6:	6013      	str	r3, [r2, #0]
 80068b8:	e712      	b.n	80066e0 <__gethex+0x124>
 80068ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d1f3      	bne.n	80068a8 <__gethex+0x2ec>
 80068c0:	e7d9      	b.n	8006876 <__gethex+0x2ba>
 80068c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d1d6      	bne.n	8006876 <__gethex+0x2ba>
 80068c8:	e7ee      	b.n	80068a8 <__gethex+0x2ec>
 80068ca:	1e6f      	subs	r7, r5, #1
 80068cc:	f1ba 0f00 	cmp.w	sl, #0
 80068d0:	d132      	bne.n	8006938 <__gethex+0x37c>
 80068d2:	b127      	cbz	r7, 80068de <__gethex+0x322>
 80068d4:	4639      	mov	r1, r7
 80068d6:	4620      	mov	r0, r4
 80068d8:	f000 fe3f 	bl	800755a <__any_on>
 80068dc:	4682      	mov	sl, r0
 80068de:	2101      	movs	r1, #1
 80068e0:	117b      	asrs	r3, r7, #5
 80068e2:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80068e6:	f007 071f 	and.w	r7, r7, #31
 80068ea:	fa01 f707 	lsl.w	r7, r1, r7
 80068ee:	421f      	tst	r7, r3
 80068f0:	f04f 0702 	mov.w	r7, #2
 80068f4:	4629      	mov	r1, r5
 80068f6:	4620      	mov	r0, r4
 80068f8:	bf18      	it	ne
 80068fa:	f04a 0a02 	orrne.w	sl, sl, #2
 80068fe:	1b76      	subs	r6, r6, r5
 8006900:	f7ff fdf4 	bl	80064ec <rshift>
 8006904:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006908:	f1ba 0f00 	cmp.w	sl, #0
 800690c:	d048      	beq.n	80069a0 <__gethex+0x3e4>
 800690e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006912:	2b02      	cmp	r3, #2
 8006914:	d015      	beq.n	8006942 <__gethex+0x386>
 8006916:	2b03      	cmp	r3, #3
 8006918:	d017      	beq.n	800694a <__gethex+0x38e>
 800691a:	2b01      	cmp	r3, #1
 800691c:	d109      	bne.n	8006932 <__gethex+0x376>
 800691e:	f01a 0f02 	tst.w	sl, #2
 8006922:	d006      	beq.n	8006932 <__gethex+0x376>
 8006924:	f8d9 0000 	ldr.w	r0, [r9]
 8006928:	ea4a 0a00 	orr.w	sl, sl, r0
 800692c:	f01a 0f01 	tst.w	sl, #1
 8006930:	d10e      	bne.n	8006950 <__gethex+0x394>
 8006932:	f047 0710 	orr.w	r7, r7, #16
 8006936:	e033      	b.n	80069a0 <__gethex+0x3e4>
 8006938:	f04f 0a01 	mov.w	sl, #1
 800693c:	e7cf      	b.n	80068de <__gethex+0x322>
 800693e:	2701      	movs	r7, #1
 8006940:	e7e2      	b.n	8006908 <__gethex+0x34c>
 8006942:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006944:	f1c3 0301 	rsb	r3, r3, #1
 8006948:	9315      	str	r3, [sp, #84]	; 0x54
 800694a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800694c:	2b00      	cmp	r3, #0
 800694e:	d0f0      	beq.n	8006932 <__gethex+0x376>
 8006950:	f04f 0c00 	mov.w	ip, #0
 8006954:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006958:	f104 0314 	add.w	r3, r4, #20
 800695c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8006960:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006964:	4618      	mov	r0, r3
 8006966:	f853 2b04 	ldr.w	r2, [r3], #4
 800696a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800696e:	d01c      	beq.n	80069aa <__gethex+0x3ee>
 8006970:	3201      	adds	r2, #1
 8006972:	6002      	str	r2, [r0, #0]
 8006974:	2f02      	cmp	r7, #2
 8006976:	f104 0314 	add.w	r3, r4, #20
 800697a:	d13d      	bne.n	80069f8 <__gethex+0x43c>
 800697c:	f8d8 2000 	ldr.w	r2, [r8]
 8006980:	3a01      	subs	r2, #1
 8006982:	42b2      	cmp	r2, r6
 8006984:	d10a      	bne.n	800699c <__gethex+0x3e0>
 8006986:	2201      	movs	r2, #1
 8006988:	1171      	asrs	r1, r6, #5
 800698a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800698e:	f006 061f 	and.w	r6, r6, #31
 8006992:	fa02 f606 	lsl.w	r6, r2, r6
 8006996:	421e      	tst	r6, r3
 8006998:	bf18      	it	ne
 800699a:	4617      	movne	r7, r2
 800699c:	f047 0720 	orr.w	r7, r7, #32
 80069a0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80069a2:	601c      	str	r4, [r3, #0]
 80069a4:	9b05      	ldr	r3, [sp, #20]
 80069a6:	601d      	str	r5, [r3, #0]
 80069a8:	e69a      	b.n	80066e0 <__gethex+0x124>
 80069aa:	4299      	cmp	r1, r3
 80069ac:	f843 cc04 	str.w	ip, [r3, #-4]
 80069b0:	d8d8      	bhi.n	8006964 <__gethex+0x3a8>
 80069b2:	68a3      	ldr	r3, [r4, #8]
 80069b4:	459b      	cmp	fp, r3
 80069b6:	db17      	blt.n	80069e8 <__gethex+0x42c>
 80069b8:	6861      	ldr	r1, [r4, #4]
 80069ba:	9802      	ldr	r0, [sp, #8]
 80069bc:	3101      	adds	r1, #1
 80069be:	f000 f935 	bl	8006c2c <_Balloc>
 80069c2:	4681      	mov	r9, r0
 80069c4:	b918      	cbnz	r0, 80069ce <__gethex+0x412>
 80069c6:	4602      	mov	r2, r0
 80069c8:	2184      	movs	r1, #132	; 0x84
 80069ca:	4b19      	ldr	r3, [pc, #100]	; (8006a30 <__gethex+0x474>)
 80069cc:	e6ab      	b.n	8006726 <__gethex+0x16a>
 80069ce:	6922      	ldr	r2, [r4, #16]
 80069d0:	f104 010c 	add.w	r1, r4, #12
 80069d4:	3202      	adds	r2, #2
 80069d6:	0092      	lsls	r2, r2, #2
 80069d8:	300c      	adds	r0, #12
 80069da:	f000 f919 	bl	8006c10 <memcpy>
 80069de:	4621      	mov	r1, r4
 80069e0:	9802      	ldr	r0, [sp, #8]
 80069e2:	f000 f963 	bl	8006cac <_Bfree>
 80069e6:	464c      	mov	r4, r9
 80069e8:	6923      	ldr	r3, [r4, #16]
 80069ea:	1c5a      	adds	r2, r3, #1
 80069ec:	6122      	str	r2, [r4, #16]
 80069ee:	2201      	movs	r2, #1
 80069f0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80069f4:	615a      	str	r2, [r3, #20]
 80069f6:	e7bd      	b.n	8006974 <__gethex+0x3b8>
 80069f8:	6922      	ldr	r2, [r4, #16]
 80069fa:	455a      	cmp	r2, fp
 80069fc:	dd0b      	ble.n	8006a16 <__gethex+0x45a>
 80069fe:	2101      	movs	r1, #1
 8006a00:	4620      	mov	r0, r4
 8006a02:	f7ff fd73 	bl	80064ec <rshift>
 8006a06:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006a0a:	3501      	adds	r5, #1
 8006a0c:	42ab      	cmp	r3, r5
 8006a0e:	f6ff aed4 	blt.w	80067ba <__gethex+0x1fe>
 8006a12:	2701      	movs	r7, #1
 8006a14:	e7c2      	b.n	800699c <__gethex+0x3e0>
 8006a16:	f016 061f 	ands.w	r6, r6, #31
 8006a1a:	d0fa      	beq.n	8006a12 <__gethex+0x456>
 8006a1c:	4453      	add	r3, sl
 8006a1e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8006a22:	f000 f9f5 	bl	8006e10 <__hi0bits>
 8006a26:	f1c6 0620 	rsb	r6, r6, #32
 8006a2a:	42b0      	cmp	r0, r6
 8006a2c:	dbe7      	blt.n	80069fe <__gethex+0x442>
 8006a2e:	e7f0      	b.n	8006a12 <__gethex+0x456>
 8006a30:	080088c0 	.word	0x080088c0

08006a34 <L_shift>:
 8006a34:	f1c2 0208 	rsb	r2, r2, #8
 8006a38:	0092      	lsls	r2, r2, #2
 8006a3a:	b570      	push	{r4, r5, r6, lr}
 8006a3c:	f1c2 0620 	rsb	r6, r2, #32
 8006a40:	6843      	ldr	r3, [r0, #4]
 8006a42:	6804      	ldr	r4, [r0, #0]
 8006a44:	fa03 f506 	lsl.w	r5, r3, r6
 8006a48:	432c      	orrs	r4, r5
 8006a4a:	40d3      	lsrs	r3, r2
 8006a4c:	6004      	str	r4, [r0, #0]
 8006a4e:	f840 3f04 	str.w	r3, [r0, #4]!
 8006a52:	4288      	cmp	r0, r1
 8006a54:	d3f4      	bcc.n	8006a40 <L_shift+0xc>
 8006a56:	bd70      	pop	{r4, r5, r6, pc}

08006a58 <__match>:
 8006a58:	b530      	push	{r4, r5, lr}
 8006a5a:	6803      	ldr	r3, [r0, #0]
 8006a5c:	3301      	adds	r3, #1
 8006a5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a62:	b914      	cbnz	r4, 8006a6a <__match+0x12>
 8006a64:	6003      	str	r3, [r0, #0]
 8006a66:	2001      	movs	r0, #1
 8006a68:	bd30      	pop	{r4, r5, pc}
 8006a6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a6e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8006a72:	2d19      	cmp	r5, #25
 8006a74:	bf98      	it	ls
 8006a76:	3220      	addls	r2, #32
 8006a78:	42a2      	cmp	r2, r4
 8006a7a:	d0f0      	beq.n	8006a5e <__match+0x6>
 8006a7c:	2000      	movs	r0, #0
 8006a7e:	e7f3      	b.n	8006a68 <__match+0x10>

08006a80 <__hexnan>:
 8006a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a84:	2500      	movs	r5, #0
 8006a86:	680b      	ldr	r3, [r1, #0]
 8006a88:	4682      	mov	sl, r0
 8006a8a:	115e      	asrs	r6, r3, #5
 8006a8c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006a90:	f013 031f 	ands.w	r3, r3, #31
 8006a94:	bf18      	it	ne
 8006a96:	3604      	addne	r6, #4
 8006a98:	1f37      	subs	r7, r6, #4
 8006a9a:	46b9      	mov	r9, r7
 8006a9c:	463c      	mov	r4, r7
 8006a9e:	46ab      	mov	fp, r5
 8006aa0:	b087      	sub	sp, #28
 8006aa2:	4690      	mov	r8, r2
 8006aa4:	6802      	ldr	r2, [r0, #0]
 8006aa6:	9301      	str	r3, [sp, #4]
 8006aa8:	f846 5c04 	str.w	r5, [r6, #-4]
 8006aac:	9502      	str	r5, [sp, #8]
 8006aae:	7851      	ldrb	r1, [r2, #1]
 8006ab0:	1c53      	adds	r3, r2, #1
 8006ab2:	9303      	str	r3, [sp, #12]
 8006ab4:	b341      	cbz	r1, 8006b08 <__hexnan+0x88>
 8006ab6:	4608      	mov	r0, r1
 8006ab8:	9205      	str	r2, [sp, #20]
 8006aba:	9104      	str	r1, [sp, #16]
 8006abc:	f7ff fd69 	bl	8006592 <__hexdig_fun>
 8006ac0:	2800      	cmp	r0, #0
 8006ac2:	d14f      	bne.n	8006b64 <__hexnan+0xe4>
 8006ac4:	9904      	ldr	r1, [sp, #16]
 8006ac6:	9a05      	ldr	r2, [sp, #20]
 8006ac8:	2920      	cmp	r1, #32
 8006aca:	d818      	bhi.n	8006afe <__hexnan+0x7e>
 8006acc:	9b02      	ldr	r3, [sp, #8]
 8006ace:	459b      	cmp	fp, r3
 8006ad0:	dd13      	ble.n	8006afa <__hexnan+0x7a>
 8006ad2:	454c      	cmp	r4, r9
 8006ad4:	d206      	bcs.n	8006ae4 <__hexnan+0x64>
 8006ad6:	2d07      	cmp	r5, #7
 8006ad8:	dc04      	bgt.n	8006ae4 <__hexnan+0x64>
 8006ada:	462a      	mov	r2, r5
 8006adc:	4649      	mov	r1, r9
 8006ade:	4620      	mov	r0, r4
 8006ae0:	f7ff ffa8 	bl	8006a34 <L_shift>
 8006ae4:	4544      	cmp	r4, r8
 8006ae6:	d950      	bls.n	8006b8a <__hexnan+0x10a>
 8006ae8:	2300      	movs	r3, #0
 8006aea:	f1a4 0904 	sub.w	r9, r4, #4
 8006aee:	f844 3c04 	str.w	r3, [r4, #-4]
 8006af2:	461d      	mov	r5, r3
 8006af4:	464c      	mov	r4, r9
 8006af6:	f8cd b008 	str.w	fp, [sp, #8]
 8006afa:	9a03      	ldr	r2, [sp, #12]
 8006afc:	e7d7      	b.n	8006aae <__hexnan+0x2e>
 8006afe:	2929      	cmp	r1, #41	; 0x29
 8006b00:	d156      	bne.n	8006bb0 <__hexnan+0x130>
 8006b02:	3202      	adds	r2, #2
 8006b04:	f8ca 2000 	str.w	r2, [sl]
 8006b08:	f1bb 0f00 	cmp.w	fp, #0
 8006b0c:	d050      	beq.n	8006bb0 <__hexnan+0x130>
 8006b0e:	454c      	cmp	r4, r9
 8006b10:	d206      	bcs.n	8006b20 <__hexnan+0xa0>
 8006b12:	2d07      	cmp	r5, #7
 8006b14:	dc04      	bgt.n	8006b20 <__hexnan+0xa0>
 8006b16:	462a      	mov	r2, r5
 8006b18:	4649      	mov	r1, r9
 8006b1a:	4620      	mov	r0, r4
 8006b1c:	f7ff ff8a 	bl	8006a34 <L_shift>
 8006b20:	4544      	cmp	r4, r8
 8006b22:	d934      	bls.n	8006b8e <__hexnan+0x10e>
 8006b24:	4623      	mov	r3, r4
 8006b26:	f1a8 0204 	sub.w	r2, r8, #4
 8006b2a:	f853 1b04 	ldr.w	r1, [r3], #4
 8006b2e:	429f      	cmp	r7, r3
 8006b30:	f842 1f04 	str.w	r1, [r2, #4]!
 8006b34:	d2f9      	bcs.n	8006b2a <__hexnan+0xaa>
 8006b36:	1b3b      	subs	r3, r7, r4
 8006b38:	f023 0303 	bic.w	r3, r3, #3
 8006b3c:	3304      	adds	r3, #4
 8006b3e:	3401      	adds	r4, #1
 8006b40:	3e03      	subs	r6, #3
 8006b42:	42b4      	cmp	r4, r6
 8006b44:	bf88      	it	hi
 8006b46:	2304      	movhi	r3, #4
 8006b48:	2200      	movs	r2, #0
 8006b4a:	4443      	add	r3, r8
 8006b4c:	f843 2b04 	str.w	r2, [r3], #4
 8006b50:	429f      	cmp	r7, r3
 8006b52:	d2fb      	bcs.n	8006b4c <__hexnan+0xcc>
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	b91b      	cbnz	r3, 8006b60 <__hexnan+0xe0>
 8006b58:	4547      	cmp	r7, r8
 8006b5a:	d127      	bne.n	8006bac <__hexnan+0x12c>
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	603b      	str	r3, [r7, #0]
 8006b60:	2005      	movs	r0, #5
 8006b62:	e026      	b.n	8006bb2 <__hexnan+0x132>
 8006b64:	3501      	adds	r5, #1
 8006b66:	2d08      	cmp	r5, #8
 8006b68:	f10b 0b01 	add.w	fp, fp, #1
 8006b6c:	dd06      	ble.n	8006b7c <__hexnan+0xfc>
 8006b6e:	4544      	cmp	r4, r8
 8006b70:	d9c3      	bls.n	8006afa <__hexnan+0x7a>
 8006b72:	2300      	movs	r3, #0
 8006b74:	2501      	movs	r5, #1
 8006b76:	f844 3c04 	str.w	r3, [r4, #-4]
 8006b7a:	3c04      	subs	r4, #4
 8006b7c:	6822      	ldr	r2, [r4, #0]
 8006b7e:	f000 000f 	and.w	r0, r0, #15
 8006b82:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8006b86:	6022      	str	r2, [r4, #0]
 8006b88:	e7b7      	b.n	8006afa <__hexnan+0x7a>
 8006b8a:	2508      	movs	r5, #8
 8006b8c:	e7b5      	b.n	8006afa <__hexnan+0x7a>
 8006b8e:	9b01      	ldr	r3, [sp, #4]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d0df      	beq.n	8006b54 <__hexnan+0xd4>
 8006b94:	f04f 32ff 	mov.w	r2, #4294967295
 8006b98:	f1c3 0320 	rsb	r3, r3, #32
 8006b9c:	fa22 f303 	lsr.w	r3, r2, r3
 8006ba0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006ba4:	401a      	ands	r2, r3
 8006ba6:	f846 2c04 	str.w	r2, [r6, #-4]
 8006baa:	e7d3      	b.n	8006b54 <__hexnan+0xd4>
 8006bac:	3f04      	subs	r7, #4
 8006bae:	e7d1      	b.n	8006b54 <__hexnan+0xd4>
 8006bb0:	2004      	movs	r0, #4
 8006bb2:	b007      	add	sp, #28
 8006bb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006bb8 <_localeconv_r>:
 8006bb8:	4800      	ldr	r0, [pc, #0]	; (8006bbc <_localeconv_r+0x4>)
 8006bba:	4770      	bx	lr
 8006bbc:	20000164 	.word	0x20000164

08006bc0 <malloc>:
 8006bc0:	4b02      	ldr	r3, [pc, #8]	; (8006bcc <malloc+0xc>)
 8006bc2:	4601      	mov	r1, r0
 8006bc4:	6818      	ldr	r0, [r3, #0]
 8006bc6:	f000 bd65 	b.w	8007694 <_malloc_r>
 8006bca:	bf00      	nop
 8006bcc:	2000000c 	.word	0x2000000c

08006bd0 <__ascii_mbtowc>:
 8006bd0:	b082      	sub	sp, #8
 8006bd2:	b901      	cbnz	r1, 8006bd6 <__ascii_mbtowc+0x6>
 8006bd4:	a901      	add	r1, sp, #4
 8006bd6:	b142      	cbz	r2, 8006bea <__ascii_mbtowc+0x1a>
 8006bd8:	b14b      	cbz	r3, 8006bee <__ascii_mbtowc+0x1e>
 8006bda:	7813      	ldrb	r3, [r2, #0]
 8006bdc:	600b      	str	r3, [r1, #0]
 8006bde:	7812      	ldrb	r2, [r2, #0]
 8006be0:	1e10      	subs	r0, r2, #0
 8006be2:	bf18      	it	ne
 8006be4:	2001      	movne	r0, #1
 8006be6:	b002      	add	sp, #8
 8006be8:	4770      	bx	lr
 8006bea:	4610      	mov	r0, r2
 8006bec:	e7fb      	b.n	8006be6 <__ascii_mbtowc+0x16>
 8006bee:	f06f 0001 	mvn.w	r0, #1
 8006bf2:	e7f8      	b.n	8006be6 <__ascii_mbtowc+0x16>

08006bf4 <memchr>:
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	b510      	push	{r4, lr}
 8006bf8:	b2c9      	uxtb	r1, r1
 8006bfa:	4402      	add	r2, r0
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	4618      	mov	r0, r3
 8006c00:	d101      	bne.n	8006c06 <memchr+0x12>
 8006c02:	2000      	movs	r0, #0
 8006c04:	e003      	b.n	8006c0e <memchr+0x1a>
 8006c06:	7804      	ldrb	r4, [r0, #0]
 8006c08:	3301      	adds	r3, #1
 8006c0a:	428c      	cmp	r4, r1
 8006c0c:	d1f6      	bne.n	8006bfc <memchr+0x8>
 8006c0e:	bd10      	pop	{r4, pc}

08006c10 <memcpy>:
 8006c10:	440a      	add	r2, r1
 8006c12:	4291      	cmp	r1, r2
 8006c14:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c18:	d100      	bne.n	8006c1c <memcpy+0xc>
 8006c1a:	4770      	bx	lr
 8006c1c:	b510      	push	{r4, lr}
 8006c1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c22:	4291      	cmp	r1, r2
 8006c24:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c28:	d1f9      	bne.n	8006c1e <memcpy+0xe>
 8006c2a:	bd10      	pop	{r4, pc}

08006c2c <_Balloc>:
 8006c2c:	b570      	push	{r4, r5, r6, lr}
 8006c2e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006c30:	4604      	mov	r4, r0
 8006c32:	460d      	mov	r5, r1
 8006c34:	b976      	cbnz	r6, 8006c54 <_Balloc+0x28>
 8006c36:	2010      	movs	r0, #16
 8006c38:	f7ff ffc2 	bl	8006bc0 <malloc>
 8006c3c:	4602      	mov	r2, r0
 8006c3e:	6260      	str	r0, [r4, #36]	; 0x24
 8006c40:	b920      	cbnz	r0, 8006c4c <_Balloc+0x20>
 8006c42:	2166      	movs	r1, #102	; 0x66
 8006c44:	4b17      	ldr	r3, [pc, #92]	; (8006ca4 <_Balloc+0x78>)
 8006c46:	4818      	ldr	r0, [pc, #96]	; (8006ca8 <_Balloc+0x7c>)
 8006c48:	f000 ff2c 	bl	8007aa4 <__assert_func>
 8006c4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006c50:	6006      	str	r6, [r0, #0]
 8006c52:	60c6      	str	r6, [r0, #12]
 8006c54:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006c56:	68f3      	ldr	r3, [r6, #12]
 8006c58:	b183      	cbz	r3, 8006c7c <_Balloc+0x50>
 8006c5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c5c:	68db      	ldr	r3, [r3, #12]
 8006c5e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006c62:	b9b8      	cbnz	r0, 8006c94 <_Balloc+0x68>
 8006c64:	2101      	movs	r1, #1
 8006c66:	fa01 f605 	lsl.w	r6, r1, r5
 8006c6a:	1d72      	adds	r2, r6, #5
 8006c6c:	4620      	mov	r0, r4
 8006c6e:	0092      	lsls	r2, r2, #2
 8006c70:	f000 fc94 	bl	800759c <_calloc_r>
 8006c74:	b160      	cbz	r0, 8006c90 <_Balloc+0x64>
 8006c76:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006c7a:	e00e      	b.n	8006c9a <_Balloc+0x6e>
 8006c7c:	2221      	movs	r2, #33	; 0x21
 8006c7e:	2104      	movs	r1, #4
 8006c80:	4620      	mov	r0, r4
 8006c82:	f000 fc8b 	bl	800759c <_calloc_r>
 8006c86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c88:	60f0      	str	r0, [r6, #12]
 8006c8a:	68db      	ldr	r3, [r3, #12]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d1e4      	bne.n	8006c5a <_Balloc+0x2e>
 8006c90:	2000      	movs	r0, #0
 8006c92:	bd70      	pop	{r4, r5, r6, pc}
 8006c94:	6802      	ldr	r2, [r0, #0]
 8006c96:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006ca0:	e7f7      	b.n	8006c92 <_Balloc+0x66>
 8006ca2:	bf00      	nop
 8006ca4:	0800884e 	.word	0x0800884e
 8006ca8:	0800894c 	.word	0x0800894c

08006cac <_Bfree>:
 8006cac:	b570      	push	{r4, r5, r6, lr}
 8006cae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006cb0:	4605      	mov	r5, r0
 8006cb2:	460c      	mov	r4, r1
 8006cb4:	b976      	cbnz	r6, 8006cd4 <_Bfree+0x28>
 8006cb6:	2010      	movs	r0, #16
 8006cb8:	f7ff ff82 	bl	8006bc0 <malloc>
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	6268      	str	r0, [r5, #36]	; 0x24
 8006cc0:	b920      	cbnz	r0, 8006ccc <_Bfree+0x20>
 8006cc2:	218a      	movs	r1, #138	; 0x8a
 8006cc4:	4b08      	ldr	r3, [pc, #32]	; (8006ce8 <_Bfree+0x3c>)
 8006cc6:	4809      	ldr	r0, [pc, #36]	; (8006cec <_Bfree+0x40>)
 8006cc8:	f000 feec 	bl	8007aa4 <__assert_func>
 8006ccc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006cd0:	6006      	str	r6, [r0, #0]
 8006cd2:	60c6      	str	r6, [r0, #12]
 8006cd4:	b13c      	cbz	r4, 8006ce6 <_Bfree+0x3a>
 8006cd6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006cd8:	6862      	ldr	r2, [r4, #4]
 8006cda:	68db      	ldr	r3, [r3, #12]
 8006cdc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006ce0:	6021      	str	r1, [r4, #0]
 8006ce2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006ce6:	bd70      	pop	{r4, r5, r6, pc}
 8006ce8:	0800884e 	.word	0x0800884e
 8006cec:	0800894c 	.word	0x0800894c

08006cf0 <__multadd>:
 8006cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cf4:	4607      	mov	r7, r0
 8006cf6:	460c      	mov	r4, r1
 8006cf8:	461e      	mov	r6, r3
 8006cfa:	2000      	movs	r0, #0
 8006cfc:	690d      	ldr	r5, [r1, #16]
 8006cfe:	f101 0c14 	add.w	ip, r1, #20
 8006d02:	f8dc 3000 	ldr.w	r3, [ip]
 8006d06:	3001      	adds	r0, #1
 8006d08:	b299      	uxth	r1, r3
 8006d0a:	fb02 6101 	mla	r1, r2, r1, r6
 8006d0e:	0c1e      	lsrs	r6, r3, #16
 8006d10:	0c0b      	lsrs	r3, r1, #16
 8006d12:	fb02 3306 	mla	r3, r2, r6, r3
 8006d16:	b289      	uxth	r1, r1
 8006d18:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006d1c:	4285      	cmp	r5, r0
 8006d1e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006d22:	f84c 1b04 	str.w	r1, [ip], #4
 8006d26:	dcec      	bgt.n	8006d02 <__multadd+0x12>
 8006d28:	b30e      	cbz	r6, 8006d6e <__multadd+0x7e>
 8006d2a:	68a3      	ldr	r3, [r4, #8]
 8006d2c:	42ab      	cmp	r3, r5
 8006d2e:	dc19      	bgt.n	8006d64 <__multadd+0x74>
 8006d30:	6861      	ldr	r1, [r4, #4]
 8006d32:	4638      	mov	r0, r7
 8006d34:	3101      	adds	r1, #1
 8006d36:	f7ff ff79 	bl	8006c2c <_Balloc>
 8006d3a:	4680      	mov	r8, r0
 8006d3c:	b928      	cbnz	r0, 8006d4a <__multadd+0x5a>
 8006d3e:	4602      	mov	r2, r0
 8006d40:	21b5      	movs	r1, #181	; 0xb5
 8006d42:	4b0c      	ldr	r3, [pc, #48]	; (8006d74 <__multadd+0x84>)
 8006d44:	480c      	ldr	r0, [pc, #48]	; (8006d78 <__multadd+0x88>)
 8006d46:	f000 fead 	bl	8007aa4 <__assert_func>
 8006d4a:	6922      	ldr	r2, [r4, #16]
 8006d4c:	f104 010c 	add.w	r1, r4, #12
 8006d50:	3202      	adds	r2, #2
 8006d52:	0092      	lsls	r2, r2, #2
 8006d54:	300c      	adds	r0, #12
 8006d56:	f7ff ff5b 	bl	8006c10 <memcpy>
 8006d5a:	4621      	mov	r1, r4
 8006d5c:	4638      	mov	r0, r7
 8006d5e:	f7ff ffa5 	bl	8006cac <_Bfree>
 8006d62:	4644      	mov	r4, r8
 8006d64:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006d68:	3501      	adds	r5, #1
 8006d6a:	615e      	str	r6, [r3, #20]
 8006d6c:	6125      	str	r5, [r4, #16]
 8006d6e:	4620      	mov	r0, r4
 8006d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d74:	080088c0 	.word	0x080088c0
 8006d78:	0800894c 	.word	0x0800894c

08006d7c <__s2b>:
 8006d7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d80:	4615      	mov	r5, r2
 8006d82:	2209      	movs	r2, #9
 8006d84:	461f      	mov	r7, r3
 8006d86:	3308      	adds	r3, #8
 8006d88:	460c      	mov	r4, r1
 8006d8a:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d8e:	4606      	mov	r6, r0
 8006d90:	2201      	movs	r2, #1
 8006d92:	2100      	movs	r1, #0
 8006d94:	429a      	cmp	r2, r3
 8006d96:	db09      	blt.n	8006dac <__s2b+0x30>
 8006d98:	4630      	mov	r0, r6
 8006d9a:	f7ff ff47 	bl	8006c2c <_Balloc>
 8006d9e:	b940      	cbnz	r0, 8006db2 <__s2b+0x36>
 8006da0:	4602      	mov	r2, r0
 8006da2:	21ce      	movs	r1, #206	; 0xce
 8006da4:	4b18      	ldr	r3, [pc, #96]	; (8006e08 <__s2b+0x8c>)
 8006da6:	4819      	ldr	r0, [pc, #100]	; (8006e0c <__s2b+0x90>)
 8006da8:	f000 fe7c 	bl	8007aa4 <__assert_func>
 8006dac:	0052      	lsls	r2, r2, #1
 8006dae:	3101      	adds	r1, #1
 8006db0:	e7f0      	b.n	8006d94 <__s2b+0x18>
 8006db2:	9b08      	ldr	r3, [sp, #32]
 8006db4:	2d09      	cmp	r5, #9
 8006db6:	6143      	str	r3, [r0, #20]
 8006db8:	f04f 0301 	mov.w	r3, #1
 8006dbc:	6103      	str	r3, [r0, #16]
 8006dbe:	dd16      	ble.n	8006dee <__s2b+0x72>
 8006dc0:	f104 0909 	add.w	r9, r4, #9
 8006dc4:	46c8      	mov	r8, r9
 8006dc6:	442c      	add	r4, r5
 8006dc8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006dcc:	4601      	mov	r1, r0
 8006dce:	220a      	movs	r2, #10
 8006dd0:	4630      	mov	r0, r6
 8006dd2:	3b30      	subs	r3, #48	; 0x30
 8006dd4:	f7ff ff8c 	bl	8006cf0 <__multadd>
 8006dd8:	45a0      	cmp	r8, r4
 8006dda:	d1f5      	bne.n	8006dc8 <__s2b+0x4c>
 8006ddc:	f1a5 0408 	sub.w	r4, r5, #8
 8006de0:	444c      	add	r4, r9
 8006de2:	1b2d      	subs	r5, r5, r4
 8006de4:	1963      	adds	r3, r4, r5
 8006de6:	42bb      	cmp	r3, r7
 8006de8:	db04      	blt.n	8006df4 <__s2b+0x78>
 8006dea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006dee:	2509      	movs	r5, #9
 8006df0:	340a      	adds	r4, #10
 8006df2:	e7f6      	b.n	8006de2 <__s2b+0x66>
 8006df4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006df8:	4601      	mov	r1, r0
 8006dfa:	220a      	movs	r2, #10
 8006dfc:	4630      	mov	r0, r6
 8006dfe:	3b30      	subs	r3, #48	; 0x30
 8006e00:	f7ff ff76 	bl	8006cf0 <__multadd>
 8006e04:	e7ee      	b.n	8006de4 <__s2b+0x68>
 8006e06:	bf00      	nop
 8006e08:	080088c0 	.word	0x080088c0
 8006e0c:	0800894c 	.word	0x0800894c

08006e10 <__hi0bits>:
 8006e10:	0c02      	lsrs	r2, r0, #16
 8006e12:	0412      	lsls	r2, r2, #16
 8006e14:	4603      	mov	r3, r0
 8006e16:	b9ca      	cbnz	r2, 8006e4c <__hi0bits+0x3c>
 8006e18:	0403      	lsls	r3, r0, #16
 8006e1a:	2010      	movs	r0, #16
 8006e1c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006e20:	bf04      	itt	eq
 8006e22:	021b      	lsleq	r3, r3, #8
 8006e24:	3008      	addeq	r0, #8
 8006e26:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006e2a:	bf04      	itt	eq
 8006e2c:	011b      	lsleq	r3, r3, #4
 8006e2e:	3004      	addeq	r0, #4
 8006e30:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006e34:	bf04      	itt	eq
 8006e36:	009b      	lsleq	r3, r3, #2
 8006e38:	3002      	addeq	r0, #2
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	db05      	blt.n	8006e4a <__hi0bits+0x3a>
 8006e3e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006e42:	f100 0001 	add.w	r0, r0, #1
 8006e46:	bf08      	it	eq
 8006e48:	2020      	moveq	r0, #32
 8006e4a:	4770      	bx	lr
 8006e4c:	2000      	movs	r0, #0
 8006e4e:	e7e5      	b.n	8006e1c <__hi0bits+0xc>

08006e50 <__lo0bits>:
 8006e50:	6803      	ldr	r3, [r0, #0]
 8006e52:	4602      	mov	r2, r0
 8006e54:	f013 0007 	ands.w	r0, r3, #7
 8006e58:	d00b      	beq.n	8006e72 <__lo0bits+0x22>
 8006e5a:	07d9      	lsls	r1, r3, #31
 8006e5c:	d421      	bmi.n	8006ea2 <__lo0bits+0x52>
 8006e5e:	0798      	lsls	r0, r3, #30
 8006e60:	bf49      	itett	mi
 8006e62:	085b      	lsrmi	r3, r3, #1
 8006e64:	089b      	lsrpl	r3, r3, #2
 8006e66:	2001      	movmi	r0, #1
 8006e68:	6013      	strmi	r3, [r2, #0]
 8006e6a:	bf5c      	itt	pl
 8006e6c:	2002      	movpl	r0, #2
 8006e6e:	6013      	strpl	r3, [r2, #0]
 8006e70:	4770      	bx	lr
 8006e72:	b299      	uxth	r1, r3
 8006e74:	b909      	cbnz	r1, 8006e7a <__lo0bits+0x2a>
 8006e76:	2010      	movs	r0, #16
 8006e78:	0c1b      	lsrs	r3, r3, #16
 8006e7a:	b2d9      	uxtb	r1, r3
 8006e7c:	b909      	cbnz	r1, 8006e82 <__lo0bits+0x32>
 8006e7e:	3008      	adds	r0, #8
 8006e80:	0a1b      	lsrs	r3, r3, #8
 8006e82:	0719      	lsls	r1, r3, #28
 8006e84:	bf04      	itt	eq
 8006e86:	091b      	lsreq	r3, r3, #4
 8006e88:	3004      	addeq	r0, #4
 8006e8a:	0799      	lsls	r1, r3, #30
 8006e8c:	bf04      	itt	eq
 8006e8e:	089b      	lsreq	r3, r3, #2
 8006e90:	3002      	addeq	r0, #2
 8006e92:	07d9      	lsls	r1, r3, #31
 8006e94:	d403      	bmi.n	8006e9e <__lo0bits+0x4e>
 8006e96:	085b      	lsrs	r3, r3, #1
 8006e98:	f100 0001 	add.w	r0, r0, #1
 8006e9c:	d003      	beq.n	8006ea6 <__lo0bits+0x56>
 8006e9e:	6013      	str	r3, [r2, #0]
 8006ea0:	4770      	bx	lr
 8006ea2:	2000      	movs	r0, #0
 8006ea4:	4770      	bx	lr
 8006ea6:	2020      	movs	r0, #32
 8006ea8:	4770      	bx	lr
	...

08006eac <__i2b>:
 8006eac:	b510      	push	{r4, lr}
 8006eae:	460c      	mov	r4, r1
 8006eb0:	2101      	movs	r1, #1
 8006eb2:	f7ff febb 	bl	8006c2c <_Balloc>
 8006eb6:	4602      	mov	r2, r0
 8006eb8:	b928      	cbnz	r0, 8006ec6 <__i2b+0x1a>
 8006eba:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006ebe:	4b04      	ldr	r3, [pc, #16]	; (8006ed0 <__i2b+0x24>)
 8006ec0:	4804      	ldr	r0, [pc, #16]	; (8006ed4 <__i2b+0x28>)
 8006ec2:	f000 fdef 	bl	8007aa4 <__assert_func>
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	6144      	str	r4, [r0, #20]
 8006eca:	6103      	str	r3, [r0, #16]
 8006ecc:	bd10      	pop	{r4, pc}
 8006ece:	bf00      	nop
 8006ed0:	080088c0 	.word	0x080088c0
 8006ed4:	0800894c 	.word	0x0800894c

08006ed8 <__multiply>:
 8006ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006edc:	4691      	mov	r9, r2
 8006ede:	690a      	ldr	r2, [r1, #16]
 8006ee0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006ee4:	460c      	mov	r4, r1
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	bfbe      	ittt	lt
 8006eea:	460b      	movlt	r3, r1
 8006eec:	464c      	movlt	r4, r9
 8006eee:	4699      	movlt	r9, r3
 8006ef0:	6927      	ldr	r7, [r4, #16]
 8006ef2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006ef6:	68a3      	ldr	r3, [r4, #8]
 8006ef8:	6861      	ldr	r1, [r4, #4]
 8006efa:	eb07 060a 	add.w	r6, r7, sl
 8006efe:	42b3      	cmp	r3, r6
 8006f00:	b085      	sub	sp, #20
 8006f02:	bfb8      	it	lt
 8006f04:	3101      	addlt	r1, #1
 8006f06:	f7ff fe91 	bl	8006c2c <_Balloc>
 8006f0a:	b930      	cbnz	r0, 8006f1a <__multiply+0x42>
 8006f0c:	4602      	mov	r2, r0
 8006f0e:	f240 115d 	movw	r1, #349	; 0x15d
 8006f12:	4b43      	ldr	r3, [pc, #268]	; (8007020 <__multiply+0x148>)
 8006f14:	4843      	ldr	r0, [pc, #268]	; (8007024 <__multiply+0x14c>)
 8006f16:	f000 fdc5 	bl	8007aa4 <__assert_func>
 8006f1a:	f100 0514 	add.w	r5, r0, #20
 8006f1e:	462b      	mov	r3, r5
 8006f20:	2200      	movs	r2, #0
 8006f22:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006f26:	4543      	cmp	r3, r8
 8006f28:	d321      	bcc.n	8006f6e <__multiply+0x96>
 8006f2a:	f104 0314 	add.w	r3, r4, #20
 8006f2e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006f32:	f109 0314 	add.w	r3, r9, #20
 8006f36:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006f3a:	9202      	str	r2, [sp, #8]
 8006f3c:	1b3a      	subs	r2, r7, r4
 8006f3e:	3a15      	subs	r2, #21
 8006f40:	f022 0203 	bic.w	r2, r2, #3
 8006f44:	3204      	adds	r2, #4
 8006f46:	f104 0115 	add.w	r1, r4, #21
 8006f4a:	428f      	cmp	r7, r1
 8006f4c:	bf38      	it	cc
 8006f4e:	2204      	movcc	r2, #4
 8006f50:	9201      	str	r2, [sp, #4]
 8006f52:	9a02      	ldr	r2, [sp, #8]
 8006f54:	9303      	str	r3, [sp, #12]
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d80c      	bhi.n	8006f74 <__multiply+0x9c>
 8006f5a:	2e00      	cmp	r6, #0
 8006f5c:	dd03      	ble.n	8006f66 <__multiply+0x8e>
 8006f5e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d059      	beq.n	800701a <__multiply+0x142>
 8006f66:	6106      	str	r6, [r0, #16]
 8006f68:	b005      	add	sp, #20
 8006f6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f6e:	f843 2b04 	str.w	r2, [r3], #4
 8006f72:	e7d8      	b.n	8006f26 <__multiply+0x4e>
 8006f74:	f8b3 a000 	ldrh.w	sl, [r3]
 8006f78:	f1ba 0f00 	cmp.w	sl, #0
 8006f7c:	d023      	beq.n	8006fc6 <__multiply+0xee>
 8006f7e:	46a9      	mov	r9, r5
 8006f80:	f04f 0c00 	mov.w	ip, #0
 8006f84:	f104 0e14 	add.w	lr, r4, #20
 8006f88:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006f8c:	f8d9 1000 	ldr.w	r1, [r9]
 8006f90:	fa1f fb82 	uxth.w	fp, r2
 8006f94:	b289      	uxth	r1, r1
 8006f96:	fb0a 110b 	mla	r1, sl, fp, r1
 8006f9a:	4461      	add	r1, ip
 8006f9c:	f8d9 c000 	ldr.w	ip, [r9]
 8006fa0:	0c12      	lsrs	r2, r2, #16
 8006fa2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006fa6:	fb0a c202 	mla	r2, sl, r2, ip
 8006faa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006fae:	b289      	uxth	r1, r1
 8006fb0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006fb4:	4577      	cmp	r7, lr
 8006fb6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006fba:	f849 1b04 	str.w	r1, [r9], #4
 8006fbe:	d8e3      	bhi.n	8006f88 <__multiply+0xb0>
 8006fc0:	9a01      	ldr	r2, [sp, #4]
 8006fc2:	f845 c002 	str.w	ip, [r5, r2]
 8006fc6:	9a03      	ldr	r2, [sp, #12]
 8006fc8:	3304      	adds	r3, #4
 8006fca:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006fce:	f1b9 0f00 	cmp.w	r9, #0
 8006fd2:	d020      	beq.n	8007016 <__multiply+0x13e>
 8006fd4:	46ae      	mov	lr, r5
 8006fd6:	f04f 0a00 	mov.w	sl, #0
 8006fda:	6829      	ldr	r1, [r5, #0]
 8006fdc:	f104 0c14 	add.w	ip, r4, #20
 8006fe0:	f8bc b000 	ldrh.w	fp, [ip]
 8006fe4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006fe8:	b289      	uxth	r1, r1
 8006fea:	fb09 220b 	mla	r2, r9, fp, r2
 8006fee:	4492      	add	sl, r2
 8006ff0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006ff4:	f84e 1b04 	str.w	r1, [lr], #4
 8006ff8:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006ffc:	f8be 1000 	ldrh.w	r1, [lr]
 8007000:	0c12      	lsrs	r2, r2, #16
 8007002:	fb09 1102 	mla	r1, r9, r2, r1
 8007006:	4567      	cmp	r7, ip
 8007008:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800700c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007010:	d8e6      	bhi.n	8006fe0 <__multiply+0x108>
 8007012:	9a01      	ldr	r2, [sp, #4]
 8007014:	50a9      	str	r1, [r5, r2]
 8007016:	3504      	adds	r5, #4
 8007018:	e79b      	b.n	8006f52 <__multiply+0x7a>
 800701a:	3e01      	subs	r6, #1
 800701c:	e79d      	b.n	8006f5a <__multiply+0x82>
 800701e:	bf00      	nop
 8007020:	080088c0 	.word	0x080088c0
 8007024:	0800894c 	.word	0x0800894c

08007028 <__pow5mult>:
 8007028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800702c:	4615      	mov	r5, r2
 800702e:	f012 0203 	ands.w	r2, r2, #3
 8007032:	4606      	mov	r6, r0
 8007034:	460f      	mov	r7, r1
 8007036:	d007      	beq.n	8007048 <__pow5mult+0x20>
 8007038:	4c25      	ldr	r4, [pc, #148]	; (80070d0 <__pow5mult+0xa8>)
 800703a:	3a01      	subs	r2, #1
 800703c:	2300      	movs	r3, #0
 800703e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007042:	f7ff fe55 	bl	8006cf0 <__multadd>
 8007046:	4607      	mov	r7, r0
 8007048:	10ad      	asrs	r5, r5, #2
 800704a:	d03d      	beq.n	80070c8 <__pow5mult+0xa0>
 800704c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800704e:	b97c      	cbnz	r4, 8007070 <__pow5mult+0x48>
 8007050:	2010      	movs	r0, #16
 8007052:	f7ff fdb5 	bl	8006bc0 <malloc>
 8007056:	4602      	mov	r2, r0
 8007058:	6270      	str	r0, [r6, #36]	; 0x24
 800705a:	b928      	cbnz	r0, 8007068 <__pow5mult+0x40>
 800705c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007060:	4b1c      	ldr	r3, [pc, #112]	; (80070d4 <__pow5mult+0xac>)
 8007062:	481d      	ldr	r0, [pc, #116]	; (80070d8 <__pow5mult+0xb0>)
 8007064:	f000 fd1e 	bl	8007aa4 <__assert_func>
 8007068:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800706c:	6004      	str	r4, [r0, #0]
 800706e:	60c4      	str	r4, [r0, #12]
 8007070:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007074:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007078:	b94c      	cbnz	r4, 800708e <__pow5mult+0x66>
 800707a:	f240 2171 	movw	r1, #625	; 0x271
 800707e:	4630      	mov	r0, r6
 8007080:	f7ff ff14 	bl	8006eac <__i2b>
 8007084:	2300      	movs	r3, #0
 8007086:	4604      	mov	r4, r0
 8007088:	f8c8 0008 	str.w	r0, [r8, #8]
 800708c:	6003      	str	r3, [r0, #0]
 800708e:	f04f 0900 	mov.w	r9, #0
 8007092:	07eb      	lsls	r3, r5, #31
 8007094:	d50a      	bpl.n	80070ac <__pow5mult+0x84>
 8007096:	4639      	mov	r1, r7
 8007098:	4622      	mov	r2, r4
 800709a:	4630      	mov	r0, r6
 800709c:	f7ff ff1c 	bl	8006ed8 <__multiply>
 80070a0:	4680      	mov	r8, r0
 80070a2:	4639      	mov	r1, r7
 80070a4:	4630      	mov	r0, r6
 80070a6:	f7ff fe01 	bl	8006cac <_Bfree>
 80070aa:	4647      	mov	r7, r8
 80070ac:	106d      	asrs	r5, r5, #1
 80070ae:	d00b      	beq.n	80070c8 <__pow5mult+0xa0>
 80070b0:	6820      	ldr	r0, [r4, #0]
 80070b2:	b938      	cbnz	r0, 80070c4 <__pow5mult+0x9c>
 80070b4:	4622      	mov	r2, r4
 80070b6:	4621      	mov	r1, r4
 80070b8:	4630      	mov	r0, r6
 80070ba:	f7ff ff0d 	bl	8006ed8 <__multiply>
 80070be:	6020      	str	r0, [r4, #0]
 80070c0:	f8c0 9000 	str.w	r9, [r0]
 80070c4:	4604      	mov	r4, r0
 80070c6:	e7e4      	b.n	8007092 <__pow5mult+0x6a>
 80070c8:	4638      	mov	r0, r7
 80070ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070ce:	bf00      	nop
 80070d0:	08008a98 	.word	0x08008a98
 80070d4:	0800884e 	.word	0x0800884e
 80070d8:	0800894c 	.word	0x0800894c

080070dc <__lshift>:
 80070dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070e0:	460c      	mov	r4, r1
 80070e2:	4607      	mov	r7, r0
 80070e4:	4691      	mov	r9, r2
 80070e6:	6923      	ldr	r3, [r4, #16]
 80070e8:	6849      	ldr	r1, [r1, #4]
 80070ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80070ee:	68a3      	ldr	r3, [r4, #8]
 80070f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80070f4:	f108 0601 	add.w	r6, r8, #1
 80070f8:	42b3      	cmp	r3, r6
 80070fa:	db0b      	blt.n	8007114 <__lshift+0x38>
 80070fc:	4638      	mov	r0, r7
 80070fe:	f7ff fd95 	bl	8006c2c <_Balloc>
 8007102:	4605      	mov	r5, r0
 8007104:	b948      	cbnz	r0, 800711a <__lshift+0x3e>
 8007106:	4602      	mov	r2, r0
 8007108:	f240 11d9 	movw	r1, #473	; 0x1d9
 800710c:	4b29      	ldr	r3, [pc, #164]	; (80071b4 <__lshift+0xd8>)
 800710e:	482a      	ldr	r0, [pc, #168]	; (80071b8 <__lshift+0xdc>)
 8007110:	f000 fcc8 	bl	8007aa4 <__assert_func>
 8007114:	3101      	adds	r1, #1
 8007116:	005b      	lsls	r3, r3, #1
 8007118:	e7ee      	b.n	80070f8 <__lshift+0x1c>
 800711a:	2300      	movs	r3, #0
 800711c:	f100 0114 	add.w	r1, r0, #20
 8007120:	f100 0210 	add.w	r2, r0, #16
 8007124:	4618      	mov	r0, r3
 8007126:	4553      	cmp	r3, sl
 8007128:	db37      	blt.n	800719a <__lshift+0xbe>
 800712a:	6920      	ldr	r0, [r4, #16]
 800712c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007130:	f104 0314 	add.w	r3, r4, #20
 8007134:	f019 091f 	ands.w	r9, r9, #31
 8007138:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800713c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007140:	d02f      	beq.n	80071a2 <__lshift+0xc6>
 8007142:	468a      	mov	sl, r1
 8007144:	f04f 0c00 	mov.w	ip, #0
 8007148:	f1c9 0e20 	rsb	lr, r9, #32
 800714c:	681a      	ldr	r2, [r3, #0]
 800714e:	fa02 f209 	lsl.w	r2, r2, r9
 8007152:	ea42 020c 	orr.w	r2, r2, ip
 8007156:	f84a 2b04 	str.w	r2, [sl], #4
 800715a:	f853 2b04 	ldr.w	r2, [r3], #4
 800715e:	4298      	cmp	r0, r3
 8007160:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007164:	d8f2      	bhi.n	800714c <__lshift+0x70>
 8007166:	1b03      	subs	r3, r0, r4
 8007168:	3b15      	subs	r3, #21
 800716a:	f023 0303 	bic.w	r3, r3, #3
 800716e:	3304      	adds	r3, #4
 8007170:	f104 0215 	add.w	r2, r4, #21
 8007174:	4290      	cmp	r0, r2
 8007176:	bf38      	it	cc
 8007178:	2304      	movcc	r3, #4
 800717a:	f841 c003 	str.w	ip, [r1, r3]
 800717e:	f1bc 0f00 	cmp.w	ip, #0
 8007182:	d001      	beq.n	8007188 <__lshift+0xac>
 8007184:	f108 0602 	add.w	r6, r8, #2
 8007188:	3e01      	subs	r6, #1
 800718a:	4638      	mov	r0, r7
 800718c:	4621      	mov	r1, r4
 800718e:	612e      	str	r6, [r5, #16]
 8007190:	f7ff fd8c 	bl	8006cac <_Bfree>
 8007194:	4628      	mov	r0, r5
 8007196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800719a:	f842 0f04 	str.w	r0, [r2, #4]!
 800719e:	3301      	adds	r3, #1
 80071a0:	e7c1      	b.n	8007126 <__lshift+0x4a>
 80071a2:	3904      	subs	r1, #4
 80071a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80071a8:	4298      	cmp	r0, r3
 80071aa:	f841 2f04 	str.w	r2, [r1, #4]!
 80071ae:	d8f9      	bhi.n	80071a4 <__lshift+0xc8>
 80071b0:	e7ea      	b.n	8007188 <__lshift+0xac>
 80071b2:	bf00      	nop
 80071b4:	080088c0 	.word	0x080088c0
 80071b8:	0800894c 	.word	0x0800894c

080071bc <__mcmp>:
 80071bc:	4603      	mov	r3, r0
 80071be:	690a      	ldr	r2, [r1, #16]
 80071c0:	6900      	ldr	r0, [r0, #16]
 80071c2:	b530      	push	{r4, r5, lr}
 80071c4:	1a80      	subs	r0, r0, r2
 80071c6:	d10d      	bne.n	80071e4 <__mcmp+0x28>
 80071c8:	3314      	adds	r3, #20
 80071ca:	3114      	adds	r1, #20
 80071cc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80071d0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80071d4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80071d8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80071dc:	4295      	cmp	r5, r2
 80071de:	d002      	beq.n	80071e6 <__mcmp+0x2a>
 80071e0:	d304      	bcc.n	80071ec <__mcmp+0x30>
 80071e2:	2001      	movs	r0, #1
 80071e4:	bd30      	pop	{r4, r5, pc}
 80071e6:	42a3      	cmp	r3, r4
 80071e8:	d3f4      	bcc.n	80071d4 <__mcmp+0x18>
 80071ea:	e7fb      	b.n	80071e4 <__mcmp+0x28>
 80071ec:	f04f 30ff 	mov.w	r0, #4294967295
 80071f0:	e7f8      	b.n	80071e4 <__mcmp+0x28>
	...

080071f4 <__mdiff>:
 80071f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071f8:	460d      	mov	r5, r1
 80071fa:	4607      	mov	r7, r0
 80071fc:	4611      	mov	r1, r2
 80071fe:	4628      	mov	r0, r5
 8007200:	4614      	mov	r4, r2
 8007202:	f7ff ffdb 	bl	80071bc <__mcmp>
 8007206:	1e06      	subs	r6, r0, #0
 8007208:	d111      	bne.n	800722e <__mdiff+0x3a>
 800720a:	4631      	mov	r1, r6
 800720c:	4638      	mov	r0, r7
 800720e:	f7ff fd0d 	bl	8006c2c <_Balloc>
 8007212:	4602      	mov	r2, r0
 8007214:	b928      	cbnz	r0, 8007222 <__mdiff+0x2e>
 8007216:	f240 2132 	movw	r1, #562	; 0x232
 800721a:	4b3a      	ldr	r3, [pc, #232]	; (8007304 <__mdiff+0x110>)
 800721c:	483a      	ldr	r0, [pc, #232]	; (8007308 <__mdiff+0x114>)
 800721e:	f000 fc41 	bl	8007aa4 <__assert_func>
 8007222:	2301      	movs	r3, #1
 8007224:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007228:	4610      	mov	r0, r2
 800722a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800722e:	bfa4      	itt	ge
 8007230:	4623      	movge	r3, r4
 8007232:	462c      	movge	r4, r5
 8007234:	4638      	mov	r0, r7
 8007236:	6861      	ldr	r1, [r4, #4]
 8007238:	bfa6      	itte	ge
 800723a:	461d      	movge	r5, r3
 800723c:	2600      	movge	r6, #0
 800723e:	2601      	movlt	r6, #1
 8007240:	f7ff fcf4 	bl	8006c2c <_Balloc>
 8007244:	4602      	mov	r2, r0
 8007246:	b918      	cbnz	r0, 8007250 <__mdiff+0x5c>
 8007248:	f44f 7110 	mov.w	r1, #576	; 0x240
 800724c:	4b2d      	ldr	r3, [pc, #180]	; (8007304 <__mdiff+0x110>)
 800724e:	e7e5      	b.n	800721c <__mdiff+0x28>
 8007250:	f102 0814 	add.w	r8, r2, #20
 8007254:	46c2      	mov	sl, r8
 8007256:	f04f 0c00 	mov.w	ip, #0
 800725a:	6927      	ldr	r7, [r4, #16]
 800725c:	60c6      	str	r6, [r0, #12]
 800725e:	692e      	ldr	r6, [r5, #16]
 8007260:	f104 0014 	add.w	r0, r4, #20
 8007264:	f105 0914 	add.w	r9, r5, #20
 8007268:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800726c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007270:	3410      	adds	r4, #16
 8007272:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8007276:	f859 3b04 	ldr.w	r3, [r9], #4
 800727a:	fa1f f18b 	uxth.w	r1, fp
 800727e:	448c      	add	ip, r1
 8007280:	b299      	uxth	r1, r3
 8007282:	0c1b      	lsrs	r3, r3, #16
 8007284:	ebac 0101 	sub.w	r1, ip, r1
 8007288:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800728c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007290:	b289      	uxth	r1, r1
 8007292:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007296:	454e      	cmp	r6, r9
 8007298:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800729c:	f84a 3b04 	str.w	r3, [sl], #4
 80072a0:	d8e7      	bhi.n	8007272 <__mdiff+0x7e>
 80072a2:	1b73      	subs	r3, r6, r5
 80072a4:	3b15      	subs	r3, #21
 80072a6:	f023 0303 	bic.w	r3, r3, #3
 80072aa:	3515      	adds	r5, #21
 80072ac:	3304      	adds	r3, #4
 80072ae:	42ae      	cmp	r6, r5
 80072b0:	bf38      	it	cc
 80072b2:	2304      	movcc	r3, #4
 80072b4:	4418      	add	r0, r3
 80072b6:	4443      	add	r3, r8
 80072b8:	461e      	mov	r6, r3
 80072ba:	4605      	mov	r5, r0
 80072bc:	4575      	cmp	r5, lr
 80072be:	d30e      	bcc.n	80072de <__mdiff+0xea>
 80072c0:	f10e 0103 	add.w	r1, lr, #3
 80072c4:	1a09      	subs	r1, r1, r0
 80072c6:	f021 0103 	bic.w	r1, r1, #3
 80072ca:	3803      	subs	r0, #3
 80072cc:	4586      	cmp	lr, r0
 80072ce:	bf38      	it	cc
 80072d0:	2100      	movcc	r1, #0
 80072d2:	4419      	add	r1, r3
 80072d4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80072d8:	b18b      	cbz	r3, 80072fe <__mdiff+0x10a>
 80072da:	6117      	str	r7, [r2, #16]
 80072dc:	e7a4      	b.n	8007228 <__mdiff+0x34>
 80072de:	f855 8b04 	ldr.w	r8, [r5], #4
 80072e2:	fa1f f188 	uxth.w	r1, r8
 80072e6:	4461      	add	r1, ip
 80072e8:	140c      	asrs	r4, r1, #16
 80072ea:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80072ee:	b289      	uxth	r1, r1
 80072f0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80072f4:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80072f8:	f846 1b04 	str.w	r1, [r6], #4
 80072fc:	e7de      	b.n	80072bc <__mdiff+0xc8>
 80072fe:	3f01      	subs	r7, #1
 8007300:	e7e8      	b.n	80072d4 <__mdiff+0xe0>
 8007302:	bf00      	nop
 8007304:	080088c0 	.word	0x080088c0
 8007308:	0800894c 	.word	0x0800894c

0800730c <__ulp>:
 800730c:	4b11      	ldr	r3, [pc, #68]	; (8007354 <__ulp+0x48>)
 800730e:	400b      	ands	r3, r1
 8007310:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007314:	2b00      	cmp	r3, #0
 8007316:	dd02      	ble.n	800731e <__ulp+0x12>
 8007318:	2000      	movs	r0, #0
 800731a:	4619      	mov	r1, r3
 800731c:	4770      	bx	lr
 800731e:	425b      	negs	r3, r3
 8007320:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007324:	f04f 0000 	mov.w	r0, #0
 8007328:	f04f 0100 	mov.w	r1, #0
 800732c:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007330:	da04      	bge.n	800733c <__ulp+0x30>
 8007332:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007336:	fa43 f102 	asr.w	r1, r3, r2
 800733a:	4770      	bx	lr
 800733c:	f1a2 0314 	sub.w	r3, r2, #20
 8007340:	2b1e      	cmp	r3, #30
 8007342:	bfd6      	itet	le
 8007344:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8007348:	2301      	movgt	r3, #1
 800734a:	fa22 f303 	lsrle.w	r3, r2, r3
 800734e:	4618      	mov	r0, r3
 8007350:	4770      	bx	lr
 8007352:	bf00      	nop
 8007354:	7ff00000 	.word	0x7ff00000

08007358 <__b2d>:
 8007358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800735c:	6907      	ldr	r7, [r0, #16]
 800735e:	f100 0914 	add.w	r9, r0, #20
 8007362:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8007366:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800736a:	f1a7 0804 	sub.w	r8, r7, #4
 800736e:	4630      	mov	r0, r6
 8007370:	f7ff fd4e 	bl	8006e10 <__hi0bits>
 8007374:	f1c0 0320 	rsb	r3, r0, #32
 8007378:	280a      	cmp	r0, #10
 800737a:	600b      	str	r3, [r1, #0]
 800737c:	491f      	ldr	r1, [pc, #124]	; (80073fc <__b2d+0xa4>)
 800737e:	dc17      	bgt.n	80073b0 <__b2d+0x58>
 8007380:	45c1      	cmp	r9, r8
 8007382:	bf28      	it	cs
 8007384:	2200      	movcs	r2, #0
 8007386:	f1c0 0c0b 	rsb	ip, r0, #11
 800738a:	fa26 f30c 	lsr.w	r3, r6, ip
 800738e:	bf38      	it	cc
 8007390:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007394:	ea43 0501 	orr.w	r5, r3, r1
 8007398:	f100 0315 	add.w	r3, r0, #21
 800739c:	fa06 f303 	lsl.w	r3, r6, r3
 80073a0:	fa22 f20c 	lsr.w	r2, r2, ip
 80073a4:	ea43 0402 	orr.w	r4, r3, r2
 80073a8:	4620      	mov	r0, r4
 80073aa:	4629      	mov	r1, r5
 80073ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073b0:	45c1      	cmp	r9, r8
 80073b2:	bf2e      	itee	cs
 80073b4:	2200      	movcs	r2, #0
 80073b6:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80073ba:	f1a7 0808 	subcc.w	r8, r7, #8
 80073be:	f1b0 030b 	subs.w	r3, r0, #11
 80073c2:	d016      	beq.n	80073f2 <__b2d+0x9a>
 80073c4:	f1c3 0720 	rsb	r7, r3, #32
 80073c8:	fa22 f107 	lsr.w	r1, r2, r7
 80073cc:	45c8      	cmp	r8, r9
 80073ce:	fa06 f603 	lsl.w	r6, r6, r3
 80073d2:	ea46 0601 	orr.w	r6, r6, r1
 80073d6:	bf94      	ite	ls
 80073d8:	2100      	movls	r1, #0
 80073da:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 80073de:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 80073e2:	fa02 f003 	lsl.w	r0, r2, r3
 80073e6:	40f9      	lsrs	r1, r7
 80073e8:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80073ec:	ea40 0401 	orr.w	r4, r0, r1
 80073f0:	e7da      	b.n	80073a8 <__b2d+0x50>
 80073f2:	4614      	mov	r4, r2
 80073f4:	ea46 0501 	orr.w	r5, r6, r1
 80073f8:	e7d6      	b.n	80073a8 <__b2d+0x50>
 80073fa:	bf00      	nop
 80073fc:	3ff00000 	.word	0x3ff00000

08007400 <__d2b>:
 8007400:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007404:	2101      	movs	r1, #1
 8007406:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800740a:	4690      	mov	r8, r2
 800740c:	461d      	mov	r5, r3
 800740e:	f7ff fc0d 	bl	8006c2c <_Balloc>
 8007412:	4604      	mov	r4, r0
 8007414:	b930      	cbnz	r0, 8007424 <__d2b+0x24>
 8007416:	4602      	mov	r2, r0
 8007418:	f240 310a 	movw	r1, #778	; 0x30a
 800741c:	4b24      	ldr	r3, [pc, #144]	; (80074b0 <__d2b+0xb0>)
 800741e:	4825      	ldr	r0, [pc, #148]	; (80074b4 <__d2b+0xb4>)
 8007420:	f000 fb40 	bl	8007aa4 <__assert_func>
 8007424:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007428:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800742c:	bb2d      	cbnz	r5, 800747a <__d2b+0x7a>
 800742e:	9301      	str	r3, [sp, #4]
 8007430:	f1b8 0300 	subs.w	r3, r8, #0
 8007434:	d026      	beq.n	8007484 <__d2b+0x84>
 8007436:	4668      	mov	r0, sp
 8007438:	9300      	str	r3, [sp, #0]
 800743a:	f7ff fd09 	bl	8006e50 <__lo0bits>
 800743e:	9900      	ldr	r1, [sp, #0]
 8007440:	b1f0      	cbz	r0, 8007480 <__d2b+0x80>
 8007442:	9a01      	ldr	r2, [sp, #4]
 8007444:	f1c0 0320 	rsb	r3, r0, #32
 8007448:	fa02 f303 	lsl.w	r3, r2, r3
 800744c:	430b      	orrs	r3, r1
 800744e:	40c2      	lsrs	r2, r0
 8007450:	6163      	str	r3, [r4, #20]
 8007452:	9201      	str	r2, [sp, #4]
 8007454:	9b01      	ldr	r3, [sp, #4]
 8007456:	2b00      	cmp	r3, #0
 8007458:	bf14      	ite	ne
 800745a:	2102      	movne	r1, #2
 800745c:	2101      	moveq	r1, #1
 800745e:	61a3      	str	r3, [r4, #24]
 8007460:	6121      	str	r1, [r4, #16]
 8007462:	b1c5      	cbz	r5, 8007496 <__d2b+0x96>
 8007464:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007468:	4405      	add	r5, r0
 800746a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800746e:	603d      	str	r5, [r7, #0]
 8007470:	6030      	str	r0, [r6, #0]
 8007472:	4620      	mov	r0, r4
 8007474:	b002      	add	sp, #8
 8007476:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800747a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800747e:	e7d6      	b.n	800742e <__d2b+0x2e>
 8007480:	6161      	str	r1, [r4, #20]
 8007482:	e7e7      	b.n	8007454 <__d2b+0x54>
 8007484:	a801      	add	r0, sp, #4
 8007486:	f7ff fce3 	bl	8006e50 <__lo0bits>
 800748a:	2101      	movs	r1, #1
 800748c:	9b01      	ldr	r3, [sp, #4]
 800748e:	6121      	str	r1, [r4, #16]
 8007490:	6163      	str	r3, [r4, #20]
 8007492:	3020      	adds	r0, #32
 8007494:	e7e5      	b.n	8007462 <__d2b+0x62>
 8007496:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800749a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800749e:	6038      	str	r0, [r7, #0]
 80074a0:	6918      	ldr	r0, [r3, #16]
 80074a2:	f7ff fcb5 	bl	8006e10 <__hi0bits>
 80074a6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80074aa:	6031      	str	r1, [r6, #0]
 80074ac:	e7e1      	b.n	8007472 <__d2b+0x72>
 80074ae:	bf00      	nop
 80074b0:	080088c0 	.word	0x080088c0
 80074b4:	0800894c 	.word	0x0800894c

080074b8 <__ratio>:
 80074b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074bc:	4688      	mov	r8, r1
 80074be:	4669      	mov	r1, sp
 80074c0:	4681      	mov	r9, r0
 80074c2:	f7ff ff49 	bl	8007358 <__b2d>
 80074c6:	460f      	mov	r7, r1
 80074c8:	4604      	mov	r4, r0
 80074ca:	460d      	mov	r5, r1
 80074cc:	4640      	mov	r0, r8
 80074ce:	a901      	add	r1, sp, #4
 80074d0:	f7ff ff42 	bl	8007358 <__b2d>
 80074d4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80074d8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80074dc:	468b      	mov	fp, r1
 80074de:	eba3 0c02 	sub.w	ip, r3, r2
 80074e2:	e9dd 3200 	ldrd	r3, r2, [sp]
 80074e6:	1a9b      	subs	r3, r3, r2
 80074e8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	bfd5      	itete	le
 80074f0:	460a      	movle	r2, r1
 80074f2:	462a      	movgt	r2, r5
 80074f4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80074f8:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80074fc:	bfd8      	it	le
 80074fe:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007502:	465b      	mov	r3, fp
 8007504:	4602      	mov	r2, r0
 8007506:	4639      	mov	r1, r7
 8007508:	4620      	mov	r0, r4
 800750a:	f7f9 f90f 	bl	800072c <__aeabi_ddiv>
 800750e:	b003      	add	sp, #12
 8007510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007514 <__copybits>:
 8007514:	3901      	subs	r1, #1
 8007516:	b570      	push	{r4, r5, r6, lr}
 8007518:	1149      	asrs	r1, r1, #5
 800751a:	6914      	ldr	r4, [r2, #16]
 800751c:	3101      	adds	r1, #1
 800751e:	f102 0314 	add.w	r3, r2, #20
 8007522:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007526:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800752a:	1f05      	subs	r5, r0, #4
 800752c:	42a3      	cmp	r3, r4
 800752e:	d30c      	bcc.n	800754a <__copybits+0x36>
 8007530:	1aa3      	subs	r3, r4, r2
 8007532:	3b11      	subs	r3, #17
 8007534:	f023 0303 	bic.w	r3, r3, #3
 8007538:	3211      	adds	r2, #17
 800753a:	42a2      	cmp	r2, r4
 800753c:	bf88      	it	hi
 800753e:	2300      	movhi	r3, #0
 8007540:	4418      	add	r0, r3
 8007542:	2300      	movs	r3, #0
 8007544:	4288      	cmp	r0, r1
 8007546:	d305      	bcc.n	8007554 <__copybits+0x40>
 8007548:	bd70      	pop	{r4, r5, r6, pc}
 800754a:	f853 6b04 	ldr.w	r6, [r3], #4
 800754e:	f845 6f04 	str.w	r6, [r5, #4]!
 8007552:	e7eb      	b.n	800752c <__copybits+0x18>
 8007554:	f840 3b04 	str.w	r3, [r0], #4
 8007558:	e7f4      	b.n	8007544 <__copybits+0x30>

0800755a <__any_on>:
 800755a:	f100 0214 	add.w	r2, r0, #20
 800755e:	6900      	ldr	r0, [r0, #16]
 8007560:	114b      	asrs	r3, r1, #5
 8007562:	4298      	cmp	r0, r3
 8007564:	b510      	push	{r4, lr}
 8007566:	db11      	blt.n	800758c <__any_on+0x32>
 8007568:	dd0a      	ble.n	8007580 <__any_on+0x26>
 800756a:	f011 011f 	ands.w	r1, r1, #31
 800756e:	d007      	beq.n	8007580 <__any_on+0x26>
 8007570:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007574:	fa24 f001 	lsr.w	r0, r4, r1
 8007578:	fa00 f101 	lsl.w	r1, r0, r1
 800757c:	428c      	cmp	r4, r1
 800757e:	d10b      	bne.n	8007598 <__any_on+0x3e>
 8007580:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007584:	4293      	cmp	r3, r2
 8007586:	d803      	bhi.n	8007590 <__any_on+0x36>
 8007588:	2000      	movs	r0, #0
 800758a:	bd10      	pop	{r4, pc}
 800758c:	4603      	mov	r3, r0
 800758e:	e7f7      	b.n	8007580 <__any_on+0x26>
 8007590:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007594:	2900      	cmp	r1, #0
 8007596:	d0f5      	beq.n	8007584 <__any_on+0x2a>
 8007598:	2001      	movs	r0, #1
 800759a:	e7f6      	b.n	800758a <__any_on+0x30>

0800759c <_calloc_r>:
 800759c:	b570      	push	{r4, r5, r6, lr}
 800759e:	fba1 5402 	umull	r5, r4, r1, r2
 80075a2:	b934      	cbnz	r4, 80075b2 <_calloc_r+0x16>
 80075a4:	4629      	mov	r1, r5
 80075a6:	f000 f875 	bl	8007694 <_malloc_r>
 80075aa:	4606      	mov	r6, r0
 80075ac:	b928      	cbnz	r0, 80075ba <_calloc_r+0x1e>
 80075ae:	4630      	mov	r0, r6
 80075b0:	bd70      	pop	{r4, r5, r6, pc}
 80075b2:	220c      	movs	r2, #12
 80075b4:	2600      	movs	r6, #0
 80075b6:	6002      	str	r2, [r0, #0]
 80075b8:	e7f9      	b.n	80075ae <_calloc_r+0x12>
 80075ba:	462a      	mov	r2, r5
 80075bc:	4621      	mov	r1, r4
 80075be:	f7fc fbf1 	bl	8003da4 <memset>
 80075c2:	e7f4      	b.n	80075ae <_calloc_r+0x12>

080075c4 <_free_r>:
 80075c4:	b538      	push	{r3, r4, r5, lr}
 80075c6:	4605      	mov	r5, r0
 80075c8:	2900      	cmp	r1, #0
 80075ca:	d040      	beq.n	800764e <_free_r+0x8a>
 80075cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075d0:	1f0c      	subs	r4, r1, #4
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	bfb8      	it	lt
 80075d6:	18e4      	addlt	r4, r4, r3
 80075d8:	f000 faae 	bl	8007b38 <__malloc_lock>
 80075dc:	4a1c      	ldr	r2, [pc, #112]	; (8007650 <_free_r+0x8c>)
 80075de:	6813      	ldr	r3, [r2, #0]
 80075e0:	b933      	cbnz	r3, 80075f0 <_free_r+0x2c>
 80075e2:	6063      	str	r3, [r4, #4]
 80075e4:	6014      	str	r4, [r2, #0]
 80075e6:	4628      	mov	r0, r5
 80075e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80075ec:	f000 baaa 	b.w	8007b44 <__malloc_unlock>
 80075f0:	42a3      	cmp	r3, r4
 80075f2:	d908      	bls.n	8007606 <_free_r+0x42>
 80075f4:	6820      	ldr	r0, [r4, #0]
 80075f6:	1821      	adds	r1, r4, r0
 80075f8:	428b      	cmp	r3, r1
 80075fa:	bf01      	itttt	eq
 80075fc:	6819      	ldreq	r1, [r3, #0]
 80075fe:	685b      	ldreq	r3, [r3, #4]
 8007600:	1809      	addeq	r1, r1, r0
 8007602:	6021      	streq	r1, [r4, #0]
 8007604:	e7ed      	b.n	80075e2 <_free_r+0x1e>
 8007606:	461a      	mov	r2, r3
 8007608:	685b      	ldr	r3, [r3, #4]
 800760a:	b10b      	cbz	r3, 8007610 <_free_r+0x4c>
 800760c:	42a3      	cmp	r3, r4
 800760e:	d9fa      	bls.n	8007606 <_free_r+0x42>
 8007610:	6811      	ldr	r1, [r2, #0]
 8007612:	1850      	adds	r0, r2, r1
 8007614:	42a0      	cmp	r0, r4
 8007616:	d10b      	bne.n	8007630 <_free_r+0x6c>
 8007618:	6820      	ldr	r0, [r4, #0]
 800761a:	4401      	add	r1, r0
 800761c:	1850      	adds	r0, r2, r1
 800761e:	4283      	cmp	r3, r0
 8007620:	6011      	str	r1, [r2, #0]
 8007622:	d1e0      	bne.n	80075e6 <_free_r+0x22>
 8007624:	6818      	ldr	r0, [r3, #0]
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	4401      	add	r1, r0
 800762a:	6011      	str	r1, [r2, #0]
 800762c:	6053      	str	r3, [r2, #4]
 800762e:	e7da      	b.n	80075e6 <_free_r+0x22>
 8007630:	d902      	bls.n	8007638 <_free_r+0x74>
 8007632:	230c      	movs	r3, #12
 8007634:	602b      	str	r3, [r5, #0]
 8007636:	e7d6      	b.n	80075e6 <_free_r+0x22>
 8007638:	6820      	ldr	r0, [r4, #0]
 800763a:	1821      	adds	r1, r4, r0
 800763c:	428b      	cmp	r3, r1
 800763e:	bf01      	itttt	eq
 8007640:	6819      	ldreq	r1, [r3, #0]
 8007642:	685b      	ldreq	r3, [r3, #4]
 8007644:	1809      	addeq	r1, r1, r0
 8007646:	6021      	streq	r1, [r4, #0]
 8007648:	6063      	str	r3, [r4, #4]
 800764a:	6054      	str	r4, [r2, #4]
 800764c:	e7cb      	b.n	80075e6 <_free_r+0x22>
 800764e:	bd38      	pop	{r3, r4, r5, pc}
 8007650:	200002b8 	.word	0x200002b8

08007654 <sbrk_aligned>:
 8007654:	b570      	push	{r4, r5, r6, lr}
 8007656:	4e0e      	ldr	r6, [pc, #56]	; (8007690 <sbrk_aligned+0x3c>)
 8007658:	460c      	mov	r4, r1
 800765a:	6831      	ldr	r1, [r6, #0]
 800765c:	4605      	mov	r5, r0
 800765e:	b911      	cbnz	r1, 8007666 <sbrk_aligned+0x12>
 8007660:	f000 f9ee 	bl	8007a40 <_sbrk_r>
 8007664:	6030      	str	r0, [r6, #0]
 8007666:	4621      	mov	r1, r4
 8007668:	4628      	mov	r0, r5
 800766a:	f000 f9e9 	bl	8007a40 <_sbrk_r>
 800766e:	1c43      	adds	r3, r0, #1
 8007670:	d00a      	beq.n	8007688 <sbrk_aligned+0x34>
 8007672:	1cc4      	adds	r4, r0, #3
 8007674:	f024 0403 	bic.w	r4, r4, #3
 8007678:	42a0      	cmp	r0, r4
 800767a:	d007      	beq.n	800768c <sbrk_aligned+0x38>
 800767c:	1a21      	subs	r1, r4, r0
 800767e:	4628      	mov	r0, r5
 8007680:	f000 f9de 	bl	8007a40 <_sbrk_r>
 8007684:	3001      	adds	r0, #1
 8007686:	d101      	bne.n	800768c <sbrk_aligned+0x38>
 8007688:	f04f 34ff 	mov.w	r4, #4294967295
 800768c:	4620      	mov	r0, r4
 800768e:	bd70      	pop	{r4, r5, r6, pc}
 8007690:	200002bc 	.word	0x200002bc

08007694 <_malloc_r>:
 8007694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007698:	1ccd      	adds	r5, r1, #3
 800769a:	f025 0503 	bic.w	r5, r5, #3
 800769e:	3508      	adds	r5, #8
 80076a0:	2d0c      	cmp	r5, #12
 80076a2:	bf38      	it	cc
 80076a4:	250c      	movcc	r5, #12
 80076a6:	2d00      	cmp	r5, #0
 80076a8:	4607      	mov	r7, r0
 80076aa:	db01      	blt.n	80076b0 <_malloc_r+0x1c>
 80076ac:	42a9      	cmp	r1, r5
 80076ae:	d905      	bls.n	80076bc <_malloc_r+0x28>
 80076b0:	230c      	movs	r3, #12
 80076b2:	2600      	movs	r6, #0
 80076b4:	603b      	str	r3, [r7, #0]
 80076b6:	4630      	mov	r0, r6
 80076b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076bc:	4e2e      	ldr	r6, [pc, #184]	; (8007778 <_malloc_r+0xe4>)
 80076be:	f000 fa3b 	bl	8007b38 <__malloc_lock>
 80076c2:	6833      	ldr	r3, [r6, #0]
 80076c4:	461c      	mov	r4, r3
 80076c6:	bb34      	cbnz	r4, 8007716 <_malloc_r+0x82>
 80076c8:	4629      	mov	r1, r5
 80076ca:	4638      	mov	r0, r7
 80076cc:	f7ff ffc2 	bl	8007654 <sbrk_aligned>
 80076d0:	1c43      	adds	r3, r0, #1
 80076d2:	4604      	mov	r4, r0
 80076d4:	d14d      	bne.n	8007772 <_malloc_r+0xde>
 80076d6:	6834      	ldr	r4, [r6, #0]
 80076d8:	4626      	mov	r6, r4
 80076da:	2e00      	cmp	r6, #0
 80076dc:	d140      	bne.n	8007760 <_malloc_r+0xcc>
 80076de:	6823      	ldr	r3, [r4, #0]
 80076e0:	4631      	mov	r1, r6
 80076e2:	4638      	mov	r0, r7
 80076e4:	eb04 0803 	add.w	r8, r4, r3
 80076e8:	f000 f9aa 	bl	8007a40 <_sbrk_r>
 80076ec:	4580      	cmp	r8, r0
 80076ee:	d13a      	bne.n	8007766 <_malloc_r+0xd2>
 80076f0:	6821      	ldr	r1, [r4, #0]
 80076f2:	3503      	adds	r5, #3
 80076f4:	1a6d      	subs	r5, r5, r1
 80076f6:	f025 0503 	bic.w	r5, r5, #3
 80076fa:	3508      	adds	r5, #8
 80076fc:	2d0c      	cmp	r5, #12
 80076fe:	bf38      	it	cc
 8007700:	250c      	movcc	r5, #12
 8007702:	4638      	mov	r0, r7
 8007704:	4629      	mov	r1, r5
 8007706:	f7ff ffa5 	bl	8007654 <sbrk_aligned>
 800770a:	3001      	adds	r0, #1
 800770c:	d02b      	beq.n	8007766 <_malloc_r+0xd2>
 800770e:	6823      	ldr	r3, [r4, #0]
 8007710:	442b      	add	r3, r5
 8007712:	6023      	str	r3, [r4, #0]
 8007714:	e00e      	b.n	8007734 <_malloc_r+0xa0>
 8007716:	6822      	ldr	r2, [r4, #0]
 8007718:	1b52      	subs	r2, r2, r5
 800771a:	d41e      	bmi.n	800775a <_malloc_r+0xc6>
 800771c:	2a0b      	cmp	r2, #11
 800771e:	d916      	bls.n	800774e <_malloc_r+0xba>
 8007720:	1961      	adds	r1, r4, r5
 8007722:	42a3      	cmp	r3, r4
 8007724:	6025      	str	r5, [r4, #0]
 8007726:	bf18      	it	ne
 8007728:	6059      	strne	r1, [r3, #4]
 800772a:	6863      	ldr	r3, [r4, #4]
 800772c:	bf08      	it	eq
 800772e:	6031      	streq	r1, [r6, #0]
 8007730:	5162      	str	r2, [r4, r5]
 8007732:	604b      	str	r3, [r1, #4]
 8007734:	4638      	mov	r0, r7
 8007736:	f104 060b 	add.w	r6, r4, #11
 800773a:	f000 fa03 	bl	8007b44 <__malloc_unlock>
 800773e:	f026 0607 	bic.w	r6, r6, #7
 8007742:	1d23      	adds	r3, r4, #4
 8007744:	1af2      	subs	r2, r6, r3
 8007746:	d0b6      	beq.n	80076b6 <_malloc_r+0x22>
 8007748:	1b9b      	subs	r3, r3, r6
 800774a:	50a3      	str	r3, [r4, r2]
 800774c:	e7b3      	b.n	80076b6 <_malloc_r+0x22>
 800774e:	6862      	ldr	r2, [r4, #4]
 8007750:	42a3      	cmp	r3, r4
 8007752:	bf0c      	ite	eq
 8007754:	6032      	streq	r2, [r6, #0]
 8007756:	605a      	strne	r2, [r3, #4]
 8007758:	e7ec      	b.n	8007734 <_malloc_r+0xa0>
 800775a:	4623      	mov	r3, r4
 800775c:	6864      	ldr	r4, [r4, #4]
 800775e:	e7b2      	b.n	80076c6 <_malloc_r+0x32>
 8007760:	4634      	mov	r4, r6
 8007762:	6876      	ldr	r6, [r6, #4]
 8007764:	e7b9      	b.n	80076da <_malloc_r+0x46>
 8007766:	230c      	movs	r3, #12
 8007768:	4638      	mov	r0, r7
 800776a:	603b      	str	r3, [r7, #0]
 800776c:	f000 f9ea 	bl	8007b44 <__malloc_unlock>
 8007770:	e7a1      	b.n	80076b6 <_malloc_r+0x22>
 8007772:	6025      	str	r5, [r4, #0]
 8007774:	e7de      	b.n	8007734 <_malloc_r+0xa0>
 8007776:	bf00      	nop
 8007778:	200002b8 	.word	0x200002b8

0800777c <__ssputs_r>:
 800777c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007780:	688e      	ldr	r6, [r1, #8]
 8007782:	4682      	mov	sl, r0
 8007784:	429e      	cmp	r6, r3
 8007786:	460c      	mov	r4, r1
 8007788:	4690      	mov	r8, r2
 800778a:	461f      	mov	r7, r3
 800778c:	d838      	bhi.n	8007800 <__ssputs_r+0x84>
 800778e:	898a      	ldrh	r2, [r1, #12]
 8007790:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007794:	d032      	beq.n	80077fc <__ssputs_r+0x80>
 8007796:	6825      	ldr	r5, [r4, #0]
 8007798:	6909      	ldr	r1, [r1, #16]
 800779a:	3301      	adds	r3, #1
 800779c:	eba5 0901 	sub.w	r9, r5, r1
 80077a0:	6965      	ldr	r5, [r4, #20]
 80077a2:	444b      	add	r3, r9
 80077a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80077a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80077ac:	106d      	asrs	r5, r5, #1
 80077ae:	429d      	cmp	r5, r3
 80077b0:	bf38      	it	cc
 80077b2:	461d      	movcc	r5, r3
 80077b4:	0553      	lsls	r3, r2, #21
 80077b6:	d531      	bpl.n	800781c <__ssputs_r+0xa0>
 80077b8:	4629      	mov	r1, r5
 80077ba:	f7ff ff6b 	bl	8007694 <_malloc_r>
 80077be:	4606      	mov	r6, r0
 80077c0:	b950      	cbnz	r0, 80077d8 <__ssputs_r+0x5c>
 80077c2:	230c      	movs	r3, #12
 80077c4:	f04f 30ff 	mov.w	r0, #4294967295
 80077c8:	f8ca 3000 	str.w	r3, [sl]
 80077cc:	89a3      	ldrh	r3, [r4, #12]
 80077ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077d2:	81a3      	strh	r3, [r4, #12]
 80077d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077d8:	464a      	mov	r2, r9
 80077da:	6921      	ldr	r1, [r4, #16]
 80077dc:	f7ff fa18 	bl	8006c10 <memcpy>
 80077e0:	89a3      	ldrh	r3, [r4, #12]
 80077e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80077e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077ea:	81a3      	strh	r3, [r4, #12]
 80077ec:	6126      	str	r6, [r4, #16]
 80077ee:	444e      	add	r6, r9
 80077f0:	6026      	str	r6, [r4, #0]
 80077f2:	463e      	mov	r6, r7
 80077f4:	6165      	str	r5, [r4, #20]
 80077f6:	eba5 0509 	sub.w	r5, r5, r9
 80077fa:	60a5      	str	r5, [r4, #8]
 80077fc:	42be      	cmp	r6, r7
 80077fe:	d900      	bls.n	8007802 <__ssputs_r+0x86>
 8007800:	463e      	mov	r6, r7
 8007802:	4632      	mov	r2, r6
 8007804:	4641      	mov	r1, r8
 8007806:	6820      	ldr	r0, [r4, #0]
 8007808:	f000 f97c 	bl	8007b04 <memmove>
 800780c:	68a3      	ldr	r3, [r4, #8]
 800780e:	2000      	movs	r0, #0
 8007810:	1b9b      	subs	r3, r3, r6
 8007812:	60a3      	str	r3, [r4, #8]
 8007814:	6823      	ldr	r3, [r4, #0]
 8007816:	4433      	add	r3, r6
 8007818:	6023      	str	r3, [r4, #0]
 800781a:	e7db      	b.n	80077d4 <__ssputs_r+0x58>
 800781c:	462a      	mov	r2, r5
 800781e:	f000 f997 	bl	8007b50 <_realloc_r>
 8007822:	4606      	mov	r6, r0
 8007824:	2800      	cmp	r0, #0
 8007826:	d1e1      	bne.n	80077ec <__ssputs_r+0x70>
 8007828:	4650      	mov	r0, sl
 800782a:	6921      	ldr	r1, [r4, #16]
 800782c:	f7ff feca 	bl	80075c4 <_free_r>
 8007830:	e7c7      	b.n	80077c2 <__ssputs_r+0x46>
	...

08007834 <_svfiprintf_r>:
 8007834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007838:	4698      	mov	r8, r3
 800783a:	898b      	ldrh	r3, [r1, #12]
 800783c:	4607      	mov	r7, r0
 800783e:	061b      	lsls	r3, r3, #24
 8007840:	460d      	mov	r5, r1
 8007842:	4614      	mov	r4, r2
 8007844:	b09d      	sub	sp, #116	; 0x74
 8007846:	d50e      	bpl.n	8007866 <_svfiprintf_r+0x32>
 8007848:	690b      	ldr	r3, [r1, #16]
 800784a:	b963      	cbnz	r3, 8007866 <_svfiprintf_r+0x32>
 800784c:	2140      	movs	r1, #64	; 0x40
 800784e:	f7ff ff21 	bl	8007694 <_malloc_r>
 8007852:	6028      	str	r0, [r5, #0]
 8007854:	6128      	str	r0, [r5, #16]
 8007856:	b920      	cbnz	r0, 8007862 <_svfiprintf_r+0x2e>
 8007858:	230c      	movs	r3, #12
 800785a:	603b      	str	r3, [r7, #0]
 800785c:	f04f 30ff 	mov.w	r0, #4294967295
 8007860:	e0d1      	b.n	8007a06 <_svfiprintf_r+0x1d2>
 8007862:	2340      	movs	r3, #64	; 0x40
 8007864:	616b      	str	r3, [r5, #20]
 8007866:	2300      	movs	r3, #0
 8007868:	9309      	str	r3, [sp, #36]	; 0x24
 800786a:	2320      	movs	r3, #32
 800786c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007870:	2330      	movs	r3, #48	; 0x30
 8007872:	f04f 0901 	mov.w	r9, #1
 8007876:	f8cd 800c 	str.w	r8, [sp, #12]
 800787a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007a20 <_svfiprintf_r+0x1ec>
 800787e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007882:	4623      	mov	r3, r4
 8007884:	469a      	mov	sl, r3
 8007886:	f813 2b01 	ldrb.w	r2, [r3], #1
 800788a:	b10a      	cbz	r2, 8007890 <_svfiprintf_r+0x5c>
 800788c:	2a25      	cmp	r2, #37	; 0x25
 800788e:	d1f9      	bne.n	8007884 <_svfiprintf_r+0x50>
 8007890:	ebba 0b04 	subs.w	fp, sl, r4
 8007894:	d00b      	beq.n	80078ae <_svfiprintf_r+0x7a>
 8007896:	465b      	mov	r3, fp
 8007898:	4622      	mov	r2, r4
 800789a:	4629      	mov	r1, r5
 800789c:	4638      	mov	r0, r7
 800789e:	f7ff ff6d 	bl	800777c <__ssputs_r>
 80078a2:	3001      	adds	r0, #1
 80078a4:	f000 80aa 	beq.w	80079fc <_svfiprintf_r+0x1c8>
 80078a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80078aa:	445a      	add	r2, fp
 80078ac:	9209      	str	r2, [sp, #36]	; 0x24
 80078ae:	f89a 3000 	ldrb.w	r3, [sl]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	f000 80a2 	beq.w	80079fc <_svfiprintf_r+0x1c8>
 80078b8:	2300      	movs	r3, #0
 80078ba:	f04f 32ff 	mov.w	r2, #4294967295
 80078be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80078c2:	f10a 0a01 	add.w	sl, sl, #1
 80078c6:	9304      	str	r3, [sp, #16]
 80078c8:	9307      	str	r3, [sp, #28]
 80078ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80078ce:	931a      	str	r3, [sp, #104]	; 0x68
 80078d0:	4654      	mov	r4, sl
 80078d2:	2205      	movs	r2, #5
 80078d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078d8:	4851      	ldr	r0, [pc, #324]	; (8007a20 <_svfiprintf_r+0x1ec>)
 80078da:	f7ff f98b 	bl	8006bf4 <memchr>
 80078de:	9a04      	ldr	r2, [sp, #16]
 80078e0:	b9d8      	cbnz	r0, 800791a <_svfiprintf_r+0xe6>
 80078e2:	06d0      	lsls	r0, r2, #27
 80078e4:	bf44      	itt	mi
 80078e6:	2320      	movmi	r3, #32
 80078e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078ec:	0711      	lsls	r1, r2, #28
 80078ee:	bf44      	itt	mi
 80078f0:	232b      	movmi	r3, #43	; 0x2b
 80078f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078f6:	f89a 3000 	ldrb.w	r3, [sl]
 80078fa:	2b2a      	cmp	r3, #42	; 0x2a
 80078fc:	d015      	beq.n	800792a <_svfiprintf_r+0xf6>
 80078fe:	4654      	mov	r4, sl
 8007900:	2000      	movs	r0, #0
 8007902:	f04f 0c0a 	mov.w	ip, #10
 8007906:	9a07      	ldr	r2, [sp, #28]
 8007908:	4621      	mov	r1, r4
 800790a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800790e:	3b30      	subs	r3, #48	; 0x30
 8007910:	2b09      	cmp	r3, #9
 8007912:	d94e      	bls.n	80079b2 <_svfiprintf_r+0x17e>
 8007914:	b1b0      	cbz	r0, 8007944 <_svfiprintf_r+0x110>
 8007916:	9207      	str	r2, [sp, #28]
 8007918:	e014      	b.n	8007944 <_svfiprintf_r+0x110>
 800791a:	eba0 0308 	sub.w	r3, r0, r8
 800791e:	fa09 f303 	lsl.w	r3, r9, r3
 8007922:	4313      	orrs	r3, r2
 8007924:	46a2      	mov	sl, r4
 8007926:	9304      	str	r3, [sp, #16]
 8007928:	e7d2      	b.n	80078d0 <_svfiprintf_r+0x9c>
 800792a:	9b03      	ldr	r3, [sp, #12]
 800792c:	1d19      	adds	r1, r3, #4
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	9103      	str	r1, [sp, #12]
 8007932:	2b00      	cmp	r3, #0
 8007934:	bfbb      	ittet	lt
 8007936:	425b      	neglt	r3, r3
 8007938:	f042 0202 	orrlt.w	r2, r2, #2
 800793c:	9307      	strge	r3, [sp, #28]
 800793e:	9307      	strlt	r3, [sp, #28]
 8007940:	bfb8      	it	lt
 8007942:	9204      	strlt	r2, [sp, #16]
 8007944:	7823      	ldrb	r3, [r4, #0]
 8007946:	2b2e      	cmp	r3, #46	; 0x2e
 8007948:	d10c      	bne.n	8007964 <_svfiprintf_r+0x130>
 800794a:	7863      	ldrb	r3, [r4, #1]
 800794c:	2b2a      	cmp	r3, #42	; 0x2a
 800794e:	d135      	bne.n	80079bc <_svfiprintf_r+0x188>
 8007950:	9b03      	ldr	r3, [sp, #12]
 8007952:	3402      	adds	r4, #2
 8007954:	1d1a      	adds	r2, r3, #4
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	9203      	str	r2, [sp, #12]
 800795a:	2b00      	cmp	r3, #0
 800795c:	bfb8      	it	lt
 800795e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007962:	9305      	str	r3, [sp, #20]
 8007964:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8007a24 <_svfiprintf_r+0x1f0>
 8007968:	2203      	movs	r2, #3
 800796a:	4650      	mov	r0, sl
 800796c:	7821      	ldrb	r1, [r4, #0]
 800796e:	f7ff f941 	bl	8006bf4 <memchr>
 8007972:	b140      	cbz	r0, 8007986 <_svfiprintf_r+0x152>
 8007974:	2340      	movs	r3, #64	; 0x40
 8007976:	eba0 000a 	sub.w	r0, r0, sl
 800797a:	fa03 f000 	lsl.w	r0, r3, r0
 800797e:	9b04      	ldr	r3, [sp, #16]
 8007980:	3401      	adds	r4, #1
 8007982:	4303      	orrs	r3, r0
 8007984:	9304      	str	r3, [sp, #16]
 8007986:	f814 1b01 	ldrb.w	r1, [r4], #1
 800798a:	2206      	movs	r2, #6
 800798c:	4826      	ldr	r0, [pc, #152]	; (8007a28 <_svfiprintf_r+0x1f4>)
 800798e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007992:	f7ff f92f 	bl	8006bf4 <memchr>
 8007996:	2800      	cmp	r0, #0
 8007998:	d038      	beq.n	8007a0c <_svfiprintf_r+0x1d8>
 800799a:	4b24      	ldr	r3, [pc, #144]	; (8007a2c <_svfiprintf_r+0x1f8>)
 800799c:	bb1b      	cbnz	r3, 80079e6 <_svfiprintf_r+0x1b2>
 800799e:	9b03      	ldr	r3, [sp, #12]
 80079a0:	3307      	adds	r3, #7
 80079a2:	f023 0307 	bic.w	r3, r3, #7
 80079a6:	3308      	adds	r3, #8
 80079a8:	9303      	str	r3, [sp, #12]
 80079aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079ac:	4433      	add	r3, r6
 80079ae:	9309      	str	r3, [sp, #36]	; 0x24
 80079b0:	e767      	b.n	8007882 <_svfiprintf_r+0x4e>
 80079b2:	460c      	mov	r4, r1
 80079b4:	2001      	movs	r0, #1
 80079b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80079ba:	e7a5      	b.n	8007908 <_svfiprintf_r+0xd4>
 80079bc:	2300      	movs	r3, #0
 80079be:	f04f 0c0a 	mov.w	ip, #10
 80079c2:	4619      	mov	r1, r3
 80079c4:	3401      	adds	r4, #1
 80079c6:	9305      	str	r3, [sp, #20]
 80079c8:	4620      	mov	r0, r4
 80079ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80079ce:	3a30      	subs	r2, #48	; 0x30
 80079d0:	2a09      	cmp	r2, #9
 80079d2:	d903      	bls.n	80079dc <_svfiprintf_r+0x1a8>
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d0c5      	beq.n	8007964 <_svfiprintf_r+0x130>
 80079d8:	9105      	str	r1, [sp, #20]
 80079da:	e7c3      	b.n	8007964 <_svfiprintf_r+0x130>
 80079dc:	4604      	mov	r4, r0
 80079de:	2301      	movs	r3, #1
 80079e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80079e4:	e7f0      	b.n	80079c8 <_svfiprintf_r+0x194>
 80079e6:	ab03      	add	r3, sp, #12
 80079e8:	9300      	str	r3, [sp, #0]
 80079ea:	462a      	mov	r2, r5
 80079ec:	4638      	mov	r0, r7
 80079ee:	4b10      	ldr	r3, [pc, #64]	; (8007a30 <_svfiprintf_r+0x1fc>)
 80079f0:	a904      	add	r1, sp, #16
 80079f2:	f7fc fa7d 	bl	8003ef0 <_printf_float>
 80079f6:	1c42      	adds	r2, r0, #1
 80079f8:	4606      	mov	r6, r0
 80079fa:	d1d6      	bne.n	80079aa <_svfiprintf_r+0x176>
 80079fc:	89ab      	ldrh	r3, [r5, #12]
 80079fe:	065b      	lsls	r3, r3, #25
 8007a00:	f53f af2c 	bmi.w	800785c <_svfiprintf_r+0x28>
 8007a04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a06:	b01d      	add	sp, #116	; 0x74
 8007a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a0c:	ab03      	add	r3, sp, #12
 8007a0e:	9300      	str	r3, [sp, #0]
 8007a10:	462a      	mov	r2, r5
 8007a12:	4638      	mov	r0, r7
 8007a14:	4b06      	ldr	r3, [pc, #24]	; (8007a30 <_svfiprintf_r+0x1fc>)
 8007a16:	a904      	add	r1, sp, #16
 8007a18:	f7fc fd06 	bl	8004428 <_printf_i>
 8007a1c:	e7eb      	b.n	80079f6 <_svfiprintf_r+0x1c2>
 8007a1e:	bf00      	nop
 8007a20:	08008aa4 	.word	0x08008aa4
 8007a24:	08008aaa 	.word	0x08008aaa
 8007a28:	08008aae 	.word	0x08008aae
 8007a2c:	08003ef1 	.word	0x08003ef1
 8007a30:	0800777d 	.word	0x0800777d

08007a34 <nan>:
 8007a34:	2000      	movs	r0, #0
 8007a36:	4901      	ldr	r1, [pc, #4]	; (8007a3c <nan+0x8>)
 8007a38:	4770      	bx	lr
 8007a3a:	bf00      	nop
 8007a3c:	7ff80000 	.word	0x7ff80000

08007a40 <_sbrk_r>:
 8007a40:	b538      	push	{r3, r4, r5, lr}
 8007a42:	2300      	movs	r3, #0
 8007a44:	4d05      	ldr	r5, [pc, #20]	; (8007a5c <_sbrk_r+0x1c>)
 8007a46:	4604      	mov	r4, r0
 8007a48:	4608      	mov	r0, r1
 8007a4a:	602b      	str	r3, [r5, #0]
 8007a4c:	f7fa f882 	bl	8001b54 <_sbrk>
 8007a50:	1c43      	adds	r3, r0, #1
 8007a52:	d102      	bne.n	8007a5a <_sbrk_r+0x1a>
 8007a54:	682b      	ldr	r3, [r5, #0]
 8007a56:	b103      	cbz	r3, 8007a5a <_sbrk_r+0x1a>
 8007a58:	6023      	str	r3, [r4, #0]
 8007a5a:	bd38      	pop	{r3, r4, r5, pc}
 8007a5c:	200002c0 	.word	0x200002c0

08007a60 <strncmp>:
 8007a60:	4603      	mov	r3, r0
 8007a62:	b510      	push	{r4, lr}
 8007a64:	b172      	cbz	r2, 8007a84 <strncmp+0x24>
 8007a66:	3901      	subs	r1, #1
 8007a68:	1884      	adds	r4, r0, r2
 8007a6a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007a6e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007a72:	4290      	cmp	r0, r2
 8007a74:	d101      	bne.n	8007a7a <strncmp+0x1a>
 8007a76:	42a3      	cmp	r3, r4
 8007a78:	d101      	bne.n	8007a7e <strncmp+0x1e>
 8007a7a:	1a80      	subs	r0, r0, r2
 8007a7c:	bd10      	pop	{r4, pc}
 8007a7e:	2800      	cmp	r0, #0
 8007a80:	d1f3      	bne.n	8007a6a <strncmp+0xa>
 8007a82:	e7fa      	b.n	8007a7a <strncmp+0x1a>
 8007a84:	4610      	mov	r0, r2
 8007a86:	e7f9      	b.n	8007a7c <strncmp+0x1c>

08007a88 <__ascii_wctomb>:
 8007a88:	4603      	mov	r3, r0
 8007a8a:	4608      	mov	r0, r1
 8007a8c:	b141      	cbz	r1, 8007aa0 <__ascii_wctomb+0x18>
 8007a8e:	2aff      	cmp	r2, #255	; 0xff
 8007a90:	d904      	bls.n	8007a9c <__ascii_wctomb+0x14>
 8007a92:	228a      	movs	r2, #138	; 0x8a
 8007a94:	f04f 30ff 	mov.w	r0, #4294967295
 8007a98:	601a      	str	r2, [r3, #0]
 8007a9a:	4770      	bx	lr
 8007a9c:	2001      	movs	r0, #1
 8007a9e:	700a      	strb	r2, [r1, #0]
 8007aa0:	4770      	bx	lr
	...

08007aa4 <__assert_func>:
 8007aa4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007aa6:	4614      	mov	r4, r2
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	4b09      	ldr	r3, [pc, #36]	; (8007ad0 <__assert_func+0x2c>)
 8007aac:	4605      	mov	r5, r0
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	68d8      	ldr	r0, [r3, #12]
 8007ab2:	b14c      	cbz	r4, 8007ac8 <__assert_func+0x24>
 8007ab4:	4b07      	ldr	r3, [pc, #28]	; (8007ad4 <__assert_func+0x30>)
 8007ab6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007aba:	9100      	str	r1, [sp, #0]
 8007abc:	462b      	mov	r3, r5
 8007abe:	4906      	ldr	r1, [pc, #24]	; (8007ad8 <__assert_func+0x34>)
 8007ac0:	f000 f80e 	bl	8007ae0 <fiprintf>
 8007ac4:	f000 fa8a 	bl	8007fdc <abort>
 8007ac8:	4b04      	ldr	r3, [pc, #16]	; (8007adc <__assert_func+0x38>)
 8007aca:	461c      	mov	r4, r3
 8007acc:	e7f3      	b.n	8007ab6 <__assert_func+0x12>
 8007ace:	bf00      	nop
 8007ad0:	2000000c 	.word	0x2000000c
 8007ad4:	08008ab5 	.word	0x08008ab5
 8007ad8:	08008ac2 	.word	0x08008ac2
 8007adc:	08008af0 	.word	0x08008af0

08007ae0 <fiprintf>:
 8007ae0:	b40e      	push	{r1, r2, r3}
 8007ae2:	b503      	push	{r0, r1, lr}
 8007ae4:	4601      	mov	r1, r0
 8007ae6:	ab03      	add	r3, sp, #12
 8007ae8:	4805      	ldr	r0, [pc, #20]	; (8007b00 <fiprintf+0x20>)
 8007aea:	f853 2b04 	ldr.w	r2, [r3], #4
 8007aee:	6800      	ldr	r0, [r0, #0]
 8007af0:	9301      	str	r3, [sp, #4]
 8007af2:	f000 f883 	bl	8007bfc <_vfiprintf_r>
 8007af6:	b002      	add	sp, #8
 8007af8:	f85d eb04 	ldr.w	lr, [sp], #4
 8007afc:	b003      	add	sp, #12
 8007afe:	4770      	bx	lr
 8007b00:	2000000c 	.word	0x2000000c

08007b04 <memmove>:
 8007b04:	4288      	cmp	r0, r1
 8007b06:	b510      	push	{r4, lr}
 8007b08:	eb01 0402 	add.w	r4, r1, r2
 8007b0c:	d902      	bls.n	8007b14 <memmove+0x10>
 8007b0e:	4284      	cmp	r4, r0
 8007b10:	4623      	mov	r3, r4
 8007b12:	d807      	bhi.n	8007b24 <memmove+0x20>
 8007b14:	1e43      	subs	r3, r0, #1
 8007b16:	42a1      	cmp	r1, r4
 8007b18:	d008      	beq.n	8007b2c <memmove+0x28>
 8007b1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007b1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007b22:	e7f8      	b.n	8007b16 <memmove+0x12>
 8007b24:	4601      	mov	r1, r0
 8007b26:	4402      	add	r2, r0
 8007b28:	428a      	cmp	r2, r1
 8007b2a:	d100      	bne.n	8007b2e <memmove+0x2a>
 8007b2c:	bd10      	pop	{r4, pc}
 8007b2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007b32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007b36:	e7f7      	b.n	8007b28 <memmove+0x24>

08007b38 <__malloc_lock>:
 8007b38:	4801      	ldr	r0, [pc, #4]	; (8007b40 <__malloc_lock+0x8>)
 8007b3a:	f000 bc0b 	b.w	8008354 <__retarget_lock_acquire_recursive>
 8007b3e:	bf00      	nop
 8007b40:	200002c4 	.word	0x200002c4

08007b44 <__malloc_unlock>:
 8007b44:	4801      	ldr	r0, [pc, #4]	; (8007b4c <__malloc_unlock+0x8>)
 8007b46:	f000 bc06 	b.w	8008356 <__retarget_lock_release_recursive>
 8007b4a:	bf00      	nop
 8007b4c:	200002c4 	.word	0x200002c4

08007b50 <_realloc_r>:
 8007b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b54:	4680      	mov	r8, r0
 8007b56:	4614      	mov	r4, r2
 8007b58:	460e      	mov	r6, r1
 8007b5a:	b921      	cbnz	r1, 8007b66 <_realloc_r+0x16>
 8007b5c:	4611      	mov	r1, r2
 8007b5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b62:	f7ff bd97 	b.w	8007694 <_malloc_r>
 8007b66:	b92a      	cbnz	r2, 8007b74 <_realloc_r+0x24>
 8007b68:	f7ff fd2c 	bl	80075c4 <_free_r>
 8007b6c:	4625      	mov	r5, r4
 8007b6e:	4628      	mov	r0, r5
 8007b70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b74:	f000 fc56 	bl	8008424 <_malloc_usable_size_r>
 8007b78:	4284      	cmp	r4, r0
 8007b7a:	4607      	mov	r7, r0
 8007b7c:	d802      	bhi.n	8007b84 <_realloc_r+0x34>
 8007b7e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007b82:	d812      	bhi.n	8007baa <_realloc_r+0x5a>
 8007b84:	4621      	mov	r1, r4
 8007b86:	4640      	mov	r0, r8
 8007b88:	f7ff fd84 	bl	8007694 <_malloc_r>
 8007b8c:	4605      	mov	r5, r0
 8007b8e:	2800      	cmp	r0, #0
 8007b90:	d0ed      	beq.n	8007b6e <_realloc_r+0x1e>
 8007b92:	42bc      	cmp	r4, r7
 8007b94:	4622      	mov	r2, r4
 8007b96:	4631      	mov	r1, r6
 8007b98:	bf28      	it	cs
 8007b9a:	463a      	movcs	r2, r7
 8007b9c:	f7ff f838 	bl	8006c10 <memcpy>
 8007ba0:	4631      	mov	r1, r6
 8007ba2:	4640      	mov	r0, r8
 8007ba4:	f7ff fd0e 	bl	80075c4 <_free_r>
 8007ba8:	e7e1      	b.n	8007b6e <_realloc_r+0x1e>
 8007baa:	4635      	mov	r5, r6
 8007bac:	e7df      	b.n	8007b6e <_realloc_r+0x1e>

08007bae <__sfputc_r>:
 8007bae:	6893      	ldr	r3, [r2, #8]
 8007bb0:	b410      	push	{r4}
 8007bb2:	3b01      	subs	r3, #1
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	6093      	str	r3, [r2, #8]
 8007bb8:	da07      	bge.n	8007bca <__sfputc_r+0x1c>
 8007bba:	6994      	ldr	r4, [r2, #24]
 8007bbc:	42a3      	cmp	r3, r4
 8007bbe:	db01      	blt.n	8007bc4 <__sfputc_r+0x16>
 8007bc0:	290a      	cmp	r1, #10
 8007bc2:	d102      	bne.n	8007bca <__sfputc_r+0x1c>
 8007bc4:	bc10      	pop	{r4}
 8007bc6:	f000 b949 	b.w	8007e5c <__swbuf_r>
 8007bca:	6813      	ldr	r3, [r2, #0]
 8007bcc:	1c58      	adds	r0, r3, #1
 8007bce:	6010      	str	r0, [r2, #0]
 8007bd0:	7019      	strb	r1, [r3, #0]
 8007bd2:	4608      	mov	r0, r1
 8007bd4:	bc10      	pop	{r4}
 8007bd6:	4770      	bx	lr

08007bd8 <__sfputs_r>:
 8007bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bda:	4606      	mov	r6, r0
 8007bdc:	460f      	mov	r7, r1
 8007bde:	4614      	mov	r4, r2
 8007be0:	18d5      	adds	r5, r2, r3
 8007be2:	42ac      	cmp	r4, r5
 8007be4:	d101      	bne.n	8007bea <__sfputs_r+0x12>
 8007be6:	2000      	movs	r0, #0
 8007be8:	e007      	b.n	8007bfa <__sfputs_r+0x22>
 8007bea:	463a      	mov	r2, r7
 8007bec:	4630      	mov	r0, r6
 8007bee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bf2:	f7ff ffdc 	bl	8007bae <__sfputc_r>
 8007bf6:	1c43      	adds	r3, r0, #1
 8007bf8:	d1f3      	bne.n	8007be2 <__sfputs_r+0xa>
 8007bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007bfc <_vfiprintf_r>:
 8007bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c00:	460d      	mov	r5, r1
 8007c02:	4614      	mov	r4, r2
 8007c04:	4698      	mov	r8, r3
 8007c06:	4606      	mov	r6, r0
 8007c08:	b09d      	sub	sp, #116	; 0x74
 8007c0a:	b118      	cbz	r0, 8007c14 <_vfiprintf_r+0x18>
 8007c0c:	6983      	ldr	r3, [r0, #24]
 8007c0e:	b90b      	cbnz	r3, 8007c14 <_vfiprintf_r+0x18>
 8007c10:	f000 fb02 	bl	8008218 <__sinit>
 8007c14:	4b89      	ldr	r3, [pc, #548]	; (8007e3c <_vfiprintf_r+0x240>)
 8007c16:	429d      	cmp	r5, r3
 8007c18:	d11b      	bne.n	8007c52 <_vfiprintf_r+0x56>
 8007c1a:	6875      	ldr	r5, [r6, #4]
 8007c1c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c1e:	07d9      	lsls	r1, r3, #31
 8007c20:	d405      	bmi.n	8007c2e <_vfiprintf_r+0x32>
 8007c22:	89ab      	ldrh	r3, [r5, #12]
 8007c24:	059a      	lsls	r2, r3, #22
 8007c26:	d402      	bmi.n	8007c2e <_vfiprintf_r+0x32>
 8007c28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c2a:	f000 fb93 	bl	8008354 <__retarget_lock_acquire_recursive>
 8007c2e:	89ab      	ldrh	r3, [r5, #12]
 8007c30:	071b      	lsls	r3, r3, #28
 8007c32:	d501      	bpl.n	8007c38 <_vfiprintf_r+0x3c>
 8007c34:	692b      	ldr	r3, [r5, #16]
 8007c36:	b9eb      	cbnz	r3, 8007c74 <_vfiprintf_r+0x78>
 8007c38:	4629      	mov	r1, r5
 8007c3a:	4630      	mov	r0, r6
 8007c3c:	f000 f960 	bl	8007f00 <__swsetup_r>
 8007c40:	b1c0      	cbz	r0, 8007c74 <_vfiprintf_r+0x78>
 8007c42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c44:	07dc      	lsls	r4, r3, #31
 8007c46:	d50e      	bpl.n	8007c66 <_vfiprintf_r+0x6a>
 8007c48:	f04f 30ff 	mov.w	r0, #4294967295
 8007c4c:	b01d      	add	sp, #116	; 0x74
 8007c4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c52:	4b7b      	ldr	r3, [pc, #492]	; (8007e40 <_vfiprintf_r+0x244>)
 8007c54:	429d      	cmp	r5, r3
 8007c56:	d101      	bne.n	8007c5c <_vfiprintf_r+0x60>
 8007c58:	68b5      	ldr	r5, [r6, #8]
 8007c5a:	e7df      	b.n	8007c1c <_vfiprintf_r+0x20>
 8007c5c:	4b79      	ldr	r3, [pc, #484]	; (8007e44 <_vfiprintf_r+0x248>)
 8007c5e:	429d      	cmp	r5, r3
 8007c60:	bf08      	it	eq
 8007c62:	68f5      	ldreq	r5, [r6, #12]
 8007c64:	e7da      	b.n	8007c1c <_vfiprintf_r+0x20>
 8007c66:	89ab      	ldrh	r3, [r5, #12]
 8007c68:	0598      	lsls	r0, r3, #22
 8007c6a:	d4ed      	bmi.n	8007c48 <_vfiprintf_r+0x4c>
 8007c6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c6e:	f000 fb72 	bl	8008356 <__retarget_lock_release_recursive>
 8007c72:	e7e9      	b.n	8007c48 <_vfiprintf_r+0x4c>
 8007c74:	2300      	movs	r3, #0
 8007c76:	9309      	str	r3, [sp, #36]	; 0x24
 8007c78:	2320      	movs	r3, #32
 8007c7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c7e:	2330      	movs	r3, #48	; 0x30
 8007c80:	f04f 0901 	mov.w	r9, #1
 8007c84:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c88:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007e48 <_vfiprintf_r+0x24c>
 8007c8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c90:	4623      	mov	r3, r4
 8007c92:	469a      	mov	sl, r3
 8007c94:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c98:	b10a      	cbz	r2, 8007c9e <_vfiprintf_r+0xa2>
 8007c9a:	2a25      	cmp	r2, #37	; 0x25
 8007c9c:	d1f9      	bne.n	8007c92 <_vfiprintf_r+0x96>
 8007c9e:	ebba 0b04 	subs.w	fp, sl, r4
 8007ca2:	d00b      	beq.n	8007cbc <_vfiprintf_r+0xc0>
 8007ca4:	465b      	mov	r3, fp
 8007ca6:	4622      	mov	r2, r4
 8007ca8:	4629      	mov	r1, r5
 8007caa:	4630      	mov	r0, r6
 8007cac:	f7ff ff94 	bl	8007bd8 <__sfputs_r>
 8007cb0:	3001      	adds	r0, #1
 8007cb2:	f000 80aa 	beq.w	8007e0a <_vfiprintf_r+0x20e>
 8007cb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007cb8:	445a      	add	r2, fp
 8007cba:	9209      	str	r2, [sp, #36]	; 0x24
 8007cbc:	f89a 3000 	ldrb.w	r3, [sl]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	f000 80a2 	beq.w	8007e0a <_vfiprintf_r+0x20e>
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8007ccc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007cd0:	f10a 0a01 	add.w	sl, sl, #1
 8007cd4:	9304      	str	r3, [sp, #16]
 8007cd6:	9307      	str	r3, [sp, #28]
 8007cd8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007cdc:	931a      	str	r3, [sp, #104]	; 0x68
 8007cde:	4654      	mov	r4, sl
 8007ce0:	2205      	movs	r2, #5
 8007ce2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ce6:	4858      	ldr	r0, [pc, #352]	; (8007e48 <_vfiprintf_r+0x24c>)
 8007ce8:	f7fe ff84 	bl	8006bf4 <memchr>
 8007cec:	9a04      	ldr	r2, [sp, #16]
 8007cee:	b9d8      	cbnz	r0, 8007d28 <_vfiprintf_r+0x12c>
 8007cf0:	06d1      	lsls	r1, r2, #27
 8007cf2:	bf44      	itt	mi
 8007cf4:	2320      	movmi	r3, #32
 8007cf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007cfa:	0713      	lsls	r3, r2, #28
 8007cfc:	bf44      	itt	mi
 8007cfe:	232b      	movmi	r3, #43	; 0x2b
 8007d00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d04:	f89a 3000 	ldrb.w	r3, [sl]
 8007d08:	2b2a      	cmp	r3, #42	; 0x2a
 8007d0a:	d015      	beq.n	8007d38 <_vfiprintf_r+0x13c>
 8007d0c:	4654      	mov	r4, sl
 8007d0e:	2000      	movs	r0, #0
 8007d10:	f04f 0c0a 	mov.w	ip, #10
 8007d14:	9a07      	ldr	r2, [sp, #28]
 8007d16:	4621      	mov	r1, r4
 8007d18:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d1c:	3b30      	subs	r3, #48	; 0x30
 8007d1e:	2b09      	cmp	r3, #9
 8007d20:	d94e      	bls.n	8007dc0 <_vfiprintf_r+0x1c4>
 8007d22:	b1b0      	cbz	r0, 8007d52 <_vfiprintf_r+0x156>
 8007d24:	9207      	str	r2, [sp, #28]
 8007d26:	e014      	b.n	8007d52 <_vfiprintf_r+0x156>
 8007d28:	eba0 0308 	sub.w	r3, r0, r8
 8007d2c:	fa09 f303 	lsl.w	r3, r9, r3
 8007d30:	4313      	orrs	r3, r2
 8007d32:	46a2      	mov	sl, r4
 8007d34:	9304      	str	r3, [sp, #16]
 8007d36:	e7d2      	b.n	8007cde <_vfiprintf_r+0xe2>
 8007d38:	9b03      	ldr	r3, [sp, #12]
 8007d3a:	1d19      	adds	r1, r3, #4
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	9103      	str	r1, [sp, #12]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	bfbb      	ittet	lt
 8007d44:	425b      	neglt	r3, r3
 8007d46:	f042 0202 	orrlt.w	r2, r2, #2
 8007d4a:	9307      	strge	r3, [sp, #28]
 8007d4c:	9307      	strlt	r3, [sp, #28]
 8007d4e:	bfb8      	it	lt
 8007d50:	9204      	strlt	r2, [sp, #16]
 8007d52:	7823      	ldrb	r3, [r4, #0]
 8007d54:	2b2e      	cmp	r3, #46	; 0x2e
 8007d56:	d10c      	bne.n	8007d72 <_vfiprintf_r+0x176>
 8007d58:	7863      	ldrb	r3, [r4, #1]
 8007d5a:	2b2a      	cmp	r3, #42	; 0x2a
 8007d5c:	d135      	bne.n	8007dca <_vfiprintf_r+0x1ce>
 8007d5e:	9b03      	ldr	r3, [sp, #12]
 8007d60:	3402      	adds	r4, #2
 8007d62:	1d1a      	adds	r2, r3, #4
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	9203      	str	r2, [sp, #12]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	bfb8      	it	lt
 8007d6c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007d70:	9305      	str	r3, [sp, #20]
 8007d72:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8007e4c <_vfiprintf_r+0x250>
 8007d76:	2203      	movs	r2, #3
 8007d78:	4650      	mov	r0, sl
 8007d7a:	7821      	ldrb	r1, [r4, #0]
 8007d7c:	f7fe ff3a 	bl	8006bf4 <memchr>
 8007d80:	b140      	cbz	r0, 8007d94 <_vfiprintf_r+0x198>
 8007d82:	2340      	movs	r3, #64	; 0x40
 8007d84:	eba0 000a 	sub.w	r0, r0, sl
 8007d88:	fa03 f000 	lsl.w	r0, r3, r0
 8007d8c:	9b04      	ldr	r3, [sp, #16]
 8007d8e:	3401      	adds	r4, #1
 8007d90:	4303      	orrs	r3, r0
 8007d92:	9304      	str	r3, [sp, #16]
 8007d94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d98:	2206      	movs	r2, #6
 8007d9a:	482d      	ldr	r0, [pc, #180]	; (8007e50 <_vfiprintf_r+0x254>)
 8007d9c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007da0:	f7fe ff28 	bl	8006bf4 <memchr>
 8007da4:	2800      	cmp	r0, #0
 8007da6:	d03f      	beq.n	8007e28 <_vfiprintf_r+0x22c>
 8007da8:	4b2a      	ldr	r3, [pc, #168]	; (8007e54 <_vfiprintf_r+0x258>)
 8007daa:	bb1b      	cbnz	r3, 8007df4 <_vfiprintf_r+0x1f8>
 8007dac:	9b03      	ldr	r3, [sp, #12]
 8007dae:	3307      	adds	r3, #7
 8007db0:	f023 0307 	bic.w	r3, r3, #7
 8007db4:	3308      	adds	r3, #8
 8007db6:	9303      	str	r3, [sp, #12]
 8007db8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dba:	443b      	add	r3, r7
 8007dbc:	9309      	str	r3, [sp, #36]	; 0x24
 8007dbe:	e767      	b.n	8007c90 <_vfiprintf_r+0x94>
 8007dc0:	460c      	mov	r4, r1
 8007dc2:	2001      	movs	r0, #1
 8007dc4:	fb0c 3202 	mla	r2, ip, r2, r3
 8007dc8:	e7a5      	b.n	8007d16 <_vfiprintf_r+0x11a>
 8007dca:	2300      	movs	r3, #0
 8007dcc:	f04f 0c0a 	mov.w	ip, #10
 8007dd0:	4619      	mov	r1, r3
 8007dd2:	3401      	adds	r4, #1
 8007dd4:	9305      	str	r3, [sp, #20]
 8007dd6:	4620      	mov	r0, r4
 8007dd8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ddc:	3a30      	subs	r2, #48	; 0x30
 8007dde:	2a09      	cmp	r2, #9
 8007de0:	d903      	bls.n	8007dea <_vfiprintf_r+0x1ee>
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d0c5      	beq.n	8007d72 <_vfiprintf_r+0x176>
 8007de6:	9105      	str	r1, [sp, #20]
 8007de8:	e7c3      	b.n	8007d72 <_vfiprintf_r+0x176>
 8007dea:	4604      	mov	r4, r0
 8007dec:	2301      	movs	r3, #1
 8007dee:	fb0c 2101 	mla	r1, ip, r1, r2
 8007df2:	e7f0      	b.n	8007dd6 <_vfiprintf_r+0x1da>
 8007df4:	ab03      	add	r3, sp, #12
 8007df6:	9300      	str	r3, [sp, #0]
 8007df8:	462a      	mov	r2, r5
 8007dfa:	4630      	mov	r0, r6
 8007dfc:	4b16      	ldr	r3, [pc, #88]	; (8007e58 <_vfiprintf_r+0x25c>)
 8007dfe:	a904      	add	r1, sp, #16
 8007e00:	f7fc f876 	bl	8003ef0 <_printf_float>
 8007e04:	4607      	mov	r7, r0
 8007e06:	1c78      	adds	r0, r7, #1
 8007e08:	d1d6      	bne.n	8007db8 <_vfiprintf_r+0x1bc>
 8007e0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e0c:	07d9      	lsls	r1, r3, #31
 8007e0e:	d405      	bmi.n	8007e1c <_vfiprintf_r+0x220>
 8007e10:	89ab      	ldrh	r3, [r5, #12]
 8007e12:	059a      	lsls	r2, r3, #22
 8007e14:	d402      	bmi.n	8007e1c <_vfiprintf_r+0x220>
 8007e16:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e18:	f000 fa9d 	bl	8008356 <__retarget_lock_release_recursive>
 8007e1c:	89ab      	ldrh	r3, [r5, #12]
 8007e1e:	065b      	lsls	r3, r3, #25
 8007e20:	f53f af12 	bmi.w	8007c48 <_vfiprintf_r+0x4c>
 8007e24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e26:	e711      	b.n	8007c4c <_vfiprintf_r+0x50>
 8007e28:	ab03      	add	r3, sp, #12
 8007e2a:	9300      	str	r3, [sp, #0]
 8007e2c:	462a      	mov	r2, r5
 8007e2e:	4630      	mov	r0, r6
 8007e30:	4b09      	ldr	r3, [pc, #36]	; (8007e58 <_vfiprintf_r+0x25c>)
 8007e32:	a904      	add	r1, sp, #16
 8007e34:	f7fc faf8 	bl	8004428 <_printf_i>
 8007e38:	e7e4      	b.n	8007e04 <_vfiprintf_r+0x208>
 8007e3a:	bf00      	nop
 8007e3c:	08008b14 	.word	0x08008b14
 8007e40:	08008b34 	.word	0x08008b34
 8007e44:	08008af4 	.word	0x08008af4
 8007e48:	08008aa4 	.word	0x08008aa4
 8007e4c:	08008aaa 	.word	0x08008aaa
 8007e50:	08008aae 	.word	0x08008aae
 8007e54:	08003ef1 	.word	0x08003ef1
 8007e58:	08007bd9 	.word	0x08007bd9

08007e5c <__swbuf_r>:
 8007e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e5e:	460e      	mov	r6, r1
 8007e60:	4614      	mov	r4, r2
 8007e62:	4605      	mov	r5, r0
 8007e64:	b118      	cbz	r0, 8007e6e <__swbuf_r+0x12>
 8007e66:	6983      	ldr	r3, [r0, #24]
 8007e68:	b90b      	cbnz	r3, 8007e6e <__swbuf_r+0x12>
 8007e6a:	f000 f9d5 	bl	8008218 <__sinit>
 8007e6e:	4b21      	ldr	r3, [pc, #132]	; (8007ef4 <__swbuf_r+0x98>)
 8007e70:	429c      	cmp	r4, r3
 8007e72:	d12b      	bne.n	8007ecc <__swbuf_r+0x70>
 8007e74:	686c      	ldr	r4, [r5, #4]
 8007e76:	69a3      	ldr	r3, [r4, #24]
 8007e78:	60a3      	str	r3, [r4, #8]
 8007e7a:	89a3      	ldrh	r3, [r4, #12]
 8007e7c:	071a      	lsls	r2, r3, #28
 8007e7e:	d52f      	bpl.n	8007ee0 <__swbuf_r+0x84>
 8007e80:	6923      	ldr	r3, [r4, #16]
 8007e82:	b36b      	cbz	r3, 8007ee0 <__swbuf_r+0x84>
 8007e84:	6923      	ldr	r3, [r4, #16]
 8007e86:	6820      	ldr	r0, [r4, #0]
 8007e88:	b2f6      	uxtb	r6, r6
 8007e8a:	1ac0      	subs	r0, r0, r3
 8007e8c:	6963      	ldr	r3, [r4, #20]
 8007e8e:	4637      	mov	r7, r6
 8007e90:	4283      	cmp	r3, r0
 8007e92:	dc04      	bgt.n	8007e9e <__swbuf_r+0x42>
 8007e94:	4621      	mov	r1, r4
 8007e96:	4628      	mov	r0, r5
 8007e98:	f000 f92a 	bl	80080f0 <_fflush_r>
 8007e9c:	bb30      	cbnz	r0, 8007eec <__swbuf_r+0x90>
 8007e9e:	68a3      	ldr	r3, [r4, #8]
 8007ea0:	3001      	adds	r0, #1
 8007ea2:	3b01      	subs	r3, #1
 8007ea4:	60a3      	str	r3, [r4, #8]
 8007ea6:	6823      	ldr	r3, [r4, #0]
 8007ea8:	1c5a      	adds	r2, r3, #1
 8007eaa:	6022      	str	r2, [r4, #0]
 8007eac:	701e      	strb	r6, [r3, #0]
 8007eae:	6963      	ldr	r3, [r4, #20]
 8007eb0:	4283      	cmp	r3, r0
 8007eb2:	d004      	beq.n	8007ebe <__swbuf_r+0x62>
 8007eb4:	89a3      	ldrh	r3, [r4, #12]
 8007eb6:	07db      	lsls	r3, r3, #31
 8007eb8:	d506      	bpl.n	8007ec8 <__swbuf_r+0x6c>
 8007eba:	2e0a      	cmp	r6, #10
 8007ebc:	d104      	bne.n	8007ec8 <__swbuf_r+0x6c>
 8007ebe:	4621      	mov	r1, r4
 8007ec0:	4628      	mov	r0, r5
 8007ec2:	f000 f915 	bl	80080f0 <_fflush_r>
 8007ec6:	b988      	cbnz	r0, 8007eec <__swbuf_r+0x90>
 8007ec8:	4638      	mov	r0, r7
 8007eca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ecc:	4b0a      	ldr	r3, [pc, #40]	; (8007ef8 <__swbuf_r+0x9c>)
 8007ece:	429c      	cmp	r4, r3
 8007ed0:	d101      	bne.n	8007ed6 <__swbuf_r+0x7a>
 8007ed2:	68ac      	ldr	r4, [r5, #8]
 8007ed4:	e7cf      	b.n	8007e76 <__swbuf_r+0x1a>
 8007ed6:	4b09      	ldr	r3, [pc, #36]	; (8007efc <__swbuf_r+0xa0>)
 8007ed8:	429c      	cmp	r4, r3
 8007eda:	bf08      	it	eq
 8007edc:	68ec      	ldreq	r4, [r5, #12]
 8007ede:	e7ca      	b.n	8007e76 <__swbuf_r+0x1a>
 8007ee0:	4621      	mov	r1, r4
 8007ee2:	4628      	mov	r0, r5
 8007ee4:	f000 f80c 	bl	8007f00 <__swsetup_r>
 8007ee8:	2800      	cmp	r0, #0
 8007eea:	d0cb      	beq.n	8007e84 <__swbuf_r+0x28>
 8007eec:	f04f 37ff 	mov.w	r7, #4294967295
 8007ef0:	e7ea      	b.n	8007ec8 <__swbuf_r+0x6c>
 8007ef2:	bf00      	nop
 8007ef4:	08008b14 	.word	0x08008b14
 8007ef8:	08008b34 	.word	0x08008b34
 8007efc:	08008af4 	.word	0x08008af4

08007f00 <__swsetup_r>:
 8007f00:	4b32      	ldr	r3, [pc, #200]	; (8007fcc <__swsetup_r+0xcc>)
 8007f02:	b570      	push	{r4, r5, r6, lr}
 8007f04:	681d      	ldr	r5, [r3, #0]
 8007f06:	4606      	mov	r6, r0
 8007f08:	460c      	mov	r4, r1
 8007f0a:	b125      	cbz	r5, 8007f16 <__swsetup_r+0x16>
 8007f0c:	69ab      	ldr	r3, [r5, #24]
 8007f0e:	b913      	cbnz	r3, 8007f16 <__swsetup_r+0x16>
 8007f10:	4628      	mov	r0, r5
 8007f12:	f000 f981 	bl	8008218 <__sinit>
 8007f16:	4b2e      	ldr	r3, [pc, #184]	; (8007fd0 <__swsetup_r+0xd0>)
 8007f18:	429c      	cmp	r4, r3
 8007f1a:	d10f      	bne.n	8007f3c <__swsetup_r+0x3c>
 8007f1c:	686c      	ldr	r4, [r5, #4]
 8007f1e:	89a3      	ldrh	r3, [r4, #12]
 8007f20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007f24:	0719      	lsls	r1, r3, #28
 8007f26:	d42c      	bmi.n	8007f82 <__swsetup_r+0x82>
 8007f28:	06dd      	lsls	r5, r3, #27
 8007f2a:	d411      	bmi.n	8007f50 <__swsetup_r+0x50>
 8007f2c:	2309      	movs	r3, #9
 8007f2e:	6033      	str	r3, [r6, #0]
 8007f30:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007f34:	f04f 30ff 	mov.w	r0, #4294967295
 8007f38:	81a3      	strh	r3, [r4, #12]
 8007f3a:	e03e      	b.n	8007fba <__swsetup_r+0xba>
 8007f3c:	4b25      	ldr	r3, [pc, #148]	; (8007fd4 <__swsetup_r+0xd4>)
 8007f3e:	429c      	cmp	r4, r3
 8007f40:	d101      	bne.n	8007f46 <__swsetup_r+0x46>
 8007f42:	68ac      	ldr	r4, [r5, #8]
 8007f44:	e7eb      	b.n	8007f1e <__swsetup_r+0x1e>
 8007f46:	4b24      	ldr	r3, [pc, #144]	; (8007fd8 <__swsetup_r+0xd8>)
 8007f48:	429c      	cmp	r4, r3
 8007f4a:	bf08      	it	eq
 8007f4c:	68ec      	ldreq	r4, [r5, #12]
 8007f4e:	e7e6      	b.n	8007f1e <__swsetup_r+0x1e>
 8007f50:	0758      	lsls	r0, r3, #29
 8007f52:	d512      	bpl.n	8007f7a <__swsetup_r+0x7a>
 8007f54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f56:	b141      	cbz	r1, 8007f6a <__swsetup_r+0x6a>
 8007f58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f5c:	4299      	cmp	r1, r3
 8007f5e:	d002      	beq.n	8007f66 <__swsetup_r+0x66>
 8007f60:	4630      	mov	r0, r6
 8007f62:	f7ff fb2f 	bl	80075c4 <_free_r>
 8007f66:	2300      	movs	r3, #0
 8007f68:	6363      	str	r3, [r4, #52]	; 0x34
 8007f6a:	89a3      	ldrh	r3, [r4, #12]
 8007f6c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007f70:	81a3      	strh	r3, [r4, #12]
 8007f72:	2300      	movs	r3, #0
 8007f74:	6063      	str	r3, [r4, #4]
 8007f76:	6923      	ldr	r3, [r4, #16]
 8007f78:	6023      	str	r3, [r4, #0]
 8007f7a:	89a3      	ldrh	r3, [r4, #12]
 8007f7c:	f043 0308 	orr.w	r3, r3, #8
 8007f80:	81a3      	strh	r3, [r4, #12]
 8007f82:	6923      	ldr	r3, [r4, #16]
 8007f84:	b94b      	cbnz	r3, 8007f9a <__swsetup_r+0x9a>
 8007f86:	89a3      	ldrh	r3, [r4, #12]
 8007f88:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007f8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f90:	d003      	beq.n	8007f9a <__swsetup_r+0x9a>
 8007f92:	4621      	mov	r1, r4
 8007f94:	4630      	mov	r0, r6
 8007f96:	f000 fa05 	bl	80083a4 <__smakebuf_r>
 8007f9a:	89a0      	ldrh	r0, [r4, #12]
 8007f9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007fa0:	f010 0301 	ands.w	r3, r0, #1
 8007fa4:	d00a      	beq.n	8007fbc <__swsetup_r+0xbc>
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	60a3      	str	r3, [r4, #8]
 8007faa:	6963      	ldr	r3, [r4, #20]
 8007fac:	425b      	negs	r3, r3
 8007fae:	61a3      	str	r3, [r4, #24]
 8007fb0:	6923      	ldr	r3, [r4, #16]
 8007fb2:	b943      	cbnz	r3, 8007fc6 <__swsetup_r+0xc6>
 8007fb4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007fb8:	d1ba      	bne.n	8007f30 <__swsetup_r+0x30>
 8007fba:	bd70      	pop	{r4, r5, r6, pc}
 8007fbc:	0781      	lsls	r1, r0, #30
 8007fbe:	bf58      	it	pl
 8007fc0:	6963      	ldrpl	r3, [r4, #20]
 8007fc2:	60a3      	str	r3, [r4, #8]
 8007fc4:	e7f4      	b.n	8007fb0 <__swsetup_r+0xb0>
 8007fc6:	2000      	movs	r0, #0
 8007fc8:	e7f7      	b.n	8007fba <__swsetup_r+0xba>
 8007fca:	bf00      	nop
 8007fcc:	2000000c 	.word	0x2000000c
 8007fd0:	08008b14 	.word	0x08008b14
 8007fd4:	08008b34 	.word	0x08008b34
 8007fd8:	08008af4 	.word	0x08008af4

08007fdc <abort>:
 8007fdc:	2006      	movs	r0, #6
 8007fde:	b508      	push	{r3, lr}
 8007fe0:	f000 fa50 	bl	8008484 <raise>
 8007fe4:	2001      	movs	r0, #1
 8007fe6:	f7f9 fd41 	bl	8001a6c <_exit>
	...

08007fec <__sflush_r>:
 8007fec:	898a      	ldrh	r2, [r1, #12]
 8007fee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ff0:	4605      	mov	r5, r0
 8007ff2:	0710      	lsls	r0, r2, #28
 8007ff4:	460c      	mov	r4, r1
 8007ff6:	d457      	bmi.n	80080a8 <__sflush_r+0xbc>
 8007ff8:	684b      	ldr	r3, [r1, #4]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	dc04      	bgt.n	8008008 <__sflush_r+0x1c>
 8007ffe:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008000:	2b00      	cmp	r3, #0
 8008002:	dc01      	bgt.n	8008008 <__sflush_r+0x1c>
 8008004:	2000      	movs	r0, #0
 8008006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008008:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800800a:	2e00      	cmp	r6, #0
 800800c:	d0fa      	beq.n	8008004 <__sflush_r+0x18>
 800800e:	2300      	movs	r3, #0
 8008010:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008014:	682f      	ldr	r7, [r5, #0]
 8008016:	602b      	str	r3, [r5, #0]
 8008018:	d032      	beq.n	8008080 <__sflush_r+0x94>
 800801a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800801c:	89a3      	ldrh	r3, [r4, #12]
 800801e:	075a      	lsls	r2, r3, #29
 8008020:	d505      	bpl.n	800802e <__sflush_r+0x42>
 8008022:	6863      	ldr	r3, [r4, #4]
 8008024:	1ac0      	subs	r0, r0, r3
 8008026:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008028:	b10b      	cbz	r3, 800802e <__sflush_r+0x42>
 800802a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800802c:	1ac0      	subs	r0, r0, r3
 800802e:	2300      	movs	r3, #0
 8008030:	4602      	mov	r2, r0
 8008032:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008034:	4628      	mov	r0, r5
 8008036:	6a21      	ldr	r1, [r4, #32]
 8008038:	47b0      	blx	r6
 800803a:	1c43      	adds	r3, r0, #1
 800803c:	89a3      	ldrh	r3, [r4, #12]
 800803e:	d106      	bne.n	800804e <__sflush_r+0x62>
 8008040:	6829      	ldr	r1, [r5, #0]
 8008042:	291d      	cmp	r1, #29
 8008044:	d82c      	bhi.n	80080a0 <__sflush_r+0xb4>
 8008046:	4a29      	ldr	r2, [pc, #164]	; (80080ec <__sflush_r+0x100>)
 8008048:	40ca      	lsrs	r2, r1
 800804a:	07d6      	lsls	r6, r2, #31
 800804c:	d528      	bpl.n	80080a0 <__sflush_r+0xb4>
 800804e:	2200      	movs	r2, #0
 8008050:	6062      	str	r2, [r4, #4]
 8008052:	6922      	ldr	r2, [r4, #16]
 8008054:	04d9      	lsls	r1, r3, #19
 8008056:	6022      	str	r2, [r4, #0]
 8008058:	d504      	bpl.n	8008064 <__sflush_r+0x78>
 800805a:	1c42      	adds	r2, r0, #1
 800805c:	d101      	bne.n	8008062 <__sflush_r+0x76>
 800805e:	682b      	ldr	r3, [r5, #0]
 8008060:	b903      	cbnz	r3, 8008064 <__sflush_r+0x78>
 8008062:	6560      	str	r0, [r4, #84]	; 0x54
 8008064:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008066:	602f      	str	r7, [r5, #0]
 8008068:	2900      	cmp	r1, #0
 800806a:	d0cb      	beq.n	8008004 <__sflush_r+0x18>
 800806c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008070:	4299      	cmp	r1, r3
 8008072:	d002      	beq.n	800807a <__sflush_r+0x8e>
 8008074:	4628      	mov	r0, r5
 8008076:	f7ff faa5 	bl	80075c4 <_free_r>
 800807a:	2000      	movs	r0, #0
 800807c:	6360      	str	r0, [r4, #52]	; 0x34
 800807e:	e7c2      	b.n	8008006 <__sflush_r+0x1a>
 8008080:	6a21      	ldr	r1, [r4, #32]
 8008082:	2301      	movs	r3, #1
 8008084:	4628      	mov	r0, r5
 8008086:	47b0      	blx	r6
 8008088:	1c41      	adds	r1, r0, #1
 800808a:	d1c7      	bne.n	800801c <__sflush_r+0x30>
 800808c:	682b      	ldr	r3, [r5, #0]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d0c4      	beq.n	800801c <__sflush_r+0x30>
 8008092:	2b1d      	cmp	r3, #29
 8008094:	d001      	beq.n	800809a <__sflush_r+0xae>
 8008096:	2b16      	cmp	r3, #22
 8008098:	d101      	bne.n	800809e <__sflush_r+0xb2>
 800809a:	602f      	str	r7, [r5, #0]
 800809c:	e7b2      	b.n	8008004 <__sflush_r+0x18>
 800809e:	89a3      	ldrh	r3, [r4, #12]
 80080a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080a4:	81a3      	strh	r3, [r4, #12]
 80080a6:	e7ae      	b.n	8008006 <__sflush_r+0x1a>
 80080a8:	690f      	ldr	r7, [r1, #16]
 80080aa:	2f00      	cmp	r7, #0
 80080ac:	d0aa      	beq.n	8008004 <__sflush_r+0x18>
 80080ae:	0793      	lsls	r3, r2, #30
 80080b0:	bf18      	it	ne
 80080b2:	2300      	movne	r3, #0
 80080b4:	680e      	ldr	r6, [r1, #0]
 80080b6:	bf08      	it	eq
 80080b8:	694b      	ldreq	r3, [r1, #20]
 80080ba:	1bf6      	subs	r6, r6, r7
 80080bc:	600f      	str	r7, [r1, #0]
 80080be:	608b      	str	r3, [r1, #8]
 80080c0:	2e00      	cmp	r6, #0
 80080c2:	dd9f      	ble.n	8008004 <__sflush_r+0x18>
 80080c4:	4633      	mov	r3, r6
 80080c6:	463a      	mov	r2, r7
 80080c8:	4628      	mov	r0, r5
 80080ca:	6a21      	ldr	r1, [r4, #32]
 80080cc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80080d0:	47e0      	blx	ip
 80080d2:	2800      	cmp	r0, #0
 80080d4:	dc06      	bgt.n	80080e4 <__sflush_r+0xf8>
 80080d6:	89a3      	ldrh	r3, [r4, #12]
 80080d8:	f04f 30ff 	mov.w	r0, #4294967295
 80080dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080e0:	81a3      	strh	r3, [r4, #12]
 80080e2:	e790      	b.n	8008006 <__sflush_r+0x1a>
 80080e4:	4407      	add	r7, r0
 80080e6:	1a36      	subs	r6, r6, r0
 80080e8:	e7ea      	b.n	80080c0 <__sflush_r+0xd4>
 80080ea:	bf00      	nop
 80080ec:	20400001 	.word	0x20400001

080080f0 <_fflush_r>:
 80080f0:	b538      	push	{r3, r4, r5, lr}
 80080f2:	690b      	ldr	r3, [r1, #16]
 80080f4:	4605      	mov	r5, r0
 80080f6:	460c      	mov	r4, r1
 80080f8:	b913      	cbnz	r3, 8008100 <_fflush_r+0x10>
 80080fa:	2500      	movs	r5, #0
 80080fc:	4628      	mov	r0, r5
 80080fe:	bd38      	pop	{r3, r4, r5, pc}
 8008100:	b118      	cbz	r0, 800810a <_fflush_r+0x1a>
 8008102:	6983      	ldr	r3, [r0, #24]
 8008104:	b90b      	cbnz	r3, 800810a <_fflush_r+0x1a>
 8008106:	f000 f887 	bl	8008218 <__sinit>
 800810a:	4b14      	ldr	r3, [pc, #80]	; (800815c <_fflush_r+0x6c>)
 800810c:	429c      	cmp	r4, r3
 800810e:	d11b      	bne.n	8008148 <_fflush_r+0x58>
 8008110:	686c      	ldr	r4, [r5, #4]
 8008112:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d0ef      	beq.n	80080fa <_fflush_r+0xa>
 800811a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800811c:	07d0      	lsls	r0, r2, #31
 800811e:	d404      	bmi.n	800812a <_fflush_r+0x3a>
 8008120:	0599      	lsls	r1, r3, #22
 8008122:	d402      	bmi.n	800812a <_fflush_r+0x3a>
 8008124:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008126:	f000 f915 	bl	8008354 <__retarget_lock_acquire_recursive>
 800812a:	4628      	mov	r0, r5
 800812c:	4621      	mov	r1, r4
 800812e:	f7ff ff5d 	bl	8007fec <__sflush_r>
 8008132:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008134:	4605      	mov	r5, r0
 8008136:	07da      	lsls	r2, r3, #31
 8008138:	d4e0      	bmi.n	80080fc <_fflush_r+0xc>
 800813a:	89a3      	ldrh	r3, [r4, #12]
 800813c:	059b      	lsls	r3, r3, #22
 800813e:	d4dd      	bmi.n	80080fc <_fflush_r+0xc>
 8008140:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008142:	f000 f908 	bl	8008356 <__retarget_lock_release_recursive>
 8008146:	e7d9      	b.n	80080fc <_fflush_r+0xc>
 8008148:	4b05      	ldr	r3, [pc, #20]	; (8008160 <_fflush_r+0x70>)
 800814a:	429c      	cmp	r4, r3
 800814c:	d101      	bne.n	8008152 <_fflush_r+0x62>
 800814e:	68ac      	ldr	r4, [r5, #8]
 8008150:	e7df      	b.n	8008112 <_fflush_r+0x22>
 8008152:	4b04      	ldr	r3, [pc, #16]	; (8008164 <_fflush_r+0x74>)
 8008154:	429c      	cmp	r4, r3
 8008156:	bf08      	it	eq
 8008158:	68ec      	ldreq	r4, [r5, #12]
 800815a:	e7da      	b.n	8008112 <_fflush_r+0x22>
 800815c:	08008b14 	.word	0x08008b14
 8008160:	08008b34 	.word	0x08008b34
 8008164:	08008af4 	.word	0x08008af4

08008168 <std>:
 8008168:	2300      	movs	r3, #0
 800816a:	b510      	push	{r4, lr}
 800816c:	4604      	mov	r4, r0
 800816e:	e9c0 3300 	strd	r3, r3, [r0]
 8008172:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008176:	6083      	str	r3, [r0, #8]
 8008178:	8181      	strh	r1, [r0, #12]
 800817a:	6643      	str	r3, [r0, #100]	; 0x64
 800817c:	81c2      	strh	r2, [r0, #14]
 800817e:	6183      	str	r3, [r0, #24]
 8008180:	4619      	mov	r1, r3
 8008182:	2208      	movs	r2, #8
 8008184:	305c      	adds	r0, #92	; 0x5c
 8008186:	f7fb fe0d 	bl	8003da4 <memset>
 800818a:	4b05      	ldr	r3, [pc, #20]	; (80081a0 <std+0x38>)
 800818c:	6224      	str	r4, [r4, #32]
 800818e:	6263      	str	r3, [r4, #36]	; 0x24
 8008190:	4b04      	ldr	r3, [pc, #16]	; (80081a4 <std+0x3c>)
 8008192:	62a3      	str	r3, [r4, #40]	; 0x28
 8008194:	4b04      	ldr	r3, [pc, #16]	; (80081a8 <std+0x40>)
 8008196:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008198:	4b04      	ldr	r3, [pc, #16]	; (80081ac <std+0x44>)
 800819a:	6323      	str	r3, [r4, #48]	; 0x30
 800819c:	bd10      	pop	{r4, pc}
 800819e:	bf00      	nop
 80081a0:	080084bd 	.word	0x080084bd
 80081a4:	080084df 	.word	0x080084df
 80081a8:	08008517 	.word	0x08008517
 80081ac:	0800853b 	.word	0x0800853b

080081b0 <_cleanup_r>:
 80081b0:	4901      	ldr	r1, [pc, #4]	; (80081b8 <_cleanup_r+0x8>)
 80081b2:	f000 b8af 	b.w	8008314 <_fwalk_reent>
 80081b6:	bf00      	nop
 80081b8:	080080f1 	.word	0x080080f1

080081bc <__sfmoreglue>:
 80081bc:	2268      	movs	r2, #104	; 0x68
 80081be:	b570      	push	{r4, r5, r6, lr}
 80081c0:	1e4d      	subs	r5, r1, #1
 80081c2:	4355      	muls	r5, r2
 80081c4:	460e      	mov	r6, r1
 80081c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80081ca:	f7ff fa63 	bl	8007694 <_malloc_r>
 80081ce:	4604      	mov	r4, r0
 80081d0:	b140      	cbz	r0, 80081e4 <__sfmoreglue+0x28>
 80081d2:	2100      	movs	r1, #0
 80081d4:	e9c0 1600 	strd	r1, r6, [r0]
 80081d8:	300c      	adds	r0, #12
 80081da:	60a0      	str	r0, [r4, #8]
 80081dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80081e0:	f7fb fde0 	bl	8003da4 <memset>
 80081e4:	4620      	mov	r0, r4
 80081e6:	bd70      	pop	{r4, r5, r6, pc}

080081e8 <__sfp_lock_acquire>:
 80081e8:	4801      	ldr	r0, [pc, #4]	; (80081f0 <__sfp_lock_acquire+0x8>)
 80081ea:	f000 b8b3 	b.w	8008354 <__retarget_lock_acquire_recursive>
 80081ee:	bf00      	nop
 80081f0:	200002c5 	.word	0x200002c5

080081f4 <__sfp_lock_release>:
 80081f4:	4801      	ldr	r0, [pc, #4]	; (80081fc <__sfp_lock_release+0x8>)
 80081f6:	f000 b8ae 	b.w	8008356 <__retarget_lock_release_recursive>
 80081fa:	bf00      	nop
 80081fc:	200002c5 	.word	0x200002c5

08008200 <__sinit_lock_acquire>:
 8008200:	4801      	ldr	r0, [pc, #4]	; (8008208 <__sinit_lock_acquire+0x8>)
 8008202:	f000 b8a7 	b.w	8008354 <__retarget_lock_acquire_recursive>
 8008206:	bf00      	nop
 8008208:	200002c6 	.word	0x200002c6

0800820c <__sinit_lock_release>:
 800820c:	4801      	ldr	r0, [pc, #4]	; (8008214 <__sinit_lock_release+0x8>)
 800820e:	f000 b8a2 	b.w	8008356 <__retarget_lock_release_recursive>
 8008212:	bf00      	nop
 8008214:	200002c6 	.word	0x200002c6

08008218 <__sinit>:
 8008218:	b510      	push	{r4, lr}
 800821a:	4604      	mov	r4, r0
 800821c:	f7ff fff0 	bl	8008200 <__sinit_lock_acquire>
 8008220:	69a3      	ldr	r3, [r4, #24]
 8008222:	b11b      	cbz	r3, 800822c <__sinit+0x14>
 8008224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008228:	f7ff bff0 	b.w	800820c <__sinit_lock_release>
 800822c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008230:	6523      	str	r3, [r4, #80]	; 0x50
 8008232:	4b13      	ldr	r3, [pc, #76]	; (8008280 <__sinit+0x68>)
 8008234:	4a13      	ldr	r2, [pc, #76]	; (8008284 <__sinit+0x6c>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	62a2      	str	r2, [r4, #40]	; 0x28
 800823a:	42a3      	cmp	r3, r4
 800823c:	bf08      	it	eq
 800823e:	2301      	moveq	r3, #1
 8008240:	4620      	mov	r0, r4
 8008242:	bf08      	it	eq
 8008244:	61a3      	streq	r3, [r4, #24]
 8008246:	f000 f81f 	bl	8008288 <__sfp>
 800824a:	6060      	str	r0, [r4, #4]
 800824c:	4620      	mov	r0, r4
 800824e:	f000 f81b 	bl	8008288 <__sfp>
 8008252:	60a0      	str	r0, [r4, #8]
 8008254:	4620      	mov	r0, r4
 8008256:	f000 f817 	bl	8008288 <__sfp>
 800825a:	2200      	movs	r2, #0
 800825c:	2104      	movs	r1, #4
 800825e:	60e0      	str	r0, [r4, #12]
 8008260:	6860      	ldr	r0, [r4, #4]
 8008262:	f7ff ff81 	bl	8008168 <std>
 8008266:	2201      	movs	r2, #1
 8008268:	2109      	movs	r1, #9
 800826a:	68a0      	ldr	r0, [r4, #8]
 800826c:	f7ff ff7c 	bl	8008168 <std>
 8008270:	2202      	movs	r2, #2
 8008272:	2112      	movs	r1, #18
 8008274:	68e0      	ldr	r0, [r4, #12]
 8008276:	f7ff ff77 	bl	8008168 <std>
 800827a:	2301      	movs	r3, #1
 800827c:	61a3      	str	r3, [r4, #24]
 800827e:	e7d1      	b.n	8008224 <__sinit+0xc>
 8008280:	080086b0 	.word	0x080086b0
 8008284:	080081b1 	.word	0x080081b1

08008288 <__sfp>:
 8008288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800828a:	4607      	mov	r7, r0
 800828c:	f7ff ffac 	bl	80081e8 <__sfp_lock_acquire>
 8008290:	4b1e      	ldr	r3, [pc, #120]	; (800830c <__sfp+0x84>)
 8008292:	681e      	ldr	r6, [r3, #0]
 8008294:	69b3      	ldr	r3, [r6, #24]
 8008296:	b913      	cbnz	r3, 800829e <__sfp+0x16>
 8008298:	4630      	mov	r0, r6
 800829a:	f7ff ffbd 	bl	8008218 <__sinit>
 800829e:	3648      	adds	r6, #72	; 0x48
 80082a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80082a4:	3b01      	subs	r3, #1
 80082a6:	d503      	bpl.n	80082b0 <__sfp+0x28>
 80082a8:	6833      	ldr	r3, [r6, #0]
 80082aa:	b30b      	cbz	r3, 80082f0 <__sfp+0x68>
 80082ac:	6836      	ldr	r6, [r6, #0]
 80082ae:	e7f7      	b.n	80082a0 <__sfp+0x18>
 80082b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80082b4:	b9d5      	cbnz	r5, 80082ec <__sfp+0x64>
 80082b6:	4b16      	ldr	r3, [pc, #88]	; (8008310 <__sfp+0x88>)
 80082b8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80082bc:	60e3      	str	r3, [r4, #12]
 80082be:	6665      	str	r5, [r4, #100]	; 0x64
 80082c0:	f000 f847 	bl	8008352 <__retarget_lock_init_recursive>
 80082c4:	f7ff ff96 	bl	80081f4 <__sfp_lock_release>
 80082c8:	2208      	movs	r2, #8
 80082ca:	4629      	mov	r1, r5
 80082cc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80082d0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80082d4:	6025      	str	r5, [r4, #0]
 80082d6:	61a5      	str	r5, [r4, #24]
 80082d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80082dc:	f7fb fd62 	bl	8003da4 <memset>
 80082e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80082e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80082e8:	4620      	mov	r0, r4
 80082ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082ec:	3468      	adds	r4, #104	; 0x68
 80082ee:	e7d9      	b.n	80082a4 <__sfp+0x1c>
 80082f0:	2104      	movs	r1, #4
 80082f2:	4638      	mov	r0, r7
 80082f4:	f7ff ff62 	bl	80081bc <__sfmoreglue>
 80082f8:	4604      	mov	r4, r0
 80082fa:	6030      	str	r0, [r6, #0]
 80082fc:	2800      	cmp	r0, #0
 80082fe:	d1d5      	bne.n	80082ac <__sfp+0x24>
 8008300:	f7ff ff78 	bl	80081f4 <__sfp_lock_release>
 8008304:	230c      	movs	r3, #12
 8008306:	603b      	str	r3, [r7, #0]
 8008308:	e7ee      	b.n	80082e8 <__sfp+0x60>
 800830a:	bf00      	nop
 800830c:	080086b0 	.word	0x080086b0
 8008310:	ffff0001 	.word	0xffff0001

08008314 <_fwalk_reent>:
 8008314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008318:	4606      	mov	r6, r0
 800831a:	4688      	mov	r8, r1
 800831c:	2700      	movs	r7, #0
 800831e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008322:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008326:	f1b9 0901 	subs.w	r9, r9, #1
 800832a:	d505      	bpl.n	8008338 <_fwalk_reent+0x24>
 800832c:	6824      	ldr	r4, [r4, #0]
 800832e:	2c00      	cmp	r4, #0
 8008330:	d1f7      	bne.n	8008322 <_fwalk_reent+0xe>
 8008332:	4638      	mov	r0, r7
 8008334:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008338:	89ab      	ldrh	r3, [r5, #12]
 800833a:	2b01      	cmp	r3, #1
 800833c:	d907      	bls.n	800834e <_fwalk_reent+0x3a>
 800833e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008342:	3301      	adds	r3, #1
 8008344:	d003      	beq.n	800834e <_fwalk_reent+0x3a>
 8008346:	4629      	mov	r1, r5
 8008348:	4630      	mov	r0, r6
 800834a:	47c0      	blx	r8
 800834c:	4307      	orrs	r7, r0
 800834e:	3568      	adds	r5, #104	; 0x68
 8008350:	e7e9      	b.n	8008326 <_fwalk_reent+0x12>

08008352 <__retarget_lock_init_recursive>:
 8008352:	4770      	bx	lr

08008354 <__retarget_lock_acquire_recursive>:
 8008354:	4770      	bx	lr

08008356 <__retarget_lock_release_recursive>:
 8008356:	4770      	bx	lr

08008358 <__swhatbuf_r>:
 8008358:	b570      	push	{r4, r5, r6, lr}
 800835a:	460e      	mov	r6, r1
 800835c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008360:	4614      	mov	r4, r2
 8008362:	2900      	cmp	r1, #0
 8008364:	461d      	mov	r5, r3
 8008366:	b096      	sub	sp, #88	; 0x58
 8008368:	da08      	bge.n	800837c <__swhatbuf_r+0x24>
 800836a:	2200      	movs	r2, #0
 800836c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008370:	602a      	str	r2, [r5, #0]
 8008372:	061a      	lsls	r2, r3, #24
 8008374:	d410      	bmi.n	8008398 <__swhatbuf_r+0x40>
 8008376:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800837a:	e00e      	b.n	800839a <__swhatbuf_r+0x42>
 800837c:	466a      	mov	r2, sp
 800837e:	f000 f903 	bl	8008588 <_fstat_r>
 8008382:	2800      	cmp	r0, #0
 8008384:	dbf1      	blt.n	800836a <__swhatbuf_r+0x12>
 8008386:	9a01      	ldr	r2, [sp, #4]
 8008388:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800838c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008390:	425a      	negs	r2, r3
 8008392:	415a      	adcs	r2, r3
 8008394:	602a      	str	r2, [r5, #0]
 8008396:	e7ee      	b.n	8008376 <__swhatbuf_r+0x1e>
 8008398:	2340      	movs	r3, #64	; 0x40
 800839a:	2000      	movs	r0, #0
 800839c:	6023      	str	r3, [r4, #0]
 800839e:	b016      	add	sp, #88	; 0x58
 80083a0:	bd70      	pop	{r4, r5, r6, pc}
	...

080083a4 <__smakebuf_r>:
 80083a4:	898b      	ldrh	r3, [r1, #12]
 80083a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80083a8:	079d      	lsls	r5, r3, #30
 80083aa:	4606      	mov	r6, r0
 80083ac:	460c      	mov	r4, r1
 80083ae:	d507      	bpl.n	80083c0 <__smakebuf_r+0x1c>
 80083b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80083b4:	6023      	str	r3, [r4, #0]
 80083b6:	6123      	str	r3, [r4, #16]
 80083b8:	2301      	movs	r3, #1
 80083ba:	6163      	str	r3, [r4, #20]
 80083bc:	b002      	add	sp, #8
 80083be:	bd70      	pop	{r4, r5, r6, pc}
 80083c0:	466a      	mov	r2, sp
 80083c2:	ab01      	add	r3, sp, #4
 80083c4:	f7ff ffc8 	bl	8008358 <__swhatbuf_r>
 80083c8:	9900      	ldr	r1, [sp, #0]
 80083ca:	4605      	mov	r5, r0
 80083cc:	4630      	mov	r0, r6
 80083ce:	f7ff f961 	bl	8007694 <_malloc_r>
 80083d2:	b948      	cbnz	r0, 80083e8 <__smakebuf_r+0x44>
 80083d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083d8:	059a      	lsls	r2, r3, #22
 80083da:	d4ef      	bmi.n	80083bc <__smakebuf_r+0x18>
 80083dc:	f023 0303 	bic.w	r3, r3, #3
 80083e0:	f043 0302 	orr.w	r3, r3, #2
 80083e4:	81a3      	strh	r3, [r4, #12]
 80083e6:	e7e3      	b.n	80083b0 <__smakebuf_r+0xc>
 80083e8:	4b0d      	ldr	r3, [pc, #52]	; (8008420 <__smakebuf_r+0x7c>)
 80083ea:	62b3      	str	r3, [r6, #40]	; 0x28
 80083ec:	89a3      	ldrh	r3, [r4, #12]
 80083ee:	6020      	str	r0, [r4, #0]
 80083f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083f4:	81a3      	strh	r3, [r4, #12]
 80083f6:	9b00      	ldr	r3, [sp, #0]
 80083f8:	6120      	str	r0, [r4, #16]
 80083fa:	6163      	str	r3, [r4, #20]
 80083fc:	9b01      	ldr	r3, [sp, #4]
 80083fe:	b15b      	cbz	r3, 8008418 <__smakebuf_r+0x74>
 8008400:	4630      	mov	r0, r6
 8008402:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008406:	f000 f8d1 	bl	80085ac <_isatty_r>
 800840a:	b128      	cbz	r0, 8008418 <__smakebuf_r+0x74>
 800840c:	89a3      	ldrh	r3, [r4, #12]
 800840e:	f023 0303 	bic.w	r3, r3, #3
 8008412:	f043 0301 	orr.w	r3, r3, #1
 8008416:	81a3      	strh	r3, [r4, #12]
 8008418:	89a0      	ldrh	r0, [r4, #12]
 800841a:	4305      	orrs	r5, r0
 800841c:	81a5      	strh	r5, [r4, #12]
 800841e:	e7cd      	b.n	80083bc <__smakebuf_r+0x18>
 8008420:	080081b1 	.word	0x080081b1

08008424 <_malloc_usable_size_r>:
 8008424:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008428:	1f18      	subs	r0, r3, #4
 800842a:	2b00      	cmp	r3, #0
 800842c:	bfbc      	itt	lt
 800842e:	580b      	ldrlt	r3, [r1, r0]
 8008430:	18c0      	addlt	r0, r0, r3
 8008432:	4770      	bx	lr

08008434 <_raise_r>:
 8008434:	291f      	cmp	r1, #31
 8008436:	b538      	push	{r3, r4, r5, lr}
 8008438:	4604      	mov	r4, r0
 800843a:	460d      	mov	r5, r1
 800843c:	d904      	bls.n	8008448 <_raise_r+0x14>
 800843e:	2316      	movs	r3, #22
 8008440:	6003      	str	r3, [r0, #0]
 8008442:	f04f 30ff 	mov.w	r0, #4294967295
 8008446:	bd38      	pop	{r3, r4, r5, pc}
 8008448:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800844a:	b112      	cbz	r2, 8008452 <_raise_r+0x1e>
 800844c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008450:	b94b      	cbnz	r3, 8008466 <_raise_r+0x32>
 8008452:	4620      	mov	r0, r4
 8008454:	f000 f830 	bl	80084b8 <_getpid_r>
 8008458:	462a      	mov	r2, r5
 800845a:	4601      	mov	r1, r0
 800845c:	4620      	mov	r0, r4
 800845e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008462:	f000 b817 	b.w	8008494 <_kill_r>
 8008466:	2b01      	cmp	r3, #1
 8008468:	d00a      	beq.n	8008480 <_raise_r+0x4c>
 800846a:	1c59      	adds	r1, r3, #1
 800846c:	d103      	bne.n	8008476 <_raise_r+0x42>
 800846e:	2316      	movs	r3, #22
 8008470:	6003      	str	r3, [r0, #0]
 8008472:	2001      	movs	r0, #1
 8008474:	e7e7      	b.n	8008446 <_raise_r+0x12>
 8008476:	2400      	movs	r4, #0
 8008478:	4628      	mov	r0, r5
 800847a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800847e:	4798      	blx	r3
 8008480:	2000      	movs	r0, #0
 8008482:	e7e0      	b.n	8008446 <_raise_r+0x12>

08008484 <raise>:
 8008484:	4b02      	ldr	r3, [pc, #8]	; (8008490 <raise+0xc>)
 8008486:	4601      	mov	r1, r0
 8008488:	6818      	ldr	r0, [r3, #0]
 800848a:	f7ff bfd3 	b.w	8008434 <_raise_r>
 800848e:	bf00      	nop
 8008490:	2000000c 	.word	0x2000000c

08008494 <_kill_r>:
 8008494:	b538      	push	{r3, r4, r5, lr}
 8008496:	2300      	movs	r3, #0
 8008498:	4d06      	ldr	r5, [pc, #24]	; (80084b4 <_kill_r+0x20>)
 800849a:	4604      	mov	r4, r0
 800849c:	4608      	mov	r0, r1
 800849e:	4611      	mov	r1, r2
 80084a0:	602b      	str	r3, [r5, #0]
 80084a2:	f7f9 fad3 	bl	8001a4c <_kill>
 80084a6:	1c43      	adds	r3, r0, #1
 80084a8:	d102      	bne.n	80084b0 <_kill_r+0x1c>
 80084aa:	682b      	ldr	r3, [r5, #0]
 80084ac:	b103      	cbz	r3, 80084b0 <_kill_r+0x1c>
 80084ae:	6023      	str	r3, [r4, #0]
 80084b0:	bd38      	pop	{r3, r4, r5, pc}
 80084b2:	bf00      	nop
 80084b4:	200002c0 	.word	0x200002c0

080084b8 <_getpid_r>:
 80084b8:	f7f9 bac1 	b.w	8001a3e <_getpid>

080084bc <__sread>:
 80084bc:	b510      	push	{r4, lr}
 80084be:	460c      	mov	r4, r1
 80084c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084c4:	f000 f894 	bl	80085f0 <_read_r>
 80084c8:	2800      	cmp	r0, #0
 80084ca:	bfab      	itete	ge
 80084cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80084ce:	89a3      	ldrhlt	r3, [r4, #12]
 80084d0:	181b      	addge	r3, r3, r0
 80084d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80084d6:	bfac      	ite	ge
 80084d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80084da:	81a3      	strhlt	r3, [r4, #12]
 80084dc:	bd10      	pop	{r4, pc}

080084de <__swrite>:
 80084de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084e2:	461f      	mov	r7, r3
 80084e4:	898b      	ldrh	r3, [r1, #12]
 80084e6:	4605      	mov	r5, r0
 80084e8:	05db      	lsls	r3, r3, #23
 80084ea:	460c      	mov	r4, r1
 80084ec:	4616      	mov	r6, r2
 80084ee:	d505      	bpl.n	80084fc <__swrite+0x1e>
 80084f0:	2302      	movs	r3, #2
 80084f2:	2200      	movs	r2, #0
 80084f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084f8:	f000 f868 	bl	80085cc <_lseek_r>
 80084fc:	89a3      	ldrh	r3, [r4, #12]
 80084fe:	4632      	mov	r2, r6
 8008500:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008504:	81a3      	strh	r3, [r4, #12]
 8008506:	4628      	mov	r0, r5
 8008508:	463b      	mov	r3, r7
 800850a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800850e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008512:	f000 b817 	b.w	8008544 <_write_r>

08008516 <__sseek>:
 8008516:	b510      	push	{r4, lr}
 8008518:	460c      	mov	r4, r1
 800851a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800851e:	f000 f855 	bl	80085cc <_lseek_r>
 8008522:	1c43      	adds	r3, r0, #1
 8008524:	89a3      	ldrh	r3, [r4, #12]
 8008526:	bf15      	itete	ne
 8008528:	6560      	strne	r0, [r4, #84]	; 0x54
 800852a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800852e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008532:	81a3      	strheq	r3, [r4, #12]
 8008534:	bf18      	it	ne
 8008536:	81a3      	strhne	r3, [r4, #12]
 8008538:	bd10      	pop	{r4, pc}

0800853a <__sclose>:
 800853a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800853e:	f000 b813 	b.w	8008568 <_close_r>
	...

08008544 <_write_r>:
 8008544:	b538      	push	{r3, r4, r5, lr}
 8008546:	4604      	mov	r4, r0
 8008548:	4608      	mov	r0, r1
 800854a:	4611      	mov	r1, r2
 800854c:	2200      	movs	r2, #0
 800854e:	4d05      	ldr	r5, [pc, #20]	; (8008564 <_write_r+0x20>)
 8008550:	602a      	str	r2, [r5, #0]
 8008552:	461a      	mov	r2, r3
 8008554:	f7f9 fab1 	bl	8001aba <_write>
 8008558:	1c43      	adds	r3, r0, #1
 800855a:	d102      	bne.n	8008562 <_write_r+0x1e>
 800855c:	682b      	ldr	r3, [r5, #0]
 800855e:	b103      	cbz	r3, 8008562 <_write_r+0x1e>
 8008560:	6023      	str	r3, [r4, #0]
 8008562:	bd38      	pop	{r3, r4, r5, pc}
 8008564:	200002c0 	.word	0x200002c0

08008568 <_close_r>:
 8008568:	b538      	push	{r3, r4, r5, lr}
 800856a:	2300      	movs	r3, #0
 800856c:	4d05      	ldr	r5, [pc, #20]	; (8008584 <_close_r+0x1c>)
 800856e:	4604      	mov	r4, r0
 8008570:	4608      	mov	r0, r1
 8008572:	602b      	str	r3, [r5, #0]
 8008574:	f7f9 fabd 	bl	8001af2 <_close>
 8008578:	1c43      	adds	r3, r0, #1
 800857a:	d102      	bne.n	8008582 <_close_r+0x1a>
 800857c:	682b      	ldr	r3, [r5, #0]
 800857e:	b103      	cbz	r3, 8008582 <_close_r+0x1a>
 8008580:	6023      	str	r3, [r4, #0]
 8008582:	bd38      	pop	{r3, r4, r5, pc}
 8008584:	200002c0 	.word	0x200002c0

08008588 <_fstat_r>:
 8008588:	b538      	push	{r3, r4, r5, lr}
 800858a:	2300      	movs	r3, #0
 800858c:	4d06      	ldr	r5, [pc, #24]	; (80085a8 <_fstat_r+0x20>)
 800858e:	4604      	mov	r4, r0
 8008590:	4608      	mov	r0, r1
 8008592:	4611      	mov	r1, r2
 8008594:	602b      	str	r3, [r5, #0]
 8008596:	f7f9 fab7 	bl	8001b08 <_fstat>
 800859a:	1c43      	adds	r3, r0, #1
 800859c:	d102      	bne.n	80085a4 <_fstat_r+0x1c>
 800859e:	682b      	ldr	r3, [r5, #0]
 80085a0:	b103      	cbz	r3, 80085a4 <_fstat_r+0x1c>
 80085a2:	6023      	str	r3, [r4, #0]
 80085a4:	bd38      	pop	{r3, r4, r5, pc}
 80085a6:	bf00      	nop
 80085a8:	200002c0 	.word	0x200002c0

080085ac <_isatty_r>:
 80085ac:	b538      	push	{r3, r4, r5, lr}
 80085ae:	2300      	movs	r3, #0
 80085b0:	4d05      	ldr	r5, [pc, #20]	; (80085c8 <_isatty_r+0x1c>)
 80085b2:	4604      	mov	r4, r0
 80085b4:	4608      	mov	r0, r1
 80085b6:	602b      	str	r3, [r5, #0]
 80085b8:	f7f9 fab5 	bl	8001b26 <_isatty>
 80085bc:	1c43      	adds	r3, r0, #1
 80085be:	d102      	bne.n	80085c6 <_isatty_r+0x1a>
 80085c0:	682b      	ldr	r3, [r5, #0]
 80085c2:	b103      	cbz	r3, 80085c6 <_isatty_r+0x1a>
 80085c4:	6023      	str	r3, [r4, #0]
 80085c6:	bd38      	pop	{r3, r4, r5, pc}
 80085c8:	200002c0 	.word	0x200002c0

080085cc <_lseek_r>:
 80085cc:	b538      	push	{r3, r4, r5, lr}
 80085ce:	4604      	mov	r4, r0
 80085d0:	4608      	mov	r0, r1
 80085d2:	4611      	mov	r1, r2
 80085d4:	2200      	movs	r2, #0
 80085d6:	4d05      	ldr	r5, [pc, #20]	; (80085ec <_lseek_r+0x20>)
 80085d8:	602a      	str	r2, [r5, #0]
 80085da:	461a      	mov	r2, r3
 80085dc:	f7f9 faad 	bl	8001b3a <_lseek>
 80085e0:	1c43      	adds	r3, r0, #1
 80085e2:	d102      	bne.n	80085ea <_lseek_r+0x1e>
 80085e4:	682b      	ldr	r3, [r5, #0]
 80085e6:	b103      	cbz	r3, 80085ea <_lseek_r+0x1e>
 80085e8:	6023      	str	r3, [r4, #0]
 80085ea:	bd38      	pop	{r3, r4, r5, pc}
 80085ec:	200002c0 	.word	0x200002c0

080085f0 <_read_r>:
 80085f0:	b538      	push	{r3, r4, r5, lr}
 80085f2:	4604      	mov	r4, r0
 80085f4:	4608      	mov	r0, r1
 80085f6:	4611      	mov	r1, r2
 80085f8:	2200      	movs	r2, #0
 80085fa:	4d05      	ldr	r5, [pc, #20]	; (8008610 <_read_r+0x20>)
 80085fc:	602a      	str	r2, [r5, #0]
 80085fe:	461a      	mov	r2, r3
 8008600:	f7f9 fa3e 	bl	8001a80 <_read>
 8008604:	1c43      	adds	r3, r0, #1
 8008606:	d102      	bne.n	800860e <_read_r+0x1e>
 8008608:	682b      	ldr	r3, [r5, #0]
 800860a:	b103      	cbz	r3, 800860e <_read_r+0x1e>
 800860c:	6023      	str	r3, [r4, #0]
 800860e:	bd38      	pop	{r3, r4, r5, pc}
 8008610:	200002c0 	.word	0x200002c0

08008614 <_init>:
 8008614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008616:	bf00      	nop
 8008618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800861a:	bc08      	pop	{r3}
 800861c:	469e      	mov	lr, r3
 800861e:	4770      	bx	lr

08008620 <_fini>:
 8008620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008622:	bf00      	nop
 8008624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008626:	bc08      	pop	{r3}
 8008628:	469e      	mov	lr, r3
 800862a:	4770      	bx	lr
